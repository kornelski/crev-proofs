# Automatically generated by https://lib.rs/crevette 0.25.0 from cargo-crev reviews

[[audits.actix-web-httpauth]]
who = "\"qnighy\" (https://github.com/qnighy)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.3.2"
notes = "Not thoroughly confirmed the conformance to the HTTP spec, but basically the crate does its job."
aggregated-from = [
    "https://github.com/qnighy/crev-proofs#fkkJ3Z6xSDEZwFlyKgIDxYS2x6mS7b2cxbWBeEWgfXs",
    "crev:review/sjCUJrgMCTk7kDOawQ8SQtdp2SWLIG3Bm-HIffqKEUA",
]

[[audits.adler]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.2"
notes = """
This is an implementation of Adler-32 checksum. It has no `unsafe`, and the
code is quite simple. The only complicated part is the algorithm itself, but
there is a big comment explaining what's going on, and the structure of the
code matches the explanation. I can't vouch the implementation is bug-free,
but I'm sure it's sound and isn't malicious.

Thoroughness is \"high\" because I read the whole crate quite attentively, but
understanding is still \"medium\" since I didn't quite follow the math that
enables vectorization in this crate. """
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/JliX-m4U-a4Rme0ED_p1BSCBqHkeFtXVfHjxfZ9Tem0",
]

[[audits.adler]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "strong",
    "level-low",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.2.3"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/qDhg4ag8EADfDrFJsAVbQvKGKygt4FxNmeW1zFblqOg",
]

[[audits.adler32]]
who = "\"remram44\" (https://github.com/remram44)"
criteria = [
    "strong",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.2.0"
notes = "I wrote this. No unsafe code, no dependencies."
aggregated-from = [
    "https://github.com/remram44/crev-proofs#V_B2pKpHVBIp_NegKfur4MK9GqFo0o78ijhku90pYS0",
    "crev:review/SyzAKpBXS2RhJtRWI_RbutWObwums6mxw9G5_IeT7SI",
]

[[audits.adler32]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "1.0.4"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/ynmXn6cdS36OyUVGv5hMkTWa1YOegyxbdKUU9tN2LF4",
]

[[audits.adler32]]
who = "\"remram44\" (https://github.com/remram44)"
criteria = [
    "strong",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.3"
notes = """
I wrote this. No unsafe code, no dependencies.
No code change from 1.0.2, only clarified licenses.
"""
aggregated-from = [
    "https://github.com/remram44/crev-proofs#V_B2pKpHVBIp_NegKfur4MK9GqFo0o78ijhku90pYS0",
    "crev:review/l5JIW1Z-MX2FFTgW9YRzP-z3UYMrrt5ZganH6fhg4M0",
]

[[audits.adler32]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "1.0.3"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/7MAkHIaI3SBxNXflplfrkUst91o7r570Drwr4ZsWz6U",
]

[[audits.adler32]]
who = "\"remram44\" (https://github.com/remram44)"
criteria = [
    "strong",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.2"
notes = """
I wrote this. No unsafe code, no dependencies.
No change from 1.0.1, just added a README.md.
"""
aggregated-from = [
    "https://github.com/remram44/crev-proofs#V_B2pKpHVBIp_NegKfur4MK9GqFo0o78ijhku90pYS0",
    "crev:review/r-Ebe4VtRJxJnE22whQ01VvOoFohF3HmexTdyWEMw68",
]

[[audits.ahash]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.3.8"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/UCPwj8Q-gNnPtPj035MoptAyDjMXWY_SAK2WSP59qEQ",
]

[[audits.aho-corasick]]
who = "\"BurntSushi\" (https://github.com/BurntSushi)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.7.6"
notes = """
I wrote this crate, so this review is a reflection as a result of writing the
code and then reviewing it again for this review.

While the aho-corasick crate is not often used directly, it is a key
optimization technique used in the `regex` crate for quickly finding
potential matches by searching literals.

I gave this crate a rating of `positive` instead of the highest `strong`
because it was somewhat recently rewritten. So it hasn't been thoroughly
vetted yet.

At a higher level, one concern point of this crate is that it has a lot of
`unsafe` usage. While a small number of those `unsafe` uses are for the
Aho-Corasick algorithm itself---mostly for explicitly eliding bounds checks
for performance reasons---the vast majority of all `unsafe` uses are for the
implementation of the Teddy algorithm, which makes heavy use of SIMD through
explicit CPU specific vendor intrinsics. The Teddy algorithm is used as a
fast prefilter to quickly find potential matches when searching for a smaller
number of patterns. The speedups can be an order of magnitude, so the extra
code complexity is worth it.

As with the memchr crate, both the Aho-Corasick algorithm and the Teddy
algorithm are thoroughly tested. Both are tested independently of one another
and when they are used together. Like the memchr crate, the Teddy
algorithm is tested on a wide variety of haystack configurations to test
different haystack lengths and match positions, all of which can exercise
different aspects of the Teddy algorithm. If one counted the total number of
tests for the entire crate (including variations on each), it would easily
be in the tens of thousands.
"""
aggregated-from = [
    "https://github.com/BurntSushi/crev-proofs#VylyTuk8CMGqIxgHixWaqfiUn3xZyzOA1wFrQ0sR1As",
    "crev:review/52xM6QpPyM8JIpJbhNt2j3fgzs1v_VcZUO0-5qwW_6E",
]

[[audits.algebraics]]
who = "\"programmerjake\" (https://github.com/programmerjake)"
criteria = [
    "positive",
    "level-medium",
    "trust-low",
]
delta = "0.1.2 -> 0.2.0"
notes = "original author"
aggregated-from = [
    "https://github.com/programmerjake/crev-proofs#dUc4luSnPuYlfYarXUizPOSBLUBZguTVOQUCHmAKSps",
    "crev:review/oSp0v3EzUIJREwU2MdMFxF5d3v8wWLwh0z_QxDmpsCo",
]

[[audits.algebraics]]
who = "\"programmerjake\" (https://github.com/programmerjake)"
criteria = [
    "positive",
    "level-medium",
    "trust-low",
]
delta = "0.1.1 -> 0.1.2"
notes = """
original author
"""
aggregated-from = [
    "https://github.com/programmerjake/crev-proofs#dUc4luSnPuYlfYarXUizPOSBLUBZguTVOQUCHmAKSps",
    "crev:review/Dh8fJosRKOUdAQTYWZz5oxR4QTj12fY9hQbLY81PJAk",
]

[[audits.algebraics]]
who = "\"programmerjake\" (https://github.com/programmerjake)"
criteria = [
    "positive",
    "level-medium",
    "trust-low",
]
delta = "0.1.0 -> 0.1.1"
notes = """
original author
"""
aggregated-from = [
    "https://github.com/programmerjake/crev-proofs#dUc4luSnPuYlfYarXUizPOSBLUBZguTVOQUCHmAKSps",
    "crev:review/1kFAOEAq1H8A9-AIDEvXNEmjlMeYmDXwJEDbt6-VMu4",
]

[[audits.algebraics]]
who = "\"programmerjake\" (https://github.com/programmerjake)"
criteria = [
    "positive",
    "level-medium",
    "trust-low",
]
version = "0.1.0"
notes = "original author"
aggregated-from = [
    "https://github.com/programmerjake/crev-proofs#dUc4luSnPuYlfYarXUizPOSBLUBZguTVOQUCHmAKSps",
    "crev:review/9FjCbpI1ud_o-l9kaAWlquf3pm1kFCWM1okhtpimu9s",
]

[[audits.allan-tools]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.1.2"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/vlWe8qeZAAI7-ydEY6T2cnpPkUozegAqtUnMNJkQNok",
]

[[audits.andrew]]
who = "\"icefox\" (https://git.sr.ht/~icefox)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.2.1"
notes = """
No unsafe, nothing malicious, life is good.
"""
aggregated-from = [
    "https://git.sr.ht/~icefox/crev-proofs#lr2ldir9XdBsKQkW3YGpRIO2pxhtSucdzf3M5ivfv4A",
    "crev:review/3lGx26JAXImcifzK8Em0ZIs-CsH74UbggzAHWsEtfr8",
]

[[audits.ansi_term]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.11.0"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/H0qKT-Zw1zlsU6mQjLfkqO8UBhCCOYZGMzRDzxChjSU",
]

[[audits.anstyle]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.3.5"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/KJFe7Npaa1icbcUw3wNAE75MnrdFTowFTyFEv5JoWuE",
]

[[audits.approx]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.3.2"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/gktA0VfrEIVn-wUkyEKsCDK6wzQysM_Xkd2b6j6KPtw",
]

[[audits.arbitrary]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.4.7"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/YZzXeZdQoiknRZlY14tpnW3opFtjiup97brjI4CSqv4",
]

[[audits.arc-swap]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.4.2"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/2gifgNvj3d2hwG-DvdbOko5uTZq-Rrv_lPwoxKbkrGE",
]

[[audits.arg_enum_proc_macro]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.3.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/LLnYZS7Lf4LhiRJAuQ3dE_BNm9ngzdWWRPqSLS2anTs",
]

[[audits.array-macro]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.5"
notes = """
Pros:
* Solid and awesome

Cons:
* `unsafe` in macro prevents use with `#![forbid(unsafe_code)]`
* Bumps MSRV on patch versions (but so far only for damn good reasons)

[Full Audit]

[Full Audit]:   https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/array-macro.md"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/nbZVbbf0GOL_t8zYucnNw9o8ozo7GyA0tbncmiktajc",
]

[[audits.arrayref]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.3.5"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/IvGLhuQgbWLlpWrHyXatRrYRMi5hhYVCqfkz3wrU6JM",
]

[[audits.arrayvec]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "neutral",
    "level-medium",
    "trust-medium",
    "safe-to-run",
]
delta = "0.5.0 -> 0.5.1"
notes = '''
Stack/value variable length arrays without heap fallback.

Pros:
* Maybe sound?
* Better than what you'll write.

Cons:
* History of unsoundness (0.4.10 and earlier)
* Disturbing amounts of unsafe

This version switched some slices possibly containing uninit (UB!) to use
pointers instead.  This makes `encode_utf8` unsafe, sadly.

| Diff                                  | Rating | Notes |
| ------------------------------------- | ------ | ----- |
| .cargo_vcs_info.json                  | +1 | |
| .gitignore                            | +1 | |
| Cargo.lock                            | +1 | Rust version bump?
| Cargo.toml                            | +1 | debug \[profile.*\]
| Cargo.toml.orig                       | +1 | debug \[profile.*\]
| README.rst                            | +1 | |
| *.{events,string_data,string_index}   | 0 | Binary test files, unreviewed
| src/array.rs                          | +1 | Removed `#[inline]`
| src/array_string.rs                   | +1 | Added `fn len`, removed `#[inline]`, use ptr instead of slice
| src/chars.rs                          | +1 | `encode_utf8` is now sadly unsafe, more test coverage
| src/lib.rs                            | +1 | Inline tweaks, more (correct) ptr use, add `as_*_ptr` to match Vec (safe/sound)
'''
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/MwTidDkLwDNw0PK6kCxuzf46ugcjRSYWus4gHKF-7s4",
]

[[audits.arrayvec]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "neutral",
    "level-medium",
    "trust-medium",
    "safe-to-run",
]
delta = "0.4.11 -> 0.5.0"
notes = """
Stack/value variable length arrays without heap fallback.

Pros:
* Maybe sound?
* Better than what you'll write.

Cons:
* History of unsoundness (0.4.10 and earlier)
* Disturbing amounts of unsafe

| Diff                          | Rating | Notes |
| ----------------------------- | ------ | ----- |
| .cargo_vs_info.json           | +1 | |
| .travis.yml                   | +1 | MSRV bumped to 1.36.0, features tweaked.
| Cargo.toml                    | +1 | feature \"serde-1\" -> \"serde\", 2018 edition, drop cruft
| Cargo.toml.orig               | +1 | |
| README.rst                    | 0  | \"(not yet released)\" no longer accurate.
| benches/extend.rs             | +1 | +black_box
| build.rs                      | +1 | Dropped?
| src/array.rs                  | +1 | Improved safety docs, although could use more explaination of what relies on the invariants.  () and bool indexing for 1/2-len arrays.
| src/array_string.rs           | 0  | mem::zeroed -> MaybeUninitCopy::uninitialized.  Lots of Copy constraints, one transmute -> from_utf8_unchecked_mut (safer).
| src/lib.rs                    | 0  | truncate now unsafe (but sound), new try_extend_from_slice is unsafe (but sound).  ArrayVec::extend ZST handling is obtuse, would be unsound in C++, but I believe sound in Rust, maybe?
| src/maybe_uninit.rs           | +1 | |
| src/maybe_uninit_nodrop.rs    | +1 | Removed
| src/maybe_uninit_stable.rs    | +1 | Removed
| src/range.rs                  | +1 | Removed
| tests/serde.rs                | +1 | |
| tests/tests.rs                | +1 | New test cases
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/MoHiKr_J4_IzDw7BkWhail-SXXlkmecQf08dSI0TsPM",
]

[[audits.arrayvec]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "neutral",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
delta = "0.4.10 -> 0.4.11"
notes = """
Probably sound as of 0.4.11 on Rust 1.36.0+?
Uses a disturbing amount of unsafe, but aside from uninitialized! use in ArrayVec 1.35 and earlier, it all at least appears to be correct after a careful reading.
Unlike smallvec, this doesn't fall back on the heap.
Better than whatever you'll write rolling your own, at least.

0.4.7  -> 0.4.8:  IntoIter implemented Clone, unconcerning
0.4.8  -> 0.4.9:  ArrayString initialized to 0, ArrayVec uses nightly MaybeUninit.  Unfortunately stable still uses uninitialized!() so this is still negative.
0.4.9  -> 0.4.10: #[repr(C)], -Clone for MaybeUninit.  Apparently I missed more possible unsoundness.  Unsafe is hard.
0.4.10 -> 0.4.11: ArrayVec should now also be sound in Rust 1.36.0+, probably, maybe.
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/kOX-GYZRalh87XtVSWeRk2K3i_V2vUEE73X39h1rkNk",
]

[[audits.arrayvec]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.4.11"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/olcuOVa6pdt4c_SC9Xty-1hcNFoKhVz1I8pmVoYK1Wo",
]

[[audits.arrayvec]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "negative",
    "level-medium",
    "trust-medium",
]
delta = "0.4.9 -> 0.4.10"
notes = """
Prefer 0.4.11 which at least starts using MaybeUninit instead of uninitialized!(), which is fundamentally unsound.
Uses a disturbing amount of unsafe, but aside from uninitialized, it all at least appears to be correct after a careful reading.
Unlike smallvec, this doesn't fall back on the heap.
Better than whatever you'll write rolling your own, at least.

0.4.7 -> 0.4.8:  IntoIter implemented Clone, unconcerning
0.4.8 -> 0.4.9:  ArrayString initialized to 0, ArrayVec uses nightly MaybeUninit.  Unfortunately stable still uses uninitialized!() so this is still negative.
0.4.9 -> 0.4.10: #[repr(C)], -Clone for MaybeUninit.  Apparently I missed more possible unsoundness.  Unsafe is hard.
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/avTOoVfTn8zNm6TTeuYiNOX4eGcx3guU8aXDKkUPato",
]

[[audits.arrayvec]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "negative",
    "level-medium",
    "trust-medium",
]
delta = "0.4.8 -> 0.4.9"
notes = """
Prefer 0.4.11 which at least starts using MaybeUninit instead of uninitialized!(), which is fundamentally unsound.
Uses a disturbing amount of unsafe, but aside from uninitialized, it all at least appears to be correct after a careful reading.
Unlike smallvec, this doesn't fall back on the heap.
Better than whatever you'll write rolling your own, at least.

0.4.7 -> 0.4.8: IntoIter implemented Clone, unconcerning
0.4.8 -> 0.4.9: ArrayString initialized to 0, ArrayVec uses nightly MaybeUninit.  Unfortunately stable still uses uninitialized!() so this is still negative.
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/xwWhlLdpvRimH5UuxI-R3sRX-E2sT-46O7ugmMNZqsM",
]

[[audits.arrayvec]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "negative",
    "level-medium",
    "trust-medium",
]
delta = "0.4.7 -> 0.4.8"
notes = """
Prefer 0.4.11 which at least starts using MaybeUninit instead of uninitialized!(), which is fundamentally unsound.
Uses a disturbing amount of unsafe, but aside from uninitialized, it all at least appears to be correct after a careful reading.
Unlike smallvec, this doesn't fall back on the heap.
Better than whatever you'll write rolling your own, at least.

See 0.4.7 for base review.  Diffed 0.4.7 -> 0.4.8, no concerning changes.
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/oJtEpFoH7J3EGxls1kh5dc6ApCjVfr7226OMEDYGbN0",
]

[[audits.arrayvec]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "negative",
    "level-medium",
    "trust-medium",
]
version = "0.4.7"
notes = """
Prefer 0.4.11 which at least starts using MaybeUninit instead of uninitialized!(), which is fundamentally unsound.
Uses a disturbing amount of unsafe, but aside from uninitialized, it all at least appears to be correct after a careful reading.
Unlike smallvec, this doesn't fall back on the heap.
Better than whatever you'll write rolling your own, at least.

Detail
======

| File                      | Rating | Notes |
| ------------------------- | ------ | ----- |
| benches/arraystring.rs    | +1    | |
| benches/extend.rs         | +1    | |
| src/array_string.rs       | 0     | lots of unsafe, but I think sound
| src/array.rs              | 0     | fix_array_impl! hides unsafe, but not misused nor public
| src/char.rs               | +1    | Relied upon for soundness... thoroughly checked against https://en.wikipedia.org/wiki/UTF-8
| src/errors.rs             | +1    | |
| src/lib.rs                | 0     | lots of unsafe, but I think sound
| src/range.rs              | +1    | |
| tests/serde.rs            | +1    | |
| tests/tests.rs            | +1    | |
| .gitignore                | +1    | |
| .travis.yml               | +1    | |
| Cargo.toml                | +1    | |
| Cargo.toml.orig           | +1    | |
| custom.css                | +1    | |
| LICENSE-APACHE            | +1    | |
| LICENSE-MIT               | +1    | |
| README.rst                | +1    | |


| Other     | Rating | Notes |
| --------- | ------ | ----- |
| unsafe    | -1    | Overused
| fs        | +1    | Unused
| docs      | +1    | |
| tests     | 0     | Good coverage... not seeing any fuzz testing for all this unsafe though.



src/array_string.rs 
-------------------

### OK

| Line  | Notes |
| -----:| ----- |
| 56    | unsafe - new_array ~ uninitialized, Array is an unsafe trait though so only implement it if this is sound...?
| 95    | No CapacityError?  Inconsistent vs from...
| 160   | unsafe { ... } - looks correct
| 213   | unsafe { ... } - looks correct
| 216   | could be a slice copy instead
| 245   | unsafe { ... } - looks correct
| 271   | unsafe { ... } - looks correct
| 307   | unsafe { ... } - looks correct
| 318   | unsafe { ... } - looks correct
| 331   | unsafe fn - decent docs, looks correct, should be more explicit about uninitialized though
| 342   | unsafe fn - needs better docs, but looks correct
| 351   | unsafe { ... } - looks correct
| 361   | unsafe { ... } - scary transmute, but just from &mut [u8] to &mut str.  stdlib from_utf8_unchecked does equivalent pointer casts

src/array.rs 
-------------------

| Line  | Notes     |
| -----:| --------- |
| 80    | Aieee!    |
| 132   | unsafe { ... } - not sure this is sound for bools etc.
| 214   | unsafe { ... } - looks correct
| 246   | unsafe fn - exactly as spceified
| 306   | unsafe { ... } - looks correct
| 340   | unsafe { ... } - looks correct
| 511   | unsafe fn - exactly as specified
| 552   | unsafe { ... } - scary as heck... but Drain should keep self borrowed long enough, at least.
| 575   | unsafe { ... } - looks correct
| 604   | unsafe { ... } - looks correct
| 614   | unsafe { ... } - looks correct
| 707   | unsafe { ... } - looks correct.  Size could be reduced, relies on IntoIter's custom drop not dropping copied elements due to the index increment to avoid double drops.
| 724   | unsafe { ... } - looks correct.  Size could be reduced, relies on IntoIter's custom drop not dropping copied elements due to the length decrement to avoid double drops.
| 740   | unsafe { ... } - looks correct.  Implements the aforementioned IntoIter custom drop.
| 764   | unsafe Sync - I believe this is OK.
| 765   | unsafe Send - I believe this is OK.
| 775   | unsafe { ... } - looks correct.  Relies on set_len already being truncated to avoid double drops.
| 793   | unsafe { ... } - looks correct.  Relies on set_len already being truncated to avoid double drops.
| 809   | necessary to aovid memory leaks
| 812   | unsafe { ... } - looks correct.
| 851   | unsafe { ... } - looks correct.
| 1008  | unsafe { ... } - looks correct.
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/yY9QT7JDIgcHlyqbDaxCQB32vS7JgA5s1V4eDrLr9Pk",
]

[[audits.ascii]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "negative",
    "level-medium",
    "trust-medium",
]
version = "0.9.2"
notes = """
UNSOUND: https://github.com/tomprogrammer/rust-ascii/issues/64 (I didn't catch this one)
unsound? https://github.com/tomprogrammer/rust-ascii/issues/65

Lots of repeated unsafe.
No debug_assert! s for uncheck codepaths.
Unsound test code assumes gen_range meets it's safe API contract.
Not fully reviewed.

Detail
======

| File                              | Rating | Notes |
| --------------------------------- | ------ | ----- |
| src/serialization/ascii_char.rs   | +1    | thoroughness: low, understanding: high throughout |
| src/serialization/ascii_str.rs    | +1    | |
| src/serialization/ascii_string.rs | +1    | |
| src/serialization/mod.rs          | +1    | |
| src/ascii_char.rs                 | 0     | unsound test code?
| src/ascii_str.rs                  | -1    | UNSOUND - missing #[repr(transparent)]` !
| src/ascii_string.rs               | N/A   | Unreviewed |
| src/free_functions.rs             | N/A   | |
| src/lib.rs                        | N/A   | |
| .gitignore                        | N/A   | |
| .travis.yml                       | N/A   | |
| Cargo.toml                        | +1    | |
| Cargo.toml.orig                   | +1    | |
| LICENSE-APACHE                    | N/A   | |
| LICENSE_MIT                       | N/A   | |
| README.md                         | N/A   | |
| RELEASES.md                       | N/A   | |
| tests.rs                          | N/A   | |

| Other     | Rating | Notes |
| --------- | ------ | ----- |
| unsafe    | -1    | UNSOUND, disappointing lack of debug_assert!s.
| fs        | +1?   | Not present?
| io        | +1?   | Not present?
| docs      | +1?   |
| tests     | +1?   |

### src/ascii_char.rs

| Line  | Notes |
| -----:| ----- |
| 22    | This must contain every value between 0..=127 for soundness guarantees bellow.
| 476   | unsafe { ... } - looks sound.  case 1 handles 32..=126, case 2 handles 127, case 3 handles 0..=31.  Not wild about this impl but looks valid.  See https://en.wikipedia.org/wiki/Control_Pictures
| 498   | unsafe { ... } - looks sound.  'a' > 'A'
| 509   | unsafe { ... } - looks sound.
| 548   | unsafe { ... } - looks sound.  Duplicate logic, annoyingly.
| 557   | unsafe { ... } - looks sound.  Duplicate logic, annoyingly.
| 659   | unsafe fn - looks good.
| 670   | unsafe fn - disappointing lack of debug_assert!
| 678   | unsafe { ... } - looks sound.
| 686   | unsafe fn - disappointing lack of debug_assert!.  transmute from u8 to #[repr(u8)] enum... I believe that's sound.
| 694   | unsafe { ... } - looks sound.
| 702   | unsafe fn - looks sound.
| 714   | UNSOUND TEST CODE?  no guarantee generic Gen actually generates within range.  Gated behind \"quickcheck\" feature.
| 735   | UNSOUND TEST CODE?  no guarantee generic Gen actually generates within range.  Gated behind \"quickcheck\" feature.

### src/ascii_str.rs

| Line  | Notes |
| -----:| ----- |
| 116   | unsafe fn - looks good.
| 352   | UNSOUND unsafe { ... } - AsciiStr is not `#[repr(transparent)]` !
| 359   | UNSOUND unsafe { ... } - AsciiStr is not `#[repr(transparent)]` !
| 367   | UNSOUND unsafe { ... } - AsciiStr is not `#[repr(transparent)]` !
| 384   | scary transmuting impl_into! macro, audit all uses carefully
| 390   | UNSOUND unsafe { ... } - AsciiStr is not `#[repr(transparent)]` !
| 397   | UNSOUND unsafe { ... } - AsciiStr is not `#[repr(transparent)]` !
| 405   | UNSOUND unsafe { ... } - AsciiStr is not `#[repr(transparent)]` !
| 410   | I believed these invokes would be sound if AsciiStr was `#[repr(transparent)]`, but https://github.com/tomprogrammer/rust-ascii/issues/64 proved me wrong.
| 668   | unsafe fn - looks good.
| 676   | unsafe fn - looks good.
| 689   | unsafe fn - looks good.
| 701   | unsafe fn - looks good.
| 713   | unsafe fn - looks good.
| 724   | unsafe fn - looks good.
| 734   | unsafe fn - looks good.
| 746   | unsafe fn - looks good.
| 756   | unsafe fn - looks good.
| 764   | unsafe { ... } - looks sound.
| 768   | unsafe fn - disappointing lack of debug_assert!.
| 777   | unsafe { ... } - looks sound.
| 781   | unsafe fn - disappointing lack of debug_assert!.
| 793   | unsafe fn - looks good.
| 800   | unsafe { ... } - looks sound.
| 804   | unsafe fn - disappointing lack of debug_assert!.
| 818   | unsafe fn - looks good.
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/eFwH9XaRTyfsnfSMoydIpczIp5D4WkBr0D35xTuOIA4",
]

[[audits.ase]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "neutral",
    "level-medium",
    "trust-medium",
    "safe-to-run",
]
delta = "0.1.1 -> 0.1.3"
notes = """
Not suitable for UGC - memory exhaustion and panic concerns.
https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/ase.md#0.1.3
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/0GpRIKfsUo3iAe8rdxaPksvwJ_pqCNIVe0h5ETF1rcY",
]

[[audits.ase]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "neutral",
    "level-medium",
    "trust-medium",
    "safe-to-run",
]
delta = "0.1.0 -> 0.1.1"
notes = """
Not suitable for UGC - memory exhaustion and panic concerns.
https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/ase.md#0.1.1
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/isenZL4K-uwqddRRCggRQ7HIUKMvEihX84ZAhIGrAtg",
]

[[audits.ase]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "neutral",
    "level-medium",
    "trust-medium",
    "safe-to-run",
]
version = "0.1.0"
notes = """
Not suitable for UGC - memory exhaustion and panic concerns.
https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/ase.md#0.1.0
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/YVwxoBB1SrS68IAD19KoRenVJHhbTlFLZiFpZAbUxfc",
]

[[audits.aseprite]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.3"
notes = '''
\[[Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/aseprite.md)\]
Parses JSON [aseprite](https://www.aseprite.org/) exports

Pros:
* Looks fairly exhaustive, self contained
* No direct disk I/O

Cons:
* Exahustively matchable structs make most version bumps technically breaking changes
* Requires non-default export options (fixed in an unmerged PR)
* Enum deserialization is brittle when it comes to new options
* Limited maintainence'''
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/KJBZM8I3r70ofaN_b2JhagpEaYNd84EbeZ88Cv9Ej04",
]

[[audits.assert-json-diff]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "1.0.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/XqC1LMz-3T32KO3_A47cJ7NDdmxMie1WR9zvJpBmWCw",
]

[[audits.assert_cmd]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "1.0.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/TsQngBM2IsnFXGkOAWXz33gPU9HJqSNPy4Kp5UuMuKI",
]

[[audits.async_fn_traits]]
who = "\"kpreid\" (https://github.com/kpreid)"
criteria = [
    "strong",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.1"
notes = """
Extremely simple crate providing useful trait aliases. The code consists
solely of macro-generated `trait`s and `impl`s; other than the `macro_rules`
macro itself, all of the crate’s definition is visible in its documentation.
If there were a bug, the worst consequence would likely be dependents failing
to compile, since none of the code is statements or expressions to execute
at run time."""
aggregated-from = [
    "https://github.com/kpreid/crev-proofs#RFs94ITILUKf6EoC8j-_qwMi4t5zhZ7t3bQ7KHmB5QI",
    "crev:review/8xyQZMO-r-Sb_4VqNRglhIRaKRq4i2VSU4MlEKJaLrI",
]

[[audits.atomic-polyfill]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.1.5"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/KK23L7BXKX9L5d0FaOwhAXSCV5nkK2yGOxaX5Kr3Vf4",
]

[[audits.atomic_enum]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/hk940Hy-T16gjwsaLoNl-n1suwX6C2okAZQG9ilHjpo",
]

[[audits.atomic_refcell]]
who = "\"vorner\" (https://github.com/vorner)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
delta = "0.1.4 -> 0.1.5"
notes = """
It mostly looks to do what it says and seems well written. The previous issue resolved.
"""
aggregated-from = [
    "https://github.com/vorner/crev-proofs#WJlSxaMnJ7GLdgFZKR_JrivA9KmmEZO806KlZZHHkyg",
    "crev:review/-zq0kUKT7MWdFqRkIGCa3HTWQMlWCxChRDBRR5PS3uc",
]

[[audits.atomic_refcell]]
who = "\"vorner\" (https://github.com/vorner)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.4"
notes = """
It mostly looks to do what it says and seems well written.

There's one concern about possible UB, though one that's unlikely to have any
practical effect.
"""
aggregated-from = [
    "https://github.com/vorner/crev-proofs#WJlSxaMnJ7GLdgFZKR_JrivA9KmmEZO806KlZZHHkyg",
    "crev:review/wmVmIWQwBPs6MoHkksgyeDPiCeGp6ayuVEeSDbcb9-w",
]

[[audits.attohttpc]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
delta = "0.10.0 -> 0.11.1"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/E_IcPZqoygeRgztM40nv0YhfMUstt27W-oaZLaUkphE",
]

[[audits.attohttpc]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.10.0"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/nhKZ0eMoAaRRTgJjoLOSZESSJF4xECdUAmdA38hsF24",
]

[[audits.atty]]
who = "\"matthiasbeyer\" (https://github.com/matthiasbeyer)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.2.14"
notes = "Simple codebase, looks good. Did not look at the cfg(windows) code."
aggregated-from = [
    "https://github.com/matthiasbeyer/crev-proofs#HT24oErbY-0x-yt9mGMZEk5S07lzpFQ4kayzEkVxJWU",
    "crev:review/oUvp6kR0HLnpj2TDawBmr11Ka5l97y6ndp4DxRRS1_U",
]

[[audits.atty]]
who = "\"vlad20012\" (https://github.com/vlad20012)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
delta = "0.2.13 -> 0.2.14"
notes = """
This version only adds support for `target_os = \"hermit\"` via `hermit_abi` crate.
The rest of the code in the crate has not been changed."""
aggregated-from = [
    "https://github.com/vlad20012/crev-proofs#AZ7vUkGvANHlXnQtbHBZ7KCDqIbtE7HdSOPNz51MedM",
    "crev:review/cwclRxNoyeUS5c3AUo8D6-FdMTmT-l11OKi0b0Ijbu8",
]

[[audits.atty]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.2.13"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/jSAuY6FyujKFWl4P95WOs3QRXpjyOs2VHI-9MbcWoIY",
]

[[audits.atty]]
who = "\"icefox\" (https://git.sr.ht/~icefox)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.2.11"
notes = "Small platform-functionality wrapper, nothing exciting."
aggregated-from = [
    "https://git.sr.ht/~icefox/crev-proofs#lr2ldir9XdBsKQkW3YGpRIO2pxhtSucdzf3M5ivfv4A",
    "crev:review/0R7AXN2UIbZwPtdQR5zcFATEHTZm3fYaMO4X5eYFLHw",
]

[[audits.auditable]]
who = "\"niklasf\" (https://github.com/niklasf)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.0"
notes = """
cargo audit is very useful. This create allows running audits on production
binaries as well.

Works exactly as expected, declaring a static with the data generated by
the corresponding build script."""
aggregated-from = [
    "https://github.com/niklasf/crev-proofs#a0hN0qYwwDTmHtAchnTXiF-I_L9rK1KL5kgCmQoYR9o",
    "crev:review/kzWIjgiHDA5g3vB9wn0zclAddIgChUYpmVREJMDNZuc",
]

[[audits.auditable-build]]
who = "\"niklasf\" (https://github.com/niklasf)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.1.0"
aggregated-from = [
    "https://github.com/niklasf/crev-proofs#a0hN0qYwwDTmHtAchnTXiF-I_L9rK1KL5kgCmQoYR9o",
    "crev:review/RU8InVMTue74-C4y3aKOsFZ-GcY41EZofkWPje9GXFY",
]

[[audits.auditable-serde]]
who = "\"niklasf\" (https://github.com/niklasf)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.1.0"
aggregated-from = [
    "https://github.com/niklasf/crev-proofs#a0hN0qYwwDTmHtAchnTXiF-I_L9rK1KL5kgCmQoYR9o",
    "crev:review/p8zsqtROukANO-u0g3hhT00mkJ-e0mboIZX3tSN_ads",
]

[[audits.autocfg]]
who = "\"buffet\" (https://github.com/buffet)"
criteria = [
    "positive",
    "level-medium",
    "trust-low",
]
version = "1.1.0"
notes = "`mangle` does mangle quite aggressively."
aggregated-from = [
    "https://github.com/buffet/crev-proofs#liorp96qpcrH18meMUI0jFcsq9N3LgKvVm9yaKrwBOg",
    "crev:review/I_iy0m3T7SzSg2DP6WBPVl0KHNkWsF4gPeLmo8GIfxU",
]

[[audits.autocfg]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "1.0.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/v2ninLECIRhVC1t37lohTmSUSn8ahvgpn3zZ8blMKCA",
]

[[audits.autocfg]]
who = "\"niklasf\" (https://github.com/niklasf)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.0"
notes = """
autocfg is a small and simple crate to be used in build scripts.

Code snippets are passed to rustc to detect if the available version supports
the desired features and can compile them. For completeness, it should be
mentioned that it would be a bad idea to use this with user inputs at
runtime. It is hard to do so accidantely."""
aggregated-from = [
    "https://github.com/niklasf/crev-proofs#a0hN0qYwwDTmHtAchnTXiF-I_L9rK1KL5kgCmQoYR9o",
    "crev:review/e3aiiNCZMkbTmxSNiUIuX0HOrvNFCdKTpycWo0jubEk",
]

[[audits.avif-parse]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.13.2"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/BtZyky3ckr9DFSS1Zq8rbx8HuSoqd5xOC928YSEV1JQ",
]

[[audits.bare-metal]]
who = "\"chrysn\" (https://gitlab.com/chrysn)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.0"
notes = "The mechanism's safety implications are well understood by the authors as evidenced by issue tracker discussions."
aggregated-from = [
    "https://gitlab.com/chrysn/crev-proofs#bYdCa4xhd5VL4dlcVPBxV51PrW5joFp9U04rKgcTvk8",
    "crev:review/M-6EoFEfHVqSamN5fcNegtjBjC-NFMcFyF2dH8u3W2c",
]

[[audits.base64]]
who = "\"kpreid\" (https://github.com/kpreid)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.21.2"
notes = """
Contains no unsafe code. Contains no IO. Straightforward and well organized
code, though the number of different cases and scenarios it handles makes
it daunting to thoroughly comprehend. Well commented. Extensive tests.

I have not reviewed the correctness of the algorithms or their resistance
to DoS attacks (i.e. whether they can enter infinite loops or over-allocate).
I have examined each line to check that it is not obviously malicious or
obfuscated."""
aggregated-from = [
    "https://github.com/kpreid/crev-proofs#RFs94ITILUKf6EoC8j-_qwMi4t5zhZ7t3bQ7KHmB5QI",
    "crev:review/y7ITBYkl5-TNbXkJgM2pyfTtY-Hgmc4u_lHlL0CB3ME",
]

[[audits.bech32]]
who = "\"tcharding\" (https://github.com/tcharding)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.9.1"
notes = "Performs as advertised, on obvious flaws IMO"
aggregated-from = [
    "https://github.com/tcharding/crev-proofs#Df2R3MuKZTrPtFwmRvCfArOTY2E3IlKBJEEXqk_YMvY",
    "crev:review/Xbj2kNL7mU6yTVlw_XrdcC8Uad5LwBJqT32cTSv0pGA",
]

[[audits.bimap]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.6.2"
notes = "It's just wrapping both sides in `Rc`"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/CvYz7uh8J525eoIFkPvRwkBRikZXBTbp-9OykuqhkfA",
]

[[audits.binary-ff1]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.2.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/s44RTZofs7A0wu4Dyz0FVe1IhUKbtpw79Som4qi1jAQ",
]

[[audits.bincode]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "1.1.4"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/mjCIfAvzUykIDLHAScW09HQthI2Y_t4F3M8ouAguayE",
]

[[audits.bip39]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.6.0-beta.1"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/sSWPMHhhG4lG0hm-HuZfYvn2oY2v2w-_ToO9tRfINzQ",
]

[[audits.bitcoin]]
who = "\"tcharding\" (https://github.com/tcharding)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.29.2"
notes = "I've been working as a maintainer of this crate for the last year, to the best of my knowledge it has no security flaws"
aggregated-from = [
    "https://github.com/tcharding/crev-proofs#Df2R3MuKZTrPtFwmRvCfArOTY2E3IlKBJEEXqk_YMvY",
    "crev:review/-d8OWktXjiu5W_gZl_i1ZNeIUyXAzlN_Bx2LKXY65LE",
]

[[audits.bitcoin]]
who = "\"apoelstra\" (https://github.com/apoelstra)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.29.2"
notes = """
This is my crate. This version, 0.29.2, brings us to Rust 2018. This library
is still unstable and going to have dramatic API changes over the next several
versions, but to the best of my knowledge it has no security issues."""
aggregated-from = [
    "https://github.com/apoelstra/crev-proofs#AOdw0m1s0DwuXFi3B2Juka2Wnx1LjJPD5qo3IfYTtlA",
    "crev:review/1eASZkVPbkpOryA1UaL1YwbWGzfQdFKlHIFvDhc8WsM",
]

[[audits.bitcoin]]
who = "\"tcharding\" (https://github.com/tcharding)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.28.1"
notes = """
I have been working six months now on crates in the github.com/rust-bitcoin organisation, to the
best of my knowledge this crate is secure. """
aggregated-from = [
    "https://github.com/tcharding/crev-proofs#Df2R3MuKZTrPtFwmRvCfArOTY2E3IlKBJEEXqk_YMvY",
    "crev:review/OB_b9ET4nu9SnYA0P2NYePc0RhHb8wN7e5bR5GnI-_U",
]

[[audits.bitcoin_hashes]]
who = "\"tcharding\" (https://github.com/tcharding)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.11.0"
notes = """
I have been working six months now on crates in the github.com/rust-bitcoin organisation, to the
best of my knowledge this crate is secure. """
aggregated-from = [
    "https://github.com/tcharding/crev-proofs#Df2R3MuKZTrPtFwmRvCfArOTY2E3IlKBJEEXqk_YMvY",
    "crev:review/PicwqpAF-nGwxIrrN8etPq8OObnGdDz5ekHwyGGVvG0",
]

[[audits.bitcoinconsensus]]
who = "\"tcharding\" (https://github.com/tcharding)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.20.2-0.5.0"
notes = "This crate is a very thin layer on top of code from Bitcoin Core."
aggregated-from = [
    "https://github.com/tcharding/crev-proofs#Df2R3MuKZTrPtFwmRvCfArOTY2E3IlKBJEEXqk_YMvY",
    "crev:review/_EnjUYZDlyb60iEBCzS78ZWdmnRs1vb86MfAUIJihZQ",
]

[[audits.bitcoinconsensus]]
who = "\"tcharding\" (https://github.com/tcharding)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.19.0-3"
notes = "I am the current maintainer (but not the original author), this crate is sound to the best of my knowledge"
aggregated-from = [
    "https://github.com/tcharding/crev-proofs#Df2R3MuKZTrPtFwmRvCfArOTY2E3IlKBJEEXqk_YMvY",
    "crev:review/AuFTnVLYmqA6zjpQ8aD4_9V9_gcx674irZbwQWPJkyY",
]

[[audits.bitflags]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
delta = "1.3.1 -> 1.3.2"
notes = """
There's only one meaningful change since 1.3.1: non-snake-case names are
allowed in generated structs. My previous review stands."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/g9NSGr-s5FZFxnyPR7BoS83xIFIm_RsHc-drnMINHXQ",
]

[[audits.bitflags]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.3.1"
notes = """
`bitflags` is a set of macros. They all look clean and correct. I flipped
through the tests too, and although I didn't pay as much attention, they too
look good — there are certainly more of them than of macros themselves, so
I'm quite confident about them. The docs are good too."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/biYoo0Jm0wGxwLv6TpJrwcT_I7zlUqOW1uaKZLPqwHU",
]

[[audits.bitflags]]
who = "\"Mark-Simulacrum\" (https://github.com/Mark-Simulacrum)"
criteria = [
    "strong",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.1.0"
aggregated-from = [
    "https://github.com/Mark-Simulacrum/crev-proofs#aD4K0g6AcSKUDp3VPF7u4hM94zEkqjWeRQwmabLBcV0",
    "crev:review/DPi0B4RaHucEdLM8y5ESVKnemJLxzW8O7j9R1f_3Ws8",
]

[[audits.bitreader]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.3.2"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/TwIX6hR1xJ47vL2RHOjOa4SKW35N82QzBZ_OJvl3XeM",
]

[[audits.bitstream-io]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.8.5"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/6itvbuaWcomocdQ6svWE75nqqE7z-W4GaeDf2LeUtLY",
]

[[audits.block-buffer]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.7.3"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/LhczdlRGVNgD_j1tBkX0rPw7-E1z52lhUC_zMKGgd2U",
]

[[audits.block-padding]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.1.5"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/a4NZkituacWgVgj7FPHf5u9iZaEZEsUjXiqHBmkjDgY",
]

[[audits.blockhash]]
who = "\"chrysn\" (https://gitlab.com/chrysn)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.2.0"
notes = """
The implementation calculates the blockhash over an image as advertised, and
passed a comparison test with the Python implementation at
<https://github.com/commonsmachinery/blockhash-python>.

The blockhash function itself is pretty basic; its website at
<http://blockhash.io/> its goals compared to more complex alternatives like
pHash or imgSeek."""
aggregated-from = [
    "https://gitlab.com/chrysn/crev-proofs#bYdCa4xhd5VL4dlcVPBxV51PrW5joFp9U04rKgcTvk8",
    "crev:review/D2sdndsaC-DrNSa-kvxSxhQlP5-ch7g_2sgK39dFp5s",
]

[[audits.bloomfilter]]
who = "\"LovecraftianHorror\" (https://github.com/LovecraftianHorror)"
criteria = [
    "positive",
    "level-medium",
    "trust-low",
]
version = "1.0.9"
notes = """
A simple and straightforward bloomfilter implementation

There could be better documentation (many places can panic without documenting
as such), better tests, more focus on avoiding overflows, and being less panic
happy on errors, but aside from that everything seems good

There do seem to be issues with The ability to overflow the bitmap bit size in
`Bloom::new_with_seed`, possible issues with a lot of casting between `u64`
and `usize`, and finally issues with the possibility to serialize and
deserialize the bloomfilter on computers that have different `usize` sizes.
The worst that I think could happen would be changing which values are
considered to be in the filter, but considering the common use would use a
random seed for the hash which should make that pretty hard to exploit"""
aggregated-from = [
    "https://github.com/LovecraftianHorror/crev-proofs#PTlVqKJclK7ELjugGnh_nDgpaWLAAGRIg5UH391WKnQ",
    "crev:review/Io883NwZPjJseZpQ4hAuOzrfj8hT_4SX5s6jGEfm9rI",
]

[[audits.bsdiff]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.5"
notes = "Now 100% safe code"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/StJlbnkv-ujGOK8XXngrmUoNK14aCbeKECIMUIP1ltc",
]

[[audits.btoi]]
who = "\"niklasf\" (https://github.com/niklasf)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.4.2"
notes = """
Parses integers directly from ASCII byte slices.

As the author of this crate, I tried to apply relevant best practices.
I have high confidence in its correctness.

* Rust API guidelines checklist complete, except C-STABLE, due to the
  num-traits dependency.
* No unsafe code.
* Using quickcheck for fuzz testing (no panics, equivalent to
  `str::from_utf8()` followed by `{integer}::from_str_radix()` from the
  standard library)."""
aggregated-from = [
    "https://github.com/niklasf/crev-proofs#a0hN0qYwwDTmHtAchnTXiF-I_L9rK1KL5kgCmQoYR9o",
    "crev:review/Uri2MtII1mzP5l-rqSgBJnbFAu4mI2qJP68ELS9bGgQ",
]

[[audits.buffered_offset_reader]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.6.0"
notes = """
Offset read/write with `&self`

Pros:
* No runtime dependencies
* `read_at(&self, ...)`

Cons:
* `BufOffsetReader` is a bit kludgy - `u64 as usize` casts should probably `Err` instead
* Implementing traits directly on `File` makes for inconsistent seek behavior when used by reference

[Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/buffered_offset_reader.md)"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/CncwUhhWCyXy2zvJVK1b3PuiC3Nzx-qDrccYN8HlCXo",
]

[[audits.bugsalot]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.4"
notes = "I wrote it, minimal 'unsafe' for FFI, well tested."
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/G4g7HjxD_O24CYcVQGbk-B8hLLV_jlNcwAiXHt-4GmY",
]

[[audits.build_const]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.2.1"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/Rut54GZ-qhntFumieYE_Y9WFYijj1JnL6g8JHCnpTno",
]

[[audits.byte-tools]]
who = "\"kpcyrd\" (https://github.com/kpcyrd)"
criteria = [
    "strong",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.3.1"
aggregated-from = [
    "https://github.com/kpcyrd/crev-proofs#ZGgmIacywCRKLa33k7W04VFcK-glDkcBXKG4oF7t--4",
    "crev:review/hf4rQh8_6ZeK6VkVp7M12RjydU5Zfr-156ikXQCLW-I",
]

[[audits.byte-tools]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "strong",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.3.0"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/GexAX944LZIJ634zb28PO21-5coag_65wpj9WdbFd2g",
]

[[audits.bytecount]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.6.2"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/Ntu2WpP2UAsx1Agqmb93-8KYPRWBy9bdADGl875QP3s",
]

[[audits.bytemuck]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "1.2.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/6gg0hViXHVatdAfyomzKHskvgoZofKj1R_zakqACcUY",
]

[[audits.bytemuck]]
who = "\"HeroicKatora\" (https://github.com/HeroicKatora)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.2.0"
notes = """
The crate gained quite a bit of interface since last time. I'm not quite sure
how I feel about this at the moment but understanding definitely suffered
from it.

Of most concern is definitely `TransparentWrapper` which relies on the
internal implementation detail that the layout of a pointer type itself does
not change for transparent wrappers. This premise seems a very unlikely to be
invalidated from changes but nevertheless departs with only relying on
stabilized and fully RFCed properties.

Other than that, no critical changes and a continued trend of being cautious.
Notably the implementation of Contiguous guards against bad implementations
despite being unsafe to implement, the `offset_of` macro is completely
safe(!)—a welcome change for such macros—and there are MIRI tests in CI.

The test suite could be a lot bigger but some tests are obviously foiled by
MIRI rejecting some sound and UB-free code that relies on alignment checks,
to avoid those incidentally succeeding in unsound code."""
aggregated-from = [
    "https://github.com/HeroicKatora/crev-proofs#-sApEowWcAS9J0R7aO18cghvhLBpuMhyeUuWQq_fits",
    "crev:review/wpJyTKyfIjPAJeKJiRWI125xQ_xdNvl77OVmErrobFM",
]

[[audits.bytemuck]]
who = "\"HeroicKatora\" (https://github.com/HeroicKatora)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.1.0"
notes = '''
The implementation is rather conservative on many fronts and requires very
strong, sometimes even unnecessary, preconditions for all operations. But
this makes reasoning easier since you work with a consistent set of
assumptions. This is in contrast to `zerocopy` which has at three differing
sets.

The biggest leap of unsafety is the assumption that slices strides and arrays
agree with the size of their elements. This is not quite likely to change,
ever, but it should be noted nevertheless. The exact wording of `Pod` also
allows us to smuggle a type through its requirements. It takes some care to
try and only allow types that might violate the assumption by requiring a
defined `repr` but in its wording forgets that `repr(packed)` can be applied
to `repr(rust)`. Thus, the following type conforms to the wording but not the
spirit behind it.

```
\#[repr(packed)] struct BadSize(u16, u8)
```

The easiest fix would be to explicitly list the requirement that the size is
divisible by the alignment. This defines the stride to agree with the size.
'''
aggregated-from = [
    "https://github.com/HeroicKatora/crev-proofs#-sApEowWcAS9J0R7aO18cghvhLBpuMhyeUuWQq_fits",
    "crev:review/klZ34PIedZ1s9agmfJCWGLNWf7CuEoOwcVLxJzEyYGs",
]

[[audits.bytemuck]]
who = "\"Lokathor\" (https://github.com/Lokathor)"
criteria = [
    "strong",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.1.0"
notes = "This is my crate. It's been in careful development for several months now, and it keeps everything as minimal and simple as possible to avoid any possible unsoundness."
aggregated-from = [
    "https://github.com/Lokathor/crev-proofs#ZCBwWlOeJyU79adJqX9-irGH5wrmuYxUPXeSrFKuayg",
    "crev:review/xKPAFQWabFRkDSgFIP9GOhN5_OrLIVhiBxu7PI0rohA",
]

[[audits.byteorder]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "negative",
    "level-low",
    "trust-medium",
]
version = "1.3.4"
notes = """
See [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/byteorder.md)

<h2>Pros</h2>

* MSRV policy!
* Basic swizzling/endian stuff
* You didn't have to write it

<h2>Cons</h2>

* Excessive and distributed `unsafe` in serialization related code is hard to audit and makes me nervous
* History of unsoundness.  Most crate versions have alignment related bugs, and 0.2.x had overflow issues which regressed in 0.3.x.
* Very limited functionality"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/eaz24RJPIaLzbxdLShSQfv0fDoMSPIIn4_LEXqaA6Xc",
]

[[audits.byteorder]]
who = "\"chrysn\" (https://gitlab.com/chrysn)"
criteria = [
    "strong",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
delta = "1.3.2 -> 1.3.4"
notes = "There was little delta to the 1.3.2 version, but that was checked thoroughly."
aggregated-from = [
    "https://gitlab.com/chrysn/crev-proofs#bYdCa4xhd5VL4dlcVPBxV51PrW5joFp9U04rKgcTvk8",
    "crev:review/cSM0BXCLfgsJfEDq9ODYLrXUaJtPVaM9QGTALTp3uHk",
]

[[audits.byteorder]]
who = "\"niklasf\" (https://github.com/niklasf)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.3.4"
notes = """
Provides methods for encoding and decoding numbers in big-endian and
little-endian order.

This is a widely used, very well tested, high quality crate.

There are two kinds of unsafe blocks:

(1) Integer/IEEE754 floating point casting. After bumping MSRV to 1.20.0
some of these can be avoided by using {f32,f64}::from_bits() from the
standard library.

(2) Slice casting (via pointers). It seems to assume that for example u32,
i32 and f32 have compatible alignment, which is probably valid. Maybe this
should be noted in a comment."""
aggregated-from = [
    "https://github.com/niklasf/crev-proofs#a0hN0qYwwDTmHtAchnTXiF-I_L9rK1KL5kgCmQoYR9o",
    "crev:review/Jtfm6rmO51TDcEy0SiQB7aJorLBRsXGRGqs8jw-iFBo",
]

[[audits.byteorder]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "strong",
    "level-low",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
delta = "1.3.1 -> 1.3.2"
notes = """
Good test coverage, good documentation. LGTM
"""
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/SNzIlB7e4shnSUiZPtQv2SNekMeILHV6zsE6iH_VcX8",
]

[[audits.byteorder]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "strong",
    "level-low",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
delta = "1.2.7 -> 1.3.1"
notes = "Good test coverage, good documentation. LGTM"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/VmzXR7LE4RjB0pn3c83Ecj7yRQ6dLKEyDe8s2PSn0mM",
]

[[audits.byteorder]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "strong",
    "level-low",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.2.7"
notes = "Good test coverage, good documentation. LGTM"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/SgZwTb42p_8z7-74iA9VAod4Vn__pbNFBzC8DaJXzHw",
]

[[audits.byteorder]]
who = "\"tcharding\" (https://github.com/tcharding)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.5.3"
notes = "I spent about half an hour looking over this small crate, LGTM."
aggregated-from = [
    "https://github.com/tcharding/crev-proofs#Df2R3MuKZTrPtFwmRvCfArOTY2E3IlKBJEEXqk_YMvY",
    "crev:review/pPJ8dtrJoeYki0UztnAlW44Xc9cQ6cP0cLorPG48-gE",
]

[[audits.bytes]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.4.12"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/o5Rd7woeld8s0CA3HfXC0qxiwiK9GLf1p3k_YPew7ls",
]

[[audits.bytesize]]
who = "\"matklad\" (https://github.com/matklad)"
criteria = [
    "strong",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.1"
notes = "Nice a simple crate, the code is really solid"
aggregated-from = [
    "https://github.com/matklad/crev-proofs#Cb9lZWK4YhYNt5eFtWWwvm3p1S5HamjXqgWBebGdhm4",
    "crev:review/zBg4TSlPBSWJ6xdGZ8hBQArmWawCYg_Y2IUlfdE1Vks",
]

[[audits.c2-chacha]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.2.2"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/PLoS0k8ss73v2mZvbzrbZFOwKAoNVzAi52SQOoAxJCs",
]

[[audits.c3]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "negative",
    "level-high",
    "trust-high",
    "unmaintained",
]
version = "0.11.0"
notes = "Dead"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/815sc2ypG2mCTtluhItLLvkwk271tnQF3pmfsK2N2Pw",
]

[[audits.c3_clang_extensions]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "negative",
    "level-high",
    "trust-high",
    "unmaintained",
]
version = "0.3.7"
notes = "Dead"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/TwY9oC8AvJ28mlfgv-TtWAqyPc681RbosOgDDDmUEfY",
]

[[audits.c99]]
who = "\"programmerjake\" (https://github.com/programmerjake)"
criteria = [
    "positive",
    "level-medium",
    "trust-low",
]
version = "0.1.1"
notes = "dependency of softfloat-sys"
aggregated-from = [
    "https://github.com/programmerjake/crev-proofs#dUc4luSnPuYlfYarXUizPOSBLUBZguTVOQUCHmAKSps",
    "crev:review/7L5-R_T1vKYrCB3Br3kjXJCNe9NwVQnUZN3Ik1cuVc4",
]

[[audits.cache-padded]]
who = "\"leo60228\" (https://github.com/leo60228)"
criteria = [
    "neutral",
    "level-medium",
    "trust-low",
]
version = "1.1.1"
notes = "Code is trivial, but I feel like assuming 64-byte cache lines on non-ARM64/x64 might be overly optimistic."
aggregated-from = [
    "https://github.com/leo60228/crev-proofs#2LuQSTppPubecRKRky5i_owgDcpbZhuFE3iXyLky5w4",
    "crev:review/-Q9dh6wcIUc4k0hgS5ulj4PoxGwwfm_984q5OFh7cnU",
]

[[audits.cap]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.1.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/5jbmtvRERL6pjM0A_PPIUAuV8vhF7YWEYvimsthBRJQ",
]

[[audits.cargo-about]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.4.4"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/Qeu_VNg60v7UsQJoI4P4PyQDQK0NyOlNMi6wlT0-5jA",
]

[[audits.cargo-apk]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "negative",
    "level-low",
    "trust-medium",
]
version = "0.4.0"
notes = '''
A mixed bag.
On the one hand, the core tool found in `src` seems fine, solid fundamentals.
On the other hand, the glue code is full chock full of unsafe, some of it unsound.
Worse, the FFI includes things that varies from android SDK to SDK from the loops of things.



injected-glue\ffi.rs:   -1
  Should be replaced with bindgen generated header?  Also, changes between SDKs, so really really really should not be simply hardcoded...!
  Ref: https://android.googlesource.com/platform/development/+/4948c163663ecc343c97e4c2a2139234f1d3273f/ndk/sources/android/native_app_glue/android_native_app_glue.h
  Ref: https://chromium.googlesource.com/android_tools/+/7fc902d157a9aed7a2b68adc9c69181b3a43cd58/ndk/sources/android/native_app_glue/android_native_app_glue.h
  45  LOOPER_ID_INPUT:    Wrong? (should be 2?: https://chromium.googlesource.com/android_tools/+/7fc902d157a9aed7a2b68adc9c69181b3a43cd58/ndk/sources/android/native_app_glue/android_native_app_glue.h#204)
      LOOPER_ID_EVENT?    Different name? https://android.googlesource.com/platform/development/+/4948c163663ecc343c97e4c2a2139234f1d3273f/ndk/sources/android/native_app_glue/android_native_app_glue.h
  46  LOOPER_ID_USER:     Wrong? (should be 3?: https://chromium.googlesource.com/android_tools/+/7fc902d157a9aed7a2b68adc9c69181b3a43cd58/ndk/sources/android/native_app_glue/android_native_app_glue.h#209)
  65+ Skimmed only

injected-glue\lib.rs:   -1
  92  static mut ANDROID_APP  should be UnsafeCell
  164 static mut G_MAINTHREAD_BOXED should be UnsafeCell, probable undefined behavior / race conditions
  172 scary transmutes
  182 Unsound when combined with
  191 'safe' access
  196 android_main2 is UNSOUND - dereferencing pointers, setting globals, etc. without being marked unsafe.
  197+ Skimmed only
  340: giant unsafe block
  347: uninitialized



src\ops\build.rs:       +1
   75 Medium:  I suspect this won't work on windows as it doesn't use .cmd scripts for the compiler/linker?
  131 Medium:  injected_glue_lib cmd.exec()?; followed by cmd.exec_with_output()?; (134)- does the glue get double compiled for no good reason?
  218 Medium:  unreachable! abused where panic! probably should be?
  423 Minor:   Hardcodes a lot of assumptions.  Good foundation though.

src\ops\install.rs:     +1
  Medium:  No way to specify device
src\ops\mod.rs:         +1
src\ops\run.rs:         +1
  Medium:  No way to specify device

src\config.rs:          +1
  Minor:  Could use more OsString
  Minor:  Non-optional opengles_version_*
src\main.rs:            +1

Cargo.toml:             +1
Cargo.toml.orig:        +1
glue_obj.rs:            Sketchy looking casts and `main` handling... but might be right
linker.rs:              Strange parse_arguments loop style... but safe, looks sane.
'''
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/3tllkVvH9TEmxgiAJJRJ2DvfDJPf9VOLKh1OeSYhLTI",
]

[[audits.cargo-bump]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
    "unmaintained",
]
version = "1.1.0"
notes = "Slow due to use of cargo-metadata, and doesn't work with workspaces for no good reason"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/Kf74eIQK2_GKzBdpVG3qPyNvEdj8zBpiFCLh4ll1Ajc",
]

[[audits.cargo-chef]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.1.4"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/Zl7sLoYtb_rQuu6HFWOIFX-4IwjhNt-2YpTH7Fd3dig",
]

[[audits.cargo-deb]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.24.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/dZWPdCT1WmeUyxhMTr4gidcKS6QuYn35qvEqY4ia3Y8",
]

[[audits.cargo-deny]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.9.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/gglaPgXpOihMp26ReBCfFXn2ljUmDvBPp-cl7K81ZMM",
]

[[audits.cargo-dinghy]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.4.15 -> 0.4.16"
notes = '''
0.4.16: Trivial version bumps.
0.4.15: Trivial version bumps.
0.4.14: Trivial version bumps, mass reformatting.
0.4.13: Trivial version bumps.
0.4.12: Trivial version bumps.
0.4.11: Nice and solid looking code.  100% safe code.

Reviewed:
    src\cli.rs:         +1
    src\main.rs:        +1
        151 run_lldb
            Nonterminating loops are problematic, but I think the side effects here should make this work OK?
            (see https://github.com/rust-lang/rust/issues/28728 )
    Cargo.toml:         +1
    Cargo.toml.orig:    +1
        13  readme path references unpackaged readme

TIL:
    Using traits to extend clap::App so flags can be reused per-subcommand is interesting.
'''
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/G7Oix4NDJuj7b0Ttfn7SqnLW815SlpXz-ZiLKlli8dI",
]

[[audits.cargo-dinghy]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.4.14 -> 0.4.15"
notes = '''
0.4.15: Trivial version bumps.
0.4.14: Trivial version bumps, mass reformatting.
0.4.13: Trivial version bumps.
0.4.12: Trivial version bumps.
0.4.11: Nice and solid looking code.  100% safe code.

Reviewed:
    src\cli.rs:         +1
    src\main.rs:        +1
        151 run_lldb
            Nonterminating loops are problematic, but I think the side effects here should make this work OK?
            (see https://github.com/rust-lang/rust/issues/28728 )
    Cargo.toml:         +1
    Cargo.toml.orig:    +1
        13  readme path references unpackaged readme

TIL:
    Using traits to extend clap::App so flags can be reused per-subcommand is interesting.
'''
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/UgRH6yxRu9qtoKfLoubHZ_t4v4yBEauymWPtEIAfP3Y",
]

[[audits.cargo-dinghy]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.4.13 -> 0.4.14"
notes = '''
0.4.14: Trivial version bumps, mass reformatting.
0.4.13: Trivial version bumps.
0.4.12: Trivial version bumps.
0.4.11: Nice and solid looking code.  100% safe code.

Reviewed:
    src\cli.rs:         +1
    src\main.rs:        +1
        151 run_lldb
            Nonterminating loops are problematic, but I think the side effects here should make this work OK?
            (see https://github.com/rust-lang/rust/issues/28728 )
    Cargo.toml:         +1
    Cargo.toml.orig:    +1
        13  readme path references unpackaged readme

TIL:
    Using traits to extend clap::App so flags can be reused per-subcommand is interesting.
'''
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/1qxgSMdVqrEHs6Pf9T7jdV8af2-YpsssyiAdtP4re_Q",
]

[[audits.cargo-dinghy]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.4.12 -> 0.4.13"
notes = '''
0.4.13: Trivial version bumps.
0.4.12: Trivial version bumps.
0.4.11: Nice and solid looking code.  100% safe code.

Reviewed:
    src\cli.rs:         +1
    src\main.rs:        +1
        151 run_lldb
            Nonterminating loops are problematic, but I think the side effects here should make this work OK?
            (see https://github.com/rust-lang/rust/issues/28728 )
    Cargo.toml:         +1
    Cargo.toml.orig:    +1
        13  readme path references unpackaged readme

TIL:
    Using traits to extend clap::App so flags can be reused per-subcommand is interesting.
'''
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/vBOkpNqTbhF6VS4-b-VcKzov_1h0KwgfDfG6ivkU6mM",
]

[[audits.cargo-dinghy]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.4.11 -> 0.4.12"
notes = '''
0.4.12: Trivial version bumps.
0.4.11: Nice and solid looking code.  100% safe code.

Reviewed:
    src\cli.rs:         +1
    src\main.rs:        +1
        151 run_lldb
            Nonterminating loops are problematic, but I think the side effects here should make this work OK?
            (see https://github.com/rust-lang/rust/issues/28728 )
    Cargo.toml:         +1
    Cargo.toml.orig:    +1
        13  readme path references unpackaged readme

TIL:
    Using traits to extend clap::App so flags can be reused per-subcommand is interesting.
'''
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/qPmFWUQGYCm7FWOV-BvexT0ejLyV9qxqrYC4gKlbZgk",
]

[[audits.cargo-dinghy]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.4.11"
notes = '''
Nice and solid looking code.  100% safe code.

Reviewed:
    src\cli.rs:         +1
    src\main.rs:        +1
        151 run_lldb
            Nonterminating loops are problematic, but I think the side effects here should make this work OK?
            (see https://github.com/rust-lang/rust/issues/28728 )
    Cargo.toml:         +1
    Cargo.toml.orig:    +1
        13  readme path references unpackaged readme

TIL:
    Using traits to extend clap::App so flags can be reused per-subcommand is interesting.
'''
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/22HYMvNJX7WBqXJ5-m441IkM8eYS61S9Hr2peqZBOqE",
]

[[audits.cargo-incversion]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "neutral",
    "level-low",
    "trust-high",
]
version = "0.1.2"
notes = "Very basic TOML parsing, like `sed s/^version/`"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/XF5RKhnoBBgCJq8LLcx5B-me1yEJSa0aF-2KAWBPmqk",
]

[[audits.cargo-ndk]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.3.0"
notes = """
Pretty trivial, not even sure if it'll work right on windows to be worth using.
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/jskHSgIuBxIpqTBqbrGFZo_yci_D8wQe65jyfrVd3j0",
]

[[audits.cargo-pgo]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.2.2"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/YDvbAahZ2E2AoruD65OBAH94a9sn5x6a7XNIepvPnic",
]

[[audits.cargo-swift]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.2.2"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/lNK0fMYXD0ghjrhaAkq3Qr0I1grjVYgElgiC5NmwXN0",
]

[[audits.cargo-typesize]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.1.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/TNYW8_yqrm7icNInV4x7EflI4LA4zUHErkdoce4zse0",
]

[[audits.cargo-upgrades]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.9.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/y8-Mm64VyB7qTU_lqagXsb58vP5faOCxkrTPtt7E6LE",
]

[[audits.cargo-v]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "neutral",
    "level-low",
    "trust-high",
]
version = "1.0.1"
notes = "Very basic TOML parsing, like `sed s/^version/`"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/AujMcGq6auTb89c3fABJawdZsjdj5Bl4qi7dN_iWJXg",
]

[[audits.cargo-xcode]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.1.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/ibjyosftUx6oThAhcpB74LaUGNOT8IrtV6tvXOne-Gw",
]

[[audits.cargo_author]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/CV82VWLLXb6jUmZHnTuUOMoAZzn80qoYMZZ7YaKsRII",
]

[[audits.cargo_metadata]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
delta = "0.9.0 -> 0.9.1"
notes = """
Parse `cargo metadata` and `cargo build --message-format=json` output.

Pros:
* Way better than parsing it yourself
* Safe code

Cons:
* If you're feeling particularly paranoid, `cargo metadata` could be passed bad
  feature names (see 0.8.2 review for details)

0.9.1
=====
| crev          |   |
| ------------- |---|
| thoroughness  | medium
| understanding | medium
| rating        | positive

| Diff                                          | Rating | Notes |
| --------------------------------------------- | ------ | ----- |
| .cargo_vcs_info.json                          | +1 | |
| Cargo.toml                                    | +1 | |
| Cargo.toml.orig                               | +1 | |
| src/dependency.rs                             | +1 | |
| src/lib.rs                                    | +1 | |
| src/messages.rs                               | +1 | |
| tests/test_samples.rs                         | +1 | |
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/gL_ZeXFs1y7VVBG4f09u203o7zstuZO_jSRzkK-6wD4",
]

[[audits.cargo_metadata]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
delta = "0.8.2 -> 0.9.0"
notes = """
Parse `cargo metadata` and `cargo build --message-format=json` output.

0.9.0
=====

| Diff                                          | Rating | Notes |
| --------------------------------------------- | ------ | ----- |
| .cargo_vcs_info.json                          | +1 | |
| Cargo.toml                                    | +1 | |
| Cargo.toml.orig                               | +1 | |
| src/errors.rs                                 | +1 | Added `Error::NoJson`
| src/lib.rs                                    | 0  | Various safe but breaking code changes
| src/messages.rs                               | +1 | |
| tests/selftest.rs                             | +1 | |
| tests/test_samples.rs                         | +1 | |

0.8.2
=====

| File                                          | Rating | Notes |
| --------------------------------------------- | ------ | ----- |
| src/dependency.rs                             | +1 | |
| src/diagnostic.rs                             | +1 | |
| src/errors.rs                                 | +1 | |
| [src/lib.rs](src/lib.rs)                      | 0 | MetadataCommand makes me slightly paranoid
| src/messages.rs                               | +1 | |
| tests/selftest.rs                             | +1 | |
| tests/test_samples.rs                         | +1 | |
| .cargo_vcs_info.json                          | +1 | |
| .cargo-ok                                     | +1 | |
| .gitignore                                    | +1 | |
| .travis.yml                                   | +1 | 1.32.0 MSRV
| Cargo.toml                                    | +1 | |
| Cargo.toml.orig                               | +1 | |
| LICENSE-MIT                                   | +1 | |
| README.md                                     | +1 | |

| Other     | Rating | Notes |
| --------- | ------ | ----- |
| unsafe    | +1    | None
| fs        | +1    | None
| io        | 0     | Can invoke `cargo metadata`.  Looks sane, but if passed malicious feature names etc...
| docs      | +1    | |
| tests     | +1    | |

src/lib.rs
----------
| Line  | What  | Notes |
| -----:| ----- | ----- |
| 495 | exec | shell access, and I'm paranoid about shell param escaping...
| 500 | exec | shell access, and I'm paranoid about shell param escaping...
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/VB8iROa1gMIEkrS_72azAK3whUNe8sBnbH65LlSDZtg",
]

[[audits.cargo_metadata]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.8.2"
notes = """
Parse `cargo metadata` and `cargo build --message-format=json` output.

0.8.2
=====

| File                                          | Rating | Notes |
| --------------------------------------------- | ------ | ----- |
| src/dependency.rs                             | +1 | |
| src/diagnostic.rs                             | +1 | |
| src/errors.rs                                 | +1 | |
| [src/lib.rs](src/lib.rs)                      | 0 | MetadataCommand makes me slightly paranoid
| src/messages.rs                               | +1 | |
| tests/selftest.rs                             | +1 | |
| tests/test_samples.rs                         | +1 | |
| .cargo_vcs_info.json                          | +1 | |
| .cargo-ok                                     | +1 | |
| .gitignore                                    | +1 | |
| .travis.yml                                   | +1 | 1.32.0 MSRV
| Cargo.toml                                    | +1 | |
| Cargo.toml.orig                               | +1 | |
| LICENSE-MIT                                   | +1 | |
| README.md                                     | +1 | |

| Other     | Rating | Notes |
| --------- | ------ | ----- |
| unsafe    | +1    | None
| fs        | +1    | None
| io        | 0     | Can invoke `cargo metadata`.  Looks sane, but if passed malicious feature names etc...
| docs      | +1    | |
| tests     | +1    | |

src/lib.rs
----------
| Line  | What  | Notes |
| -----:| ----- | ----- |
| 495 | exec | shell access, and I'm paranoid about shell param escaping...
| 500 | exec | shell access, and I'm paranoid about shell param escaping...
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/Np5owaOjY4gOUTeUqnZ5SU5vuL71DsJMXXIgsQGjwZo",
]

[[audits.cargo_toml]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.6.3"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/mQDHHHdR4ATbmST4RuJvfkFqFvjeVU1_AUeWShf5IOM",
]

[[audits.cc]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "1.0.28"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/NYR78zOCtKi1YMSsbzKpcJBjffJDTI8Krfqdpnp16Ss",
]

[[audits.cdchunking]]
who = "\"remram44\" (https://github.com/remram44)"
criteria = [
    "strong",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.0"
notes = """
I wrote this. No unsafe, no dependencies, no dangerous imports.

No real change from 0.2.1 (bumped 'rand' dev-dep, re-formatted code).
"""
aggregated-from = [
    "https://github.com/remram44/crev-proofs#V_B2pKpHVBIp_NegKfur4MK9GqFo0o78ijhku90pYS0",
    "crev:review/kO-0EM8GwEhutPcxsAe4rOxwVTX59yAoVc9m0ISTnM8",
]

[[audits.census]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.2.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/Vqp1bAeX1MtqYhF5pWmKp1RDYWZ90sdTFKHMIWvyzw0",
]

[[audits.cfg-expr]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.7.4"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/GPs1jFJOM-ClbAF8jBwyKiBo1mAfpu0GB6DrreIux_g",
]

[[audits.cfg-if]]
who = "\"chrysn\" (https://gitlab.com/chrysn)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.1.10"
notes = "Straightforward macro-only crate."
aggregated-from = [
    "https://gitlab.com/chrysn/crev-proofs#bYdCa4xhd5VL4dlcVPBxV51PrW5joFp9U04rKgcTvk8",
    "crev:review/CyP8mWQBYXTlWtI4RR4-g9QNR7Qn7HwQX2k6abpdezM",
]

[[audits.chrono]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.4.7"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/C1KkCmSxV4-hbDSow61cNBp67lwrxBzdB2-6YTUwfew",
]

[[audits.ci_info]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.9.2"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/QHaR2eXHGvOtCHuIFs7JcfSgWowOAhhIfSUcgFBor0g",
]

[[audits.citrus]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "neutral",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
    "unmaintained",
]
version = "0.8.0"
notes = "it's fine, but c2rust does it better"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/bfr8MtAaOZSyrYAXW1xf4Z3zvEuEzZRfpPk6ktslG8U",
]

[[audits.clap]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "2.32.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/RLMHBPVnOJoRbre7LEgKOiO7Sd81rqnretKPJ1ameFw",
]

[[audits.clap-permission-flag]]
who = "\"matthiasbeyer\" (https://github.com/matthiasbeyer)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.2.0"
notes = """
I am one of the current maintainers of the crate and feel confident to say
that the crate is safe to use."""
aggregated-from = [
    "https://github.com/matthiasbeyer/crev-proofs#HT24oErbY-0x-yt9mGMZEk5S07lzpFQ4kayzEkVxJWU",
    "crev:review/3pmd7jmi9uyybxwXXjic-u6rK0cNv-FyRJDBIAA6Xb0",
]

[[audits.clap-port-flag]]
who = "\"matthiasbeyer\" (https://github.com/matthiasbeyer)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.3.0"
notes = """
I am one of the current maintainers of the crate and feel confident to say
that the crate is safe to use."""
aggregated-from = [
    "https://github.com/matthiasbeyer/crev-proofs#HT24oErbY-0x-yt9mGMZEk5S07lzpFQ4kayzEkVxJWU",
    "crev:review/z_GCSDDr3wiJKYBhgi0IDyqvHyRftnXPQO1dbYQikdQ",
]

[[audits.cloudabi]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.0.3"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/ySNCI9T-8n5eo9B-_XL4lk7CzrOWXNvpFbKnburBHHw",
]

[[audits.cloudflare-zlib-sys]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.2.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/gplCzkTQtJD0Bwlzwyw_AJfVYPDFAF74J_FJKqhzISw",
]

[[audits.cloudmqtt]]
who = "\"matthiasbeyer\" (https://github.com/matthiasbeyer)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.4.0"
notes = """
I know that there's one line unsafe in this crate, which is necessary for
zero-copying reasons.
I am positive that the crate is completely safe to use and I know the author
personally."""
aggregated-from = [
    "https://github.com/matthiasbeyer/crev-proofs#HT24oErbY-0x-yt9mGMZEk5S07lzpFQ4kayzEkVxJWU",
    "crev:review/mnz__UiAlayz6MSXZrOOYSpmv74sRqMvAd-zX9z2y2o",
]

[[audits.coap-numbers]]
who = "\"chrysn\" (https://gitlab.com/chrysn)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-run",
]
delta = "0.1.2 -> 0.2.0"
notes = "Own-crate review. Does what it says on the packaging, in regular use by other own crates."
aggregated-from = [
    "https://gitlab.com/chrysn/crev-proofs#bYdCa4xhd5VL4dlcVPBxV51PrW5joFp9U04rKgcTvk8",
    "crev:review/Lgk-T4gWGIlQL-wnW3oYHg1af7BdjdLLhGmXwBFiNkg",
]

[[audits.coap-numbers]]
who = "\"chrysn\" (https://gitlab.com/chrysn)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-run",
]
version = "0.1.2"
notes = "Own-crate review. Does what it says on the packaging, in regular use by other own crates."
aggregated-from = [
    "https://gitlab.com/chrysn/crev-proofs#bYdCa4xhd5VL4dlcVPBxV51PrW5joFp9U04rKgcTvk8",
    "crev:review/ZsPP0ZsTC_Ovgm5_8Jn_nxie_P1ffdhVZUbyrB49GZU",
]

[[audits.cocoa_image]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/zs-JMu7WPPLsqgzDxVOdV676OVu4sTbsDdjF1XOSKoo",
]

[[audits.codepage-437]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.0"
notes = "https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/codepage-437.md#0.1.0"
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/utZ2rmU3JrwASSMG6wmeMZ3oZBeOe1ysveyFiHjQZeg",
]

[[audits.color_quant]]
who = "\"icefox\" (https://git.sr.ht/~icefox)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.1"
notes = "Basically pure computation with no unsafe or I/O."
aggregated-from = [
    "https://git.sr.ht/~icefox/crev-proofs#lr2ldir9XdBsKQkW3YGpRIO2pxhtSucdzf3M5ivfv4A",
    "crev:review/jemEOaMoq_6o0NhzB-85MtVKoSMzeRY5AT9aZWAvXLw",
]

[[audits.colorchoice]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "1.0.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/2Dc6_UmqisUkrALqX2nAMvjKyg9HtThpJegQhFIFmLY",
]

[[audits.colored]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "1.8.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/6_UayFInTuuL3xom9KTeEaOKm7fV_Y1RVRjv1fll18Y",
]

[[audits.combine]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "3.8.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/xdkABLCerQ5wPFIIp0ttZS4EY1RYQga-NzMLB-iSsR8",
]

[[audits.comma]]
who = "\"matthiasbeyer\" (https://github.com/matthiasbeyer)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.0"
notes = """
Not much code and easy to understand. As of today, the crate has no CI in
place, which may concern some. But it seems to be rather feature-complete."""
aggregated-from = [
    "https://github.com/matthiasbeyer/crev-proofs#HT24oErbY-0x-yt9mGMZEk5S07lzpFQ4kayzEkVxJWU",
    "crev:review/mCRULdHFFoP5XnvlOc1NDlI_dPzSKaipm_OsSWwMNdw",
]

[[audits.common_failures]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "strong",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.1"
notes = "LGTM"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/8g-m9X2ugmCuz3dwERBn9vz68XIJI_zAmaljyNNql9g",
]

[[audits.concolor-override]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "1.1.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/TGoQUMMoTAXeE1FqDANt5B3slzm0fMAFqHXQRRfvVFg",
]

[[audits.config]]
who = "\"matthiasbeyer\" (https://github.com/matthiasbeyer)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.13.3"
notes = "Am the current maintainer of the crate, no dramatic changes since 0.13.2."
aggregated-from = [
    "https://github.com/matthiasbeyer/crev-proofs#HT24oErbY-0x-yt9mGMZEk5S07lzpFQ4kayzEkVxJWU",
    "crev:review/rx1C-3ErWOAE9-pi_NgVgOidq2Q2l6dle8__FjF63WM",
]

[[audits.configparser]]
who = "\"niklasf\" (https://github.com/niklasf)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "2.0.0"
notes = "Solid utilities for handling ini files. API slightly idiosyncratic."
aggregated-from = [
    "https://github.com/niklasf/crev-proofs#a0hN0qYwwDTmHtAchnTXiF-I_L9rK1KL5kgCmQoYR9o",
    "crev:review/Uge6IHS_VhmisiqXzv2F3hc11hoLKPEdJoLzeoFfUzs",
]

[[audits.console_error_panic_hook]]
who = "\"Michael-F-Bryan\" (https://github.com/Michael-F-Bryan)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.6"
notes = """
The implementation is rather straight-forward. It uses `std::panic::set_hook()`
to install a panic hook which uses `console.error()` from JavaScript to log a
panic and the backtrace retrieved by creating a `new Error()`.

The code is also thoroughly documented using both rustdocs and comments and
explains possible edge cases due to browser differences.
"""
aggregated-from = [
    "https://github.com/Michael-F-Bryan/crev-proofs#qxL5iIEv913oBYUgUHHVRQP8FHVzdEIoQm8IKd1Ewtc",
    "crev:review/MNlFXWM4ngvKD1s3Y1j-J2iNCFQlpEHuoSg0-RV7Lro",
]

[[audits.const-random]]
who = "\"leo60228\" (https://github.com/leo60228)"
criteria = [
    "positive",
    "level-medium",
    "trust-low",
]
version = "0.1.6"
notes = "proc-macro-hack wrapper crate"
aggregated-from = [
    "https://github.com/leo60228/crev-proofs#2LuQSTppPubecRKRky5i_owgDcpbZhuFE3iXyLky5w4",
    "crev:review/9sT8J8NEeIXydhFtU9qhXQQN5FvbKDsS_YuAwbyr2WM",
]

[[audits.constant_time_eq]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "strong",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.5"
notes = """
I compared this to crypto/memneq.c from Linux 5.7-rc5; the algorithm is
indeed the same, and I understand how it works. There are comments for all
the unobvious bits, too. I am not formally trained in cryptography, but
I posses basic knowledge and I believe this code to be secure for any
application."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/6CQEVzyi7atXeHaq5ePBLVQ1hITg-yterFIaAzHe9sg",
]

[[audits.constant_time_eq]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.3"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/WRY1GeLa-Da1PJwQNFRBJWlcgeNd-O59C9FDo6KnK14",
]

[[audits.convert_case]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.6.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/0wu9EEDeYp-Ccz4vzXUCDPbf5l2q-u0TIRgNlss9Lsc",
]

[[audits.cookie_store]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.7.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/maf2pvTf23INITLHnNapvhrkACGVzB5PYaGl5ja1K0o",
]

[[audits.copyless]]
who = "\"qnighy\" (https://github.com/qnighy)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.4"
notes = "A small bunch of unsafe operations that imitates the (now non-existent) placement syntax. Simple enough to verify its whole behavior."
aggregated-from = [
    "https://github.com/qnighy/crev-proofs#fkkJ3Z6xSDEZwFlyKgIDxYS2x6mS7b2cxbWBeEWgfXs",
    "crev:review/HCpu7ZxHRgIHWctVKyJG1quNEFAvj7Wu6yoxNnGojxQ",
]

[[audits.core-foundation]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.6.4"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/ErgB3KuXnFmUY_RPVxMUWK7su9G_IoB4t_zM-rRnan4",
]

[[audits.core-foundation-sys]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.6.2"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/53GAWReh7YFbPcAMCqPvEypJTwfqcBJ9MGDmXHkS2bE",
]

[[audits.cpufeatures]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.1.5"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/PO_1EDl9JiC1gV2k5qnTjFuZHfk_gwq1u_sIAiAs9hA",
]

[[audits.crates_io_api]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.3.0"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/xfo-OXo9OSILuvrEMagJSwxkJIwC3zGqQm14cf6_RqA",
]

[[audits.crc]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "1.8.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/VpN7vY3TqnJ-YUnicTN8TTu1uOv5tNTxq8BDv3_aVyg",
]

[[audits.crc32fast]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "1.2.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/grYUFQMzLsNJcPYem0qX49dZ52esDzI-sEuCqDLDwT4",
]

[[audits.critical-section]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.2.5"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/sFcWQoreTwXRm6o_7Z3pd3oWHJZKwiquSXNDBlZNFdA",
]

[[audits.crossbeam]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.7.3"
notes = "Proxy crate."
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/RHpogtGO0nnr56ZfTwdXyGbmtAwjEjVDvWnukhx3IA4",
]

[[audits.crossbeam-utils]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.8.6"
notes = "Very rudimentary review, of a otherwise well known and reputable package."
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/UJx9duyqh2AbDhSGdNRLl1ymF9qiAT-qw_pGGiJg5-0",
]

[[audits.crossterm_cursor]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "negative",
    "level-medium",
    "trust-medium",
]
version = "0.3.1"
notes = '''
Pros:
* Cross platform

Cons:
* Soundness issues
* Data races

| File                                          | Rating | Notes |
| --------------------------------------------- | ------ | ----- |
| .github/CODEOWNERS                            | +1 | |
| docs/CONTRIBUTING.md                          | +1 | |
| src/cursor/ansi_cursor.rs                     | +1 | |
| src/cursor/cursor.rs                          | +1 | |
| src/cursor/winapi_cursor.rs                   | +1 | |
| src/sys/unix.rs                               | -1 | \[[#199]\] 45: Getting the cursor pos can drop stdin data
| [src/sys/winapi.rs](src/sys/winapi.rs)        | -1 | \[[#245], [#252]\] Multiple soundness issues
| src/cursor.rs                                 | +1 | |
| src/lib.rs                                    | +1 | |
| src/sys.rs                                    | +1 | |
| .cargo_vcs_info.json                          | +1 | |
| .cargo-ok                                     | +1 | |
| .gitignore                                    | +1 | |
| .travis.yml                                   | +1 | |
| Cargo.toml                                    | +1 | MIT, dep: winapi
| Cargo.toml.orig                               | +1 | MIT, dep: winapi
| CHANGELOG.md                                  | +1 | |
| LICENSE                                       | +1 | MIT
| README.md                                     | +1 | |


| Other     | Rating | Notes |
| --------- | ------ | ----- |
| unsafe    | -1 | Soundness issues
| fs        | +1 | None
| io        |  0 | Drops stdin
| docs      | +1 | |
| tests     | +1 | |

src/sys/winapi.rs
-----------------
| Line  | What                          | Notes |
| -----:| ----------------------------- | ----- |
| 26    | unsafe mut SAVED_CURSOR_POS   | -1, \[[#245]\] Access to static mut is unguarded!  Undefined behavior!  Unsound!
| 68    | fn Cursor::goto               | 0,  \[[#252]\] `unsafe { ... }` - would be valid if screen buffer handle was guaranteed valid
| 86    | fn Cursor::set_visibility     | 0,  \[[#252]\] `unsafe { ... }` - would be valid if screen buffer handle was guaranteed valid
| 101   | fn Cursor::restore_cursor_pos | -1, \[[#245]\] Access to static mut is unguarded!  Undefined behavior!  Unsound!
| 114   | fn Cursor::save_cursor_pos    | -1, \[[#245]\] Access to static mut is unguarded!  Undefined behavior!  Unsound!
| 121   | impl From<Handle> for Cusror  | ??, \[[#252]\] Not sure if Handle is guaranteed to be valid
| 129   | impl From<HANDLE> for Cursor  | -1, \[[#252]\] no guarantee HANDLE is valid, unsound!

[#199]: https://github.com/crossterm-rs/crossterm-cursor/issues/3
[#245]: https://github.com/crossterm-rs/crossterm-cursor/issues/4
[#252]: https://github.com/crossterm-rs/crossterm-cursor/issues/5
'''
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/Z7R-JT3U_4oVF6sqhxxe0DCT_WYddiPk5gSOzTKmo5o",
]

[[audits.crossterm_input]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "negative",
    "level-medium",
    "trust-medium",
]
version = "0.4.1"
notes = '''
Pros:
* Handles console input

Cons:
* Soundness issues
* Not browser compatible

| File                                                      | Rating | Notes |
| ---------------------------------------------             | ------ | ----- |
| .github/CODEOWNERS                                        | +1 | |
| docs/CONTRIBUTING.md                                      | +1 | |
| src/input/input.rs                                        | +1 | |
| [src/input/unix_input.rs](src/input/unix_input.rs)        | -1 | Parsing looks off, panicy internals
| [src/input/windows_input.rs](src/input/windows_input.rs)  | -1 | Unsound \[[#245]\], very strange keyboard handling.
| [src/sys/unix.rs](src/sys/unix.rs)                        |  0 | Mishandles `read == 0`? |
| src/input.rs                                              | +1 | |
| src/lib.rs                                                | +1 | |
| src/sys.rs                                                | +1 | |
| .cargo_vcs_info.json                                      | +1 | |
| .cargo-ok                                                 | +1 | |
| .gitignore                                                | +1 | |
| travis.yml                                                | +1 | |
| Cargo.toml                                                | +1 | MIT, winapi, libc, optional serde
| Cargo.toml.orig                                           | +1 | MIT, winapi, libc, optional serde
| CHANGELOG.md                                              | +1 | |
| LICENSE                                                   | +1 | MIT
| README.md                                                 | +1 | MIT

| Other     | Rating | Notes |
| --------- | ------ | ----- |
| unsafe    | -1 | Unsound
| fs        | +1 | `/dev/tty` access, but that's expected
| io        | +1 | Sound... probably
| docs      | +1 | |
| tests     |  0 | Admittedly hard to unit test

src/input/unix_input.rs
-----------------------
| Line  | What  | Notes |
| -----:| ----- | ----- |
| 198   | fn SyncReader::next   | -1, Disambiguating ESC like this seems super sketchy/brittle.
| 261   | fn parse_event        | -1, This is more like what ESC parsing *should* look like...?
| 269   | fn parse_event        | -1, \\r\\n -> Enter Enter?  Seems wrong...
| 312   | fn parse_csi          | -1, `.unwrap` Panic city
| EOF   | | |

src/input/windows_input.rs
--------------------------
| Line  | What  | Notes |
| -----:| ----- | ----- |
| 42    | static mut ORIG_MODE                  | -1, More unsound access \[[#2]\]
| 47    | WindowsInput::read_char               | +1, `unsafe { ... }` - willing to assume `_getwche` is sound.
| 110   | fn WindowsInput::enable_mouse_mode    | -1, `unsafe { ... }` - unsound access of ORIG_MODE! \[[#245]\]
| 116   | fn WindowsInput::disable_mouse_mode   | -1, `unsafe { ... }` - unsound access of ORIG_MODE! \[[#245]\]
| 225   | fn read_single_event                  | 0, `unsafe { ... }` - `KeyEventRecord::from(*input.event.KeyEvent())` is *probably* sound/safe?
| 228   | fn read_single_event                  | 0, `unsafe { ... }` - `MouseEvent::from(*input.event.MouseEvent())` is *probably* sound/safe?
| 249   | fn read_input_events                  | 0, `unsafe { ... }` - `KeyEventRecord::from(*input.event.KeyEvent())` is *probably* sound/safe?
| 256   | fn read_input_events                  | 0, `unsafe { ... }` - `MouseEvent::from(*input.event.MouseEvent())` is *probably* sound/safe?
| 291   | fn parse_key_event_record             | 0, Several keys are dead, apparently
| 303   | fn parse_key_event_record             | 0, Strange enumeration values for KeyEvent
| 345   | fn parse_key_event_record             | -1, either VK_PRIOR \| VK_NEXT can be sanely simplified a lot or something is super fucky.
| 354   | fn parse_key_event_record             | -1, either VK_END \| VK_HOME can be sanely simplified a lot or something is super fucky.
| 367   | fn parse_key_event_record             | 0, `unsafe { ... }` assumes UnicodeChar is valid.  Private fn only called on win32 results... technically unsound of winapi only populated AsciiChar, but that would be super dumb.
| EOF   | | |

src/sys/unix.rs
---------------
| Line  | What  | Notes |
| -----:| ----- | ----- |
| 19    | fn get_tty_fd                         | +1, `unsafe { ... }` looks sound
| 45    | fn read_char_raw                      | 0, `read == 0` can probably happen when pipe broken? generates extra ' '?
| EOF   | | |

[#245]: https://github.com/crossterm-rs/crossterm/issues/245
'''
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/kP6WeWfnlaKHpN8EUpL9hJ0gXF_b4v5ASMk-MTy19m0",
]

[[audits.crossterm_screen]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.3.1"
notes = """
Pros:
* Abstracts platform specific bits
* This part is safe code

0.3.1
=====
| File                                          | Rating | Notes |
| --------------------------------------------- | ------ | ----- |
| .github/CODEOWNERS                            | +1 | |
| docs/CONTRIBUTING.md                          | +1 | |
| src/screen/alternate.rs                       | +1 | |
| src/sceren/raw.rs                             | +1 | |
| src/sys/unix.rs                               | +1 | |
| src/sys/winapi.rs                             | +1 | |
| src/lib.rs                                    | +1 | |
| src/screen.rs                                 | +1 | |
| src/sys.rs                                    | +1 | |
| .cargo_vcs_info.json                          | +1 | |
| .cargo-ok                                     | +1 | |
| .gitignore                                    | +1 | |
| .travvis.yml                                  | +1 | No MSRV
| Cargo.toml                                    | +1 | MIT, winapi, crossterm_*
| Cargo.toml.orig                               | +1 | MIT, winapi, crossterm_*
| CHANGELOG.md                                  | +1 | |
| LICENSE                                       | +1 | MIT
| README.md                                     | +1 | |

| Other     | Rating | Notes |
| --------- | ------ | ----- |
| unsafe    | +1 | Not in this crate
| fs        | +1 | Not in this crate
| io        | +1 | Indirect / stdio
| docs      | +1 | |
| tests     | ?? | Not in this crate
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/MS3dJ3-AOzgm8PZHrfnAMfbD1eZO6kyVytTcZ51d02o",
]

[[audits.crossterm_style]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "negative",
    "level-medium",
    "trust-medium",
]
version = "0.5.1"
notes = """
Pros:
* Styling!

Cons:
* Poor win7 support
* Unsound

| File                                          | Rating | Notes |
| --------------------------------------------- | ------ | ----- |
| .github/CODEOWNERS                            | +1 | |
| docs/CONTRIBUTING.md                          | +1 | |
| src/enums/attribute.rs                        | +1 | Verified codes vs https://en.wikipedia.org/wiki/ANSI_escape_code#SGR_parameters
| src/enums/color.rs                            |  0 | FromStr for Color doesn't implement RGB parsing despite supporting RGB
| src/enums/colored.rs                          | +1 | |
| src/ansi_color.rs                             |  0 | Verified codes vs https://en.wikipedia.org/wiki/ANSI_escape_code#8-bit .  Could've simplified match logic a bit.
| src/color.rs                                  | -1 | Bugs ([#261], [#263])
| src/enums.rs                                  | +1 | |
| src/lib.rs                                    | +1 | |
| src/macros.rs                                 | +1 | |
| src/objectstyle.rs                            | +1 | |
| src/styledobject.rs                           |  0 | Odd fg/bg naming style.  Also reset seems suboptimal if nesting styles?
| src/traits.rs                                 | +1 | Not sure how wild I am about &str extension methods, but it works.
| [src/winapi_color.rs](src/winapi_color.rs)    | -1 | Unsound static mut ORIGINAL_CONSOLE_COLOR if original_console_color ever called before init_console_color, which appears possible [#245]
| .cargo_vcs_info.json                          | +1 | |
| .cargo-ok                                     | +1 | |
| .gitignore                                    | +1 | |
| .travis.yml                                   | +1 | No MSRV
| Cargo.toml                                    | +1 | MIT, winapi, crossterm_winapi, serde
| Cargo.toml.orig                               | +1 | MIT, winapi, crossterm_winapi, serde
| CHANGELOG.md                                  | +1 | |
| LICENSE                                       | +1 | MIT
| README.md                                     | +1 | |

| Other     | Rating | Notes |
| --------- | ------ | ----- |
| unsafe    | -1 | [#245] unsound static mut
| fs        | +1 | None
| io        |  0 | Not sure what to blame for win7 styling failures
| docs      | +1 | |
| tests     | -1 | Few, hard anyways

src/winapi_color.rs
-------------------
| Line  | What  | Notes |
| -----:| ----- | ----- |
| 46    | fn WinApiColor::set_fg            | mask should be 0x00F0 instead of special casing BACKGROUND_INTENSITY
| 78    | fn WinApiColor::set_bg            | mask should be 0x000F instead of special casing FOREGROUND_INTENSITY
| 118   | fn color_value                    | Isn't Color::White and Color::Grey here swapped in terms of colors to be used?
| 119   | fn color_value                    | Isn't Color::White and Color::Grey here swapped in terms of colors to be used?
| 133   | fn color_value                    | 0 seems like a poor choice for fallback fg color, especially when it's also used for bg color
| 153   | fn color_value                    | Isn't Color::White and Color::Grey here swapped in terms of colors to be used?
| 154   | fn color_value                    | Isn't Color::White and Color::Grey here swapped in terms of colors to be used?
| 133   | fn color_value                    | 0 seems like a mediocre choice for fallback bg color, especially when it's also used for fg color
| 172   | fn color_value                    | Wait why the heck are we going to/from strings that makes 0 sense
| 191   | static mut ORIGINAL_CONSOLE_COLOR | Unsound access if reset called before set_??, which appears possible [#245]

[#245]: https://github.com/crossterm-rs/crossterm/issues/245
[#261]: https://github.com/crossterm-rs/crossterm/issues/261
[#262]: https://github.com/crossterm-rs/crossterm/issues/262
[#263]: https://github.com/crossterm-rs/crossterm/issues/263
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/yooOWzNVjMUXFS02Zu4MfurojZhHUeEOD57z00dch6k",
]

[[audits.crypto_box]]
who = "\"cure53\" (https://github.com/cure53)"
criteria = [
    "strong",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.7.1"
notes = "Cure53 audit report can be found here https://cure53.de/pentest-report_rust-libs_2022.pdf"
aggregated-from = [
    "https://github.com/cure53/crev-proofs#0hUWpC7FL4ImqfHj_y-ej2vx_Uk9fi3AHeM0a28jQyM",
    "crev:review/qcwAdR-vxgLvI9hSwYowTnnAlC4XtwE3S34iE3jiUBU",
]

[[audits.css-color]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.2.4"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/FALFbHavBPQweVOq3LvTBrR249DauD-RIG5MDUwKgWY",
]

[[audits.csscolorparser]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.6.2"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/WONqCI23Z7z6ERxf_RHNCo3-8Db8zTfatsg3DujA1NQ",
]

[[audits.ct-logs]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.4.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/Q0EiPnO9vy6H1PT--PXX_5o28btQ23vEjqzUAPy8tCQ",
]

[[audits.current]]
who = "\"icefox\" (https://git.sr.ht/~icefox)"
criteria = [
    "negative",
    "level-medium",
    "trust-medium",
]
version = "0.1.2"
notes = "Dangerous mutable state shenanigans that should never be necessary."
aggregated-from = [
    "https://git.sr.ht/~icefox/crev-proofs#lr2ldir9XdBsKQkW3YGpRIO2pxhtSucdzf3M5ivfv4A",
    "crev:review/2Yp2Rjyf6xomd-k-eUJc8OhH-ACvYn65waXqLoy6H24",
]

[[audits.curve25519-dalek-ng]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "4.0.1"
notes = "I've only looked for malware, and haven't checked the cryptography."
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/izsVTbThZ6BSyfDrP2iCAbcyJ1mTnc1Q71ziafKuRoY",
]

[[audits.daemonize]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.4.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/-zp3oui60r5rT3D1tSUgSi8D6gCEPmjYApWvBv-3J3U",
]

[[audits.darling_macro]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.9.0"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/P8eYOUnF0l5SFumzKsK4pLlnIVyxrEA793P_MWXyBTM",
]

[[audits.data-url]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.1.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/fs9RpkpKQBS5qmMJMwBXuXR31bUHl0uSinwsDN0SUvA",
]

[[audits.dcv-color-primitives]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.5.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/DZL1Fo7WLeUDNlNaSdSFfpcHBC3Yvb4oAgfeS3Zagrg",
]

[[audits.debugid]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.4.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/uuNLe6aU-jeXX_FZsNf4TDKyMIMEt-DbK0vxmeo74Sg",
]

[[audits.default]]
who = "\"remram44\" (https://github.com/remram44)"
criteria = [
    "strong",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.2"
notes = """
Does what is says on the can. This crate is a single function, contains
virtually no code at all.
"""
aggregated-from = [
    "https://github.com/remram44/crev-proofs#V_B2pKpHVBIp_NegKfur4MK9GqFo0o78ijhku90pYS0",
    "crev:review/dhgelk77t5LLvIqrsp0CnYmEgWoJoGC_v3QZAFKjxjI",
]

[[audits.default]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "strong",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.2"
notes = "I'm the author. And this crate is 3 lines of trivial code."
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/3t1MkzxOO_ZY_bt-r5oVeqZUMVS2of0bb7rZK6_xqE0",
]

[[audits.deunicode]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.1.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/VBedzk0uaeSCuTLIELM9-fKIjPo0x-0wYcH3vJrvEaE",
]

[[audits.diesel_migrations]]
who = "\"KonradBorowski\" (https://gitlab.com/KonradBorowski)"
criteria = [
    "strong",
    "level-medium",
    "trust-low",
]
version = "1.4.0"
notes = "Internally uses migrations_internals and migrations_macros, the crate itself doesn't do much."
aggregated-from = [
    "https://gitlab.com/KonradBorowski/crev-proofs#ZOm7om6WZyEf3SBmDC69BXs8sc1VPniYx7Nfz2Du6hM",
    "crev:review/5uYtHRwbs8V74NxLx0IriL3BsVKXT10N-Ffkl-jBjE0",
]

[[audits.difference]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "2.0.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/piKlXaPna8Me8cV-K8visIjbHPRdnPwZSp7MNgqhFno",
]

[[audits.dinghy-build]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.4.15 -> 0.4.16"
notes = '''
0.4.16:  Trivial version bumps.
0.4.15:  Trivial version bumps.
0.4.14:  Trivial version bumps, style changes.
0.4.13:  Trivial version bumps.
0.4.12:  Trivial version bumps.
0.4.11
Some of the build/path stuff seems a little off... but might be correct?
All safe code, no security problems.

Reviewed:

    src\build_env.rs    +1
    src\build.rs        +1
    src\lib.rs          0
        102 Is this really correct for specifying the *host* environment?
        105 ..
    src\utils.rs        0
        14  Isn't this generating /../../../ ?  Doesn't seem right...

    Cargo.toml          +1
    Cargo.toml.orig     +1
'''
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/xDtz__xQj__DE6EOl9G_0LSeCtA-21H1kBfxpp5TUEs",
]

[[audits.dinghy-build]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.4.14 -> 0.4.15"
notes = '''
0.4.15:  Trivial version bumps.
0.4.14:  Trivial version bumps, style changes.
0.4.13:  Trivial version bumps.
0.4.12:  Trivial version bumps.
0.4.11
Some of the build/path stuff seems a little off... but might be correct?
All safe code, no security problems.

Reviewed:

    src\build_env.rs    +1
    src\build.rs        +1
    src\lib.rs          0
        102 Is this really correct for specifying the *host* environment?
        105 ..
    src\utils.rs        0
        14  Isn't this generating /../../../ ?  Doesn't seem right...

    Cargo.toml          +1
    Cargo.toml.orig     +1
'''
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/Fl9ipWhumCSnVeAEy8OCOGu0GwsBvbzVNjuBzwNfNh8",
]

[[audits.dinghy-build]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.4.13 -> 0.4.14"
notes = '''
0.4.14:  Trivial version bumps, style changes.
0.4.13:  Trivial version bumps.
0.4.12:  Trivial version bumps.
0.4.11
Some of the build/path stuff seems a little off... but might be correct?
All safe code, no security problems.

Reviewed:

    src\build_env.rs    +1
    src\build.rs        +1
    src\lib.rs          0
        102 Is this really correct for specifying the *host* environment?
        105 ..
    src\utils.rs        0
        14  Isn't this generating /../../../ ?  Doesn't seem right...

    Cargo.toml          +1
    Cargo.toml.orig     +1
'''
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/aSN0YY6PGQXMaVvPhQQcQ941giaN_kbkSqwuwjHhRUQ",
]

[[audits.dinghy-build]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.4.12 -> 0.4.13"
notes = '''
0.4.13:  Trivial version bumps.
0.4.12:  Trivial version bumps.
0.4.11
Some of the build/path stuff seems a little off... but might be correct?
All safe code, no security problems.

Reviewed:

    src\build_env.rs    +1
    src\build.rs        +1
    src\lib.rs          0
        102 Is this really correct for specifying the *host* environment?
        105 ..
    src\utils.rs        0
        14  Isn't this generating /../../../ ?  Doesn't seem right...

    Cargo.toml          +1
    Cargo.toml.orig     +1
'''
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/8kSNxbUqo9T5vzWrSAYFxT4SgLy661zHDhbaDLiBfGI",
]

[[audits.dinghy-build]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.4.11 -> 0.4.12"
notes = '''
0.4.12:  Trivial version bumps.
0.4.11
Some of the build/path stuff seems a little off... but might be correct?
All safe code, no security problems.

Reviewed:

    src\build_env.rs    +1
    src\build.rs        +1
    src\lib.rs          0
        102 Is this really correct for specifying the *host* environment?
        105 ..
    src\utils.rs        0
        14  Isn't this generating /../../../ ?  Doesn't seem right...

    Cargo.toml          +1
    Cargo.toml.orig     +1
'''
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/HIu01jz-AWyg1UFjipgwkwHJJQCeB7g_qfwDp4LyND8",
]

[[audits.dinghy-build]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.4.11"
notes = '''
Some of the build/path stuff seems a little off... but might be correct?
All safe code, no security problems.

Reviewed:

    src\build_env.rs    +1
    src\build.rs        +1
    src\lib.rs          0
        102 Is this really correct for specifying the *host* environment?
        105 ..
    src\utils.rs        0
        14  Isn't this generating /../../../ ?  Doesn't seem right...

    Cargo.toml          +1
    Cargo.toml.orig     +1
'''
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/5br250GIrvCsF6q9W2FUYCqAkXghVOpK7f5gbMFO9C0",
]

[[audits.directories]]
who = "\"icefox\" (https://git.sr.ht/~icefox)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "2.0.2"
aggregated-from = [
    "https://git.sr.ht/~icefox/crev-proofs#lr2ldir9XdBsKQkW3YGpRIO2pxhtSucdzf3M5ivfv4A",
    "crev:review/jVUDkyGFyCphnHVSl2LDSB9VBeyGJAYE6Wwp3TE64aQ",
]

[[audits.dirs]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "1.0.5"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/E6hWZCtMX-OMQm5os-IVCq6yem32fK2WorQTZ0Fyq4A",
]

[[audits.dirs-next]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "2.0.0"
notes = "Nice and simple. macOS uses hardcoded paths rather than Cocoa APIs, but that's fine."
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/UWF0bC3WZ-sccjH0aKM_IjDtREe7yCFVx4HUd0OL8qY",
]

[[audits.dirs-sys]]
who = "\"kpcyrd\" (https://github.com/kpcyrd)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.3.4"
aggregated-from = [
    "https://github.com/kpcyrd/crev-proofs#ZGgmIacywCRKLa33k7W04VFcK-glDkcBXKG4oF7t--4",
    "crev:review/uedVs2FDJe8jA4y8VCSEazMZ8rFDB5BZKZyn0Qy_JSs",
]

[[audits.dirs-sys-next]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.1.2"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/ZzdNlmjZq5wpVRyKpuP7WyF1DAjerLEoUK4k8E_p_os",
]

[[audits.displaydoc]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.1.6"
notes = "Clever"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/5n_9dL3MYiOmIi7V0ssdaxKrMcWEQanLQgfetIbKtGQ",
]

[[audits.doc-comment]]
who = "\"Mark-Simulacrum\" (https://github.com/Mark-Simulacrum)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.3.1"
aggregated-from = [
    "https://github.com/Mark-Simulacrum/crev-proofs#aD4K0g6AcSKUDp3VPF7u4hM94zEkqjWeRQwmabLBcV0",
    "crev:review/LFhGA_f1Fbyxwp3tcm3vtFDsetn19KKORiH_peimHbg",
]

[[audits.double-checked-cell]]
who = "\"niklasf\" (https://github.com/niklasf)"
criteria = [
    "neutral",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
    "unmaintained",
]
version = "2.1.0"
notes = """
I am no longer maintaining this crate. Use once_cell instead.
Its functionality is also being considered for inclusion in the standard
library."""
aggregated-from = [
    "https://github.com/niklasf/crev-proofs#a0hN0qYwwDTmHtAchnTXiF-I_L9rK1KL5kgCmQoYR9o",
    "crev:review/WRjp8qqKUX42s0SHy8eFNIZ0DARqrc0CTr0EtdApMYc",
]

[[audits.dpc-pariter]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.3.1"
notes = "I'm the author and I AFAICT this is a decent code that works well."
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/pEvmU9D1Cg28mw9LN_KM6Zvh3MLX4dMYDujOQiLAfkI",
]

[[audits.dtb]]
who = "\"HeroicKatora\" (https://github.com/HeroicKatora)"
criteria = [
    "neutral",
    "level-medium",
    "trust-high",
    "safe-to-run",
]
version = "0.1.3"
notes = """
Has fuzzing integration and been scrutinized by a previous review. I've done
version 0.1.2 in some detail and the only changes merged since then are bug
fix PRs addressing those. Mostly worried about inadvertently introduced bugs
in future changes due to awkward interfaces and implicit trust between
different components within the code.

For example, code in `struct_item.rs` relies on the reader providing only 4
byte aligned buffers instead of reasserting that fact as an internal
invariant. However this invariant is relied upon for an aligned pointer load
later.

Similarly some other C style patterns are prominent. Instead of functions
testing an invariant and constructing a result based off of it, boolean
return and construction by the caller is used. Example:

```
      self.assert_enough_struct(offset, desc_size)?;

      let desc_be = unsafe {
          &*((&self.struct_block[offset..]).as_ptr() as *const PropertyDesc)
              as &PropertyDesc
      };
```

This is fine in its current usage as far as I can tell but it's not very
stable with regards to possible future changes.

This also means that manual arithmetic is used for bounds checks which is
prone to missed overflow considerations etc.

A remaining antipattern is that of a byte output buffer: `StructItem` offers
reading its value as strings or a `u32` list. But instead of an iterator over
the backing memory the implementation takes an mutable reference to a byte
slice, manually aligns it to fit the output type, casts it, and writes the
data types `&'_ str` and `u32`. I have not found concrete misbehaviour from
this but it seems awkward.
"""
aggregated-from = [
    "https://github.com/HeroicKatora/crev-proofs#-sApEowWcAS9J0R7aO18cghvhLBpuMhyeUuWQq_fits",
    "crev:review/KPvdXzfmr-t32NmKgWQhKN7gqcdSPBkBqYnj1LRXBrg",
]

[[audits.dtb]]
who = "\"HeroicKatora\" (https://github.com/HeroicKatora)"
criteria = [
    "negative",
    "level-medium",
    "trust-high",
]
version = "0.1.2"
notes = """
Liberal use of `unsafe` and sparse validation of in puts indices and offsets.
In principle, the dtb format lends itself well to this use as the file format
itself already requires the alignment of many members and takes care to have
naturally packed structs–with aligned members but no padding.

It is thus possibly safe to map many parts of an immutable input directly to
structs marked as `repr(C)`, which also correctly appears.

However, the `unsafe` blocks contain only few indications of consideration of
their safety. Sometimes alignment checks appear obviously above but most
iterators implicitely trust their callers on the alignment of internal
buffers. It also seems that not all functions relying on `unsafe`
preconditions are marked `unsafe`. This applies to internal functions only
but may make the crate more brittle than necessary.

Another antipattern is that of a byte output buffer: A `StructItem` offers
reading its value as strings or a `u32` list. But instead of an iterator over
the backing memory the implementation takes an mutable reference to a byte
slice, manually aligns it to fit the output type, casts it, and writes the
data types `&'_ str` and `u32`. I have not found concrete misbehaviour from
this but it seems awkward.
"""
aggregated-from = [
    "https://github.com/HeroicKatora/crev-proofs#-sApEowWcAS9J0R7aO18cghvhLBpuMhyeUuWQq_fits",
    "crev:review/PBdNeDN9BcVI0vqVJqimSBzgafj8x1Dr8Ju0Tt3oKrg",
]

[[audits.dunce]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/AO-0CpYxrnFk6rIInPtUi-3HbxrSNiup-GtWf9IhIvg",
]

[[audits.egl]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "negative",
    "level-low",
    "trust-medium",
    "unmaintained",
]
version = "0.2.7"
notes = """
AVOID. This crate is unsound as fuck, and abandoned.

Alternatives:
* <code>[khronos-egl](https://lib.rs/crates/khronos-egl)</code> is a sounder, maintained fork.
* <code>[egli](https://lib.rs/crates/egli)</code> is an alternative, supposedly sound API with low and high level APIs.
* <code>[glutin_egl_sys](https://lib.rs/crates/glutin_egl_sys)</code> uses `gl_generator` to provide low level `unsafe` API structs.

https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/egl.md"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/3eqkzjm4euFOpkRpHX5k9XPw5Rj0S3DmPmkvt_DZzOI",
]

[[audits.either]]
who = "\"matthiasbeyer\" (https://github.com/matthiasbeyer)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.9.0"
notes = "Pretty straight-forward code, looks good."
aggregated-from = [
    "https://github.com/matthiasbeyer/crev-proofs#HT24oErbY-0x-yt9mGMZEk5S07lzpFQ4kayzEkVxJWU",
    "crev:review/vz7Tv7Sc58q3l9BRacnZviHMmoyL2UlD-sCZi9gZIyk",
]

[[audits.either]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "strong",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
delta = "1.5.0 -> 1.5.2"
notes = "Simple `Either` type."
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/Nq18k55jF0T21Jj7siHgQjenuk966BPATmSY5xvQQYU",
]

[[audits.either]]
who = "\"oherrala\" (https://github.com/oherrala)"
criteria = [
    "strong",
    "level-medium",
    "trust-low",
]
version = "1.5.2"
notes = "A simple datatype with implementations for many traits. Code is clean and easy to understand."
aggregated-from = [
    "https://github.com/oherrala/crev-proofs#YWfa4SGgcW87fIT88uCkkrsRgIbWiGOOYmBbA1AtnKA",
    "crev:review/cDTxJncs4TSYtajBOHm6iaIdvWa8CrAqViGekuC5lGU",
]

[[audits.either]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "strong",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.5.0"
notes = "Simple `Either` type."
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/hDLJ9beKnuF4m4vyDxyNtsA9rTQP94FPEZaHl6JX9RE",
]

[[audits.encoding-index-tradchinese]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "1.20141219.5"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/ppy14LIyySBPyKqDVl1o6fHZh13potATlGu0cwgc0PU",
]

[[audits.encoding_index_tests]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.1.4"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/rKkOPvXfzwpujVuHEgfXzS7nbJVTdzZZOxfThDEh5vA",
]

[[audits.encoding_rs]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.8.17"
notes = "Oooof, that was big"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/XoANAVy4OyyLsEE22xA2wwALu9PcoavtojQw7XgmjVA",
]

[[audits.enum-map]]
who = "\"KonradBorowski\" (https://gitlab.com/KonradBorowski)"
criteria = [
    "positive",
    "level-high",
    "trust-low",
]
version = "0.5.0"
notes = "I'm the author of this crate"
aggregated-from = [
    "https://gitlab.com/KonradBorowski/crev-proofs#ZOm7om6WZyEf3SBmDC69BXs8sc1VPniYx7Nfz2Du6hM",
    "crev:review/ejszmxEOhAlZYuH3EkitVLs5vY-_DAfMHCHHuiv1ZVQ",
]

[[audits.enum-map-derive]]
who = "\"KonradBorowski\" (https://gitlab.com/KonradBorowski)"
criteria = [
    "strong",
    "level-high",
    "trust-low",
]
version = "0.4.1"
notes = "This is my crate"
aggregated-from = [
    "https://gitlab.com/KonradBorowski/crev-proofs#ZOm7om6WZyEf3SBmDC69BXs8sc1VPniYx7Nfz2Du6hM",
    "crev:review/n9Tgq1cSb9pxBcNfs69T9dVUGBY1yvBuraLGD9UoVnc",
]

[[audits.envmnt]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.8.4"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/JV_NMPVfE-LQRq6UlYXhUnfjHby2wTQ8LMwCmEhjcsE",
]

[[audits.equivalent]]
who = "\"matthiasbeyer\" (https://github.com/matthiasbeyer)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.1"
notes = """
Had a look, it is literally only a hand full of lines and there's nothing that
made me lift an eyebrow..."""
aggregated-from = [
    "https://github.com/matthiasbeyer/crev-proofs#HT24oErbY-0x-yt9mGMZEk5S07lzpFQ4kayzEkVxJWU",
    "crev:review/H28C38P-Oc0NRPNdWBQiz39GnFx0UoZKLinkyRbUgzA",
]

[[audits.erasable]]
who = "\"cad97\" (https://github.com/cad97)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.0"
notes = """
I am the author of this crate. As such, I obviously trust it and believe it is useful.
So this review will instead point at the trickiest parts and try to rationalize them.

ErasedPtr is a trivial typedef.
Erasable is an unsafe trait, but an obvious one.

ErasablePtr is a tricky trait, as it encodes the requirements to make Thin work properly.
The methods functionality it provides is self-evident, but the Thin requirements are subtle.
Specifically, ErasablePtr requires Deref and DerefMut to \"behave\" to make Thin::with(_mut) sound.
It needs to be sound to take an erased pointer, convert it back to the real pointer temporarily,
dereference the real pointer, trash the temporary real pointer, and then use the resulting ref.
This is the requirement laid out by usage with Thin and described generally by the documentation.

Because of the simplicity of the actual functionality, the actual implementations of ErasablePtr
(as well as Erasable) are almost trivially correct, just type erasing and casting the type back.

Thin is the real scary `unsafe` involved. It relies on the guarantees promised by ErasablePtr
to treat an ErasedPtr as if it were the real, invariant-holding pointer.
The unsafe points are Thin::with, Thin::with_mut, Thin::deref, and Thin::deref_mut.
Thin::with is sound because of the no-shared-mutability-before-indirection requirement,
meaning that the created undropped temporary is a fine substitue for the real pointer.
Thin::with_mut adds the possiblity of mutability-before-indirection, and uses a scope guard
to ensure that the potentially mutated pointer is re-erased and re-stored as the thin pointer.
The Deref and DerefMut impls then rely on the address-independent-deref semantics to tie the
lifetime of the deref'd reference to the erased pointer rather than the temporary real pointer.
The only chance for mutability-before-indirection is in the pointer's own DerefMut impl,
and the use of Thin::with_mut to deref the real pointer ensures that this is properly respected.
The remaining impls on Thin just forward trait impls, as is done for pointers in std.

Note, however, that Thin actually provides little/no actual benefits without an additional
library (slice-dst), because all erasable pointers provided by this crate are already thin.

Smoke tests are run under miri, but the crate could potentially do with some more examples
as well as some more tests to ensure that all of the functionality works as advertised.

Some completely dead code was left in, but has been patched out of the git head,
and a patch version will be released that removes the unneeded dead code.

I've only put this review as positive rather than strong because of a lack of real-world use.
As of yet, the library is just of theoretical use, and has yet to be stress tested for real.
However, I feel perfectly fine recommending it for any/all use case that wants to make working
with type-erased pointers simpler, or uses slice-dst and wants thin pointers to those structures."""
aggregated-from = [
    "https://github.com/cad97/crev-proofs#e13vqC78LDCc-IiVPs-XkOHWd1j6PJUcYrugasS77hQ",
    "crev:review/mIyDB_nHil7_S6rAjZYnybmMmUueTmmqsTwtlF5TSGk",
]

[[audits.errno]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.2.5"
notes = """
I evaluated this before using in my own project. I only really know Linux,
but WASI and Windows parts made sense to me as well. I can't vouch for
memory safety of WinAPI calls, so I capped the rating at \"positive\" rather
than giving it the \"strong\" that it probably deserves."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/XaMQZjLDux-u0NxIp85OPvqJT-1J7L0comIS0WqT6sQ",
]

[[audits.errno-dragonfly]]
who = "\"buffet\" (https://github.com/buffet)"
criteria = [
    "strong",
    "level-high",
    "trust-low",
]
version = "0.1.2"
notes = "Just exports &errno."
aggregated-from = [
    "https://github.com/buffet/crev-proofs#liorp96qpcrH18meMUI0jFcsq9N3LgKvVm9yaKrwBOg",
    "crev:review/ymBdnI6n43Apy0RSWZk4OtN49UgYf2ihG9DjSw9YBQw",
]

[[audits.errno-dragonfly]]
who = "\"kpcyrd\" (https://github.com/kpcyrd)"
criteria = [
    "strong",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.1"
aggregated-from = [
    "https://github.com/kpcyrd/crev-proofs#ZGgmIacywCRKLa33k7W04VFcK-glDkcBXKG4oF7t--4",
    "crev:review/ioYrlkfLX0oJCVblOofXFn-Lp0GVY-SJkoxk1Zbrnpw",
]

[[audits.euclid]]
who = "\"icefox\" (https://git.sr.ht/~icefox)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.20.1"
notes = """
Pleasantly unsurprising.  It's just math.
"""
aggregated-from = [
    "https://git.sr.ht/~icefox/crev-proofs#lr2ldir9XdBsKQkW3YGpRIO2pxhtSucdzf3M5ivfv4A",
    "crev:review/g4KgENn-OjDs7sAE1QgO1yN7QnAmQ6F9BjM6cxKf-ZY",
]

[[audits.evalchroma]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/NHB9_aIPNPaNP8aqMTOePht2WkIDNAZbAmv6OheAdEI",
]

[[audits.exclude_from_backups]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/HJbR-V2EeVviYtkTXXbB12Fzng2-49K2s6tZh-IbfUY",
]

[[audits.exitcode]]
who = "\"matthiasbeyer\" (https://github.com/matthiasbeyer)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
    "unmaintained",
]
version = "1.1.2"
notes = """
Crate is just a collection of constants with some conveniance functionality
added. Should be perfectly fine to use, although the crate seems to be no
longer maintained."""
aggregated-from = [
    "https://github.com/matthiasbeyer/crev-proofs#HT24oErbY-0x-yt9mGMZEk5S07lzpFQ4kayzEkVxJWU",
    "crev:review/sWjgz3i7JPbSKut6k-XCSCZ69nR0xTAIbgyDkvW7HeI",
]

[[audits.extend]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.1.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/MzSfHC5iao2x95MHIKaZOvZmFCEKEQRLQGqS469YQnc",
]

[[audits.failure]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.1.5"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/1Jl6G66aG8LkfjPsjdfpIkXZxoUVF6OltNL1zY8EpuA",
]

[[audits.failure_derive]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.1.6"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/gxq8OSEXy33g-GbdbJPDq3dhkt6foZwImnOhtMNOgMQ",
]

[[audits.fake-simd]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.2"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/f0lEe1UcLjCM7neUIzL2v6AZfgGzoO7gqLrfmt5Fleg",
]

[[audits.fallible_collections]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.4.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/HM2Ocks_ZjNSVJQm_GXBRy9mmSn-2M1e2qnMJbn-OUE",
]

[[audits.fastrand]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
delta = "1.7.0 -> 1.8.0"
notes = """
This new version adds trivial methods to get the seed out of an existing
generator. I don't see any problem with this feature.

My recommendation stands: use this as a non-cryptographic PRNG if you don't
already depend on `rand` and want to keep your dependencies to the minimum."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/AEhqIrmpsK2cNRTSma9yclObv0Mj7EpCt53Vp69xhWI",
]

[[audits.fastrand]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
delta = "1.6.0 -> 1.7.0"
notes = """
Compared to 1.6.0, the Cargo.toml indicates MSRV of 1.34, and there is a new
`char()` method to generate characters. The code looks clean enough, contains
to `unsafe`, and I don't see any flaws in it.

My recommendation stands: use this as a non-cryptographic PRNG if you don't
already depend on `rand` and want to keep your deps to the minimum."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/zH73V9BLYLyfpEmF5UwvOIsCWYlFF3XwNw2dvUrwzaA",
]

[[audits.fastrand]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
delta = "1.5.0 -> 1.6.0"
notes = """
Compared to 1.5.0, this release only adds `#[derive(PartialEq, Eq)]` for the
`Rng` type. It's now possible to check if the generator is in a particular
state, but this was already possible through the `Debug` trait. Considering
the crate is not for cryptographic use, this seems totally fine to me.

My recommendation stands: use this as a non-cryptographic PRNG if you don't
already depend on `rand` and want to keep your deps to the minimum."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/EtJmPe-5FJmREmShlrFXHslrO1HqG_NPHWHCVt_KJ-A",
]

[[audits.fastrand]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.5.0"
notes = """
Generates random numbers using Wyrand algorithm (which is not
cryptographically secure, but ostensibly passes some popular tests — I didn't
verify that).

No `unsafe`, no dependencies other than std (except on WASM, where it pulls
in `instant` crate to get initial entropy).

By default, the generator is initialized from a hash of
std::time::Instant::now() and process ID. Good enough for a non-cryptographic
PRNG.

Interesting detail: if the thread-local storage has already been
de-initialized by we try to use it, the generator is initialized by a fixed
seed 0x4d595df4d0f33173. This constant is an initial state for PCG-XSH-RR,
which is an algorithm that previous versions of the crate used.

I verified that the algorithms match the documents they reference:
- Wyrand implementation matches `wyrand()` in
  https://github.com/wangyi-fudan/wyhash/blob/master/wyhash.h at commit
  399078afad15f65ec86836e1c3b0a103d178f15b
- random shuffling matches
  https://lemire.me/blog/2016/06/30/fast-random-shuffling/
- 128-bit multiplication matches
  https://stackoverflow.com/questions/28868367/getting-the-high-part-of-64-bit-integer-multiplication/28904636#28904636

I also verified that the algorithms that generate floating-point numbers
indeed do what they're supposed to do: set sign to 0 (i.e. positive),
exponent to 127 (i.e. zero), then fill the fraction with random bits, and
subtracting 1.0 from the result to get [0; 1).

Also worth mentioning that the crate doesn't guarantee a specific algorithm,
so you shouldn't depend on a specific seed to always produce the same
results.

Recommended for non-cryptographic purposes that do not require
reproducibility."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/AkRUkGI9-BPbyDsQqMqatUUAH1E_ZQfuhoWECpstEXo",
]

[[audits.file]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "negative",
    "level-high",
    "trust-high",
    "unmaintained",
]
version = "1.1.2"
notes = "Use fs::read and fs::write instead"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/LfhtAvONaLibSVVqWk3m1wvl5VKyHWFAmHZRy87pK74",
]

[[audits.file]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "neutral",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
    "unmaintained",
]
version = "1.1.2"
notes = "Obsolete"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/2N1HPdpzIqEcmnA8oxKUySCt-F0RVmRCArpAODOjiAc",
]

[[audits.filters]]
who = "\"matthiasbeyer\" (https://github.com/matthiasbeyer)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.4.0"
notes = "I am the author and am confident that this crate works as advertised."
aggregated-from = [
    "https://github.com/matthiasbeyer/crev-proofs#HT24oErbY-0x-yt9mGMZEk5S07lzpFQ4kayzEkVxJWU",
    "crev:review/kgelS3_skYjFH6wKYI6coRkKuRP23kPQQoUFsSbALx4",
]

[[audits.fnv]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "strong",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.7"
notes = """
FNV is an extremely simple hashing algorithm. This crate implements a variant
called FNV-1a.

It uses no unsafe, and just basic arithmetic. Half the code is actually
tests. I'm convinced that there are no bugs here, and definitely no malicious
code."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/KXk09ARw-OEExgHETtMK-OUykt8GW3-48xYsB-aZaMU",
]

[[audits.foreign-types]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "negative",
    "level-low",
    "trust-medium",
]
version = "0.4.0"
notes = """
https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/foreign-types.md#040--032
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/y0lZhkDxuR0zlkkf-n3ZDtPyLTTXZQRw_swgrDLOuqI",
]

[[audits.foreign-types]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "negative",
    "level-medium",
    "trust-medium",
]
version = "0.3.2"
notes = """
foreign_type! can generate unsound code without using the `unsafe` keyword in client code at all.

- Invokes C FFI which may be unsafe from safe fns.
- More recent versions (0.4.0) can implement unsafe traits (Send, Sync) without the unsafe keyword at all.
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/ShgAk8gF-c3pIX7UPf8o7za4lgNzwS4aEEkQZZ0sIew",
]

[[audits.foreign-types-shared]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "negative",
    "level-low",
    "trust-medium",
]
version = "0.1.1"
notes = """
Technically sound, but makes me nervous.

Opaque: Looks way too dereferencable, and would have the wrong size - that of `()`.
ForeignTypeRef: Unchecked pointer casts galore.
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/Gmz14rAIv_H_7vU9Zs8O3Y-_l6p2OaaIaP09HY7ATtQ",
]

[[audits.form_urlencoded]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "1.0.1"
notes = """
The crate encodes and decodes parameters of web forms.

I verified that the decoding algorithm matches the spec. The encoding is more
involved, so I didn't verify that. Notably, the crate has no tests, so I only
trust to it be correct because it's written by the Servo team.

There are two uses of `unsafe`, for performance (avoiding UTF-8 checks). Both
have comments explaining why they're okay, and they sound convincing enough."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/6v3TodaYKNbkvMvyQb8Ozfs2zJUYGCg3zFaIi_cbdGI",
]

[[audits.friendly_safety_buddy]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "negative",
    "level-low",
    "trust-high",
]
version = "0.1.0"
notes = "Wraps any code in an `unsafe` block in a sneaky way. It's proving a point, but it's not making things safe."
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/CB6v2njKLpgJPCeVDbIC5juYKpCqCexb3rCITtl5CKg",
]

[[audits.fs2]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.4.3"
notes = "I'm assuming GetVolumePathNameW will leave buffer null terminated if successful.  Unsafe only used for sane-looking FFI, and zeroing structs."
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/i8KxYPhh7CU7zHyzt1F6jdacTv0H2hUmrnBJS4vP7X0",
]

[[audits.fs_extra]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "neutral",
    "level-low",
    "trust-high",
]
version = "1.1.0"
notes = "May mangle UNC paths"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/djuGr_LBix903YXTyO1I5cOvML11VhVj6jIG-gjKyXM",
]

[[audits.fsio]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.1.3"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/npjVcrJK9-gm9XWZYhK3jhX48JuZNOkjjXsXqoQXrXE",
]

[[audits.fuchsia-cprng]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.1.1"
notes = "I have not reviewed the actual C code this calls."
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/rLTGMbPpQ9YuzPUlKd78HjhnH3y1ZiCigL6BJ7v-OwY",
]

[[audits.futures-cpupool]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.1.8"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/qhq1imIfIt0_7xFFzrPf5Zy3UmbkyXmbF-o493zJiyw",
]

[[audits.futures-sink]]
who = "\"kpcyrd\" (https://github.com/kpcyrd)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.3.17"
aggregated-from = [
    "https://github.com/kpcyrd/crev-proofs#ZGgmIacywCRKLa33k7W04VFcK-glDkcBXKG4oF7t--4",
    "crev:review/Tnsb9vHlhOnk7FpuLNwPQ2v41FytUkY5hFA94FczAHw",
]

[[audits.gantelet]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "negative",
    "level-low",
    "trust-high",
    "unmaintained",
]
version = "0.3.1-alpha.3"
notes = "Completely unfinished, doesn't do anything"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/Iz4TY5Kp_wuvxVZTdBwnVVgEfWYNow6OIgDzBUXU28o",
]

[[audits.gaviota-sys]]
who = "\"niklasf\" (https://github.com/niklasf)"
criteria = [
    "negative",
    "level-medium",
    "trust-medium",
]
delta = "0.1.12 -> 0.1.16"
notes = """
As the author of these bindings, I would not trust the underlying C library
to handle malicious input. Verify the checksums of tablebase files! This is a
good idea anyway.

Assuming that is done, I am quite confident in the corectness of the probing
results, based on years of production usage and comparison with Syzygy
tablebases."""
aggregated-from = [
    "https://github.com/niklasf/crev-proofs#a0hN0qYwwDTmHtAchnTXiF-I_L9rK1KL5kgCmQoYR9o",
    "crev:review/Yvi-axoZZ_hL-Mu9gvsovj8iz2R08n0QhSe2VhIAN0s",
]

[[audits.gaviota-sys]]
who = "\"niklasf\" (https://github.com/niklasf)"
criteria = [
    "negative",
    "level-medium",
    "trust-medium",
]
version = "0.1.12"
notes = """
As the author of these bindings, I would not trust the underlying C library
to handle malicious input. Verify the checksums of tablebase files! This is a
good idea anyway.

Assuming that is done, I am quite confident in the corectness of the probing
results, based on years of production usage and comparison with Syzygy
tablebases."""
aggregated-from = [
    "https://github.com/niklasf/crev-proofs#a0hN0qYwwDTmHtAchnTXiF-I_L9rK1KL5kgCmQoYR9o",
    "crev:review/OVdm3rtxRM2fXa9SHpxnA4YwqoX9ZI3pPzha0jm5iw0",
]

[[audits.geo-types]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.7.2"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/aPkXhVMNH2bB0aK6aWprmFhLF0WGsooT7GLgUSeHWpM",
]

[[audits.geohash]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.11.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/SyTFXX05bOBjbwySok45-9vfMLkifuUnOxC_LS08Cuw",
]

[[audits.getopts]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.2.21"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/CgISSnK8DfDZI908211siLyWatgKBNq0yIiW0LHQV_E",
]

[[audits.getrandom]]
who = "\"KonradBorowski\" (https://gitlab.com/KonradBorowski)"
criteria = [
    "positive",
    "level-medium",
    "trust-low",
]
version = "0.1.12"
notes = """
When programming for HermitCore, L4Re, UEFI or SGX on x86_64, this crate
will use rdrand as source of randomness, which may have a backdoor.
This looks fine on other platforms, using built-in operating system
CSPRNG generation functions, assuming the operating system vendors didn't
screw up those functions - and if they did, you have a problem, whatever
or not this crate is secure.
"""
aggregated-from = [
    "https://gitlab.com/KonradBorowski/crev-proofs#ZOm7om6WZyEf3SBmDC69BXs8sc1VPniYx7Nfz2Du6hM",
    "crev:review/Zrk9sC0KPg1Dvp4x70Z-en0TYXT3WOnyUN8d1xW5gmg",
]

[[audits.gettext-rs]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "strong",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.7.0"
notes = """
This is a self-review, because this release is made by me and contains only
the changes that I made.

The crate provides safe wrappers over an FFI for GNU gettext (which is
packaged separately, as a gettext-sys crate). There are no known issues with
those wrappers.

This release fixes an incorrect default for XDG_DATA_DIRS. There are no
security implications to this change, as far as I can see."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/A_y-2OMVJlA6pKS0KqHF_ElZFr8T26MhG6YHB0q0SYA",
]

[[audits.gettext-sys]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "strong",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.21.0"
notes = """
This is basically a self-review, since it's me who fixed the problems
I highlighted in my previous review.

The crate now bundles an up-to-date version of GNU gettext, which is nice.

The documentation now features a prominent warning about the bundled
library's license, LGPL.

This release added one new binding and some workarounds for build issues. All
of that looks good to me (but remember that I'm the author of those changes).

The crate is now even more solid than before."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/i40BZfqqZXUV4CKkWaDpWeBkZLkLCqnj4CRpw02uCXo",
]

[[audits.ggez]]
who = "\"icefox\" (https://git.sr.ht/~icefox)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.5.1"
notes = "I wrote it, it's not network-facing, has no significant unsafe.  So, yeah."
aggregated-from = [
    "https://git.sr.ht/~icefox/crev-proofs#lr2ldir9XdBsKQkW3YGpRIO2pxhtSucdzf3M5ivfv4A",
    "crev:review/R8xWgnUz1Qjt0La2HhYYKN48a2GjQEt6ImjYNR-xnrI",
]

[[audits.gh-emoji]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.3"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/vZUed6A-a8IceRoVxOU72xft_fzKBQ8SU2OxVvO2iA8",
]

[[audits.gif-dispose]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "2.3.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/QYgiq-KGdHh5loFu3jkIERn2LJ6V1bX_nMf1aX4-pvQ",
]

[[audits.gifski]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.10.4"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/_wpw3gm-oSOGuh97uWoDz6Okyh8TCgPBN8lD-RCVSXY",
]

[[audits.gimli]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.15.0"
notes = """
Looks nice and solid.  Well documented, well tested, code coverage, safe + sound.
Large crate - so I haven't taken the time to thoroughly audit everything - but I have at least skimmed over all code.
I've written some of my own partial DWARF parser in C++ in the past... parts look appropriately familiar.

Detail
======

| File                                      | Rating | Notes |
| ----------------------------------------- | ------:| ----- |
| benches/bench.rs                          | +1    | fs
| examples/dwarfdump.rs                     | +1    | fs
| fixtures/self/*                           |       | unreviewed binary data (used in test fixtures, probably OK)
| fixtures/self/README.md                   | +1    | |
| releases/friends.sh                       | +1    | |
| releases/release-announcement-template.md | +1    | |
| src/abbrev.rs                             | +1    | |
| src/aranges.rs                            | +1    | |
| src/cfi.rs                                | +1    | |
| src/constants.rs                          | +1    | |
| src/endianity.rs                          | +1    | |
| src/leb128.rs                             | +1    | |
| src/lib.rs                                | +1    | |
| src/line.rs                               | +1    | |
| src/loc.rs                                | +1    | |
| src/lookup.rs                             | +1    | |
| src/op.rs                                 | +1    | |
| src/parser.rs                             | +1    | |
| src/pubnames.rs                           | +1    | |
| src/pubtypes.rs                           | +1    | |
| src/ranges.rs                             | +1    | |
| src/reader.rs                             | +1    | |
| src/str.rs                                | +1    | |
| src/test_util.rs                          | +1    | |
| src/unit.rs                               | +1    | |
| tests/parse_self.rs                       | +1    | |
| .cargo-ok                                 | +1    | |
| .gitignore                                | +1    | |
| .travis.yml                               | 0     | I haven't reviewed travis-cargo |
| Cargo.toml                                | +1    | |
| Cargo.toml.orig                           | +1    | |
| CONTRIBUTING.md                           | +1    | |
| coverage                                  | +1    | |
| format                                    | +1    | |
| LICENSE-APACHE                            | +1    | |
| LICENSE-MIT                               | +1    | |
| README.md                                 | +1    | |
| rustfmt.toml                              | +1    | |

| Other     | Rating | Notes |
| --------- | ------ | ----- |
| unsafe    | +1    | Single `match unsafe { memmap::Mmap::map(&file) }` |
| fs        | +1    | Safe, only used in benches/examples/tests
| io        | +1    | Some io::{stderr, Error, Write} - all sane
| docs      | +1    | Lots of 'em!
| tests     | +1    | Lots of 'em!

TIL
===
travis-cargo
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/hTIaBSfo11oKQdo7AkcMykore8p8H4SYVsXQIY0b_yE",
]

[[audits.github-rs]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "negative",
    "level-low",
    "trust-high",
]
version = "0.6.1"
notes = "The project is unmaintained. The implementation is incomplete, and doesn't support paging."
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/_Lq-Ec_r0H0-htGkzIebYdZdBVlGwrPbe3nMEZxZHno",
]

[[audits.github_v3]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.3.2"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/jiUor1C5w1-TZWSSd5jj29cFdrI1Oo5p1h9_b1iTh-8",
]

[[audits.glsl-include]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.3.1"
notes = '''
Handle basic #include s for GLSL.

Pros:
* 100% Safe/Sandboxed

Cons:
* No `#file` directives emitted
* No callback option for `#include`, must pre-register all possible includes.
* Repeat #include s simply ignored instead of interacting with preprocessor.

0.3.1
=====
| crev          |   |
| ------------- |---|
| thoroughness  | medium
| understanding | high
| rating        | positive

| File                                          | Rating | Notes |
| --------------------------------------------- | ------ | ----- |
| src/error.rs                                  | +1 | Display for Error not double-clickable but provides good context.
| src/lib.rs                                    |  0 | Doesn't disambiguate quote style, no callbacks so you must pre-define every includable file.
| .cargo_vs_info.json                           | +1 | |
| .cargo-ok                                     | +1 | |
| Cargo.toml                                    | +1 | Apache 2.0 or MIT |
| Cargo.toml.orig                               | +1 | regex, lazy_static, \[dev\] indoc, criterion
| LICENSE-APACHE                                | +1 | |
| LICENSE-MIT                                   | +1 | |
| README.md                                     | +1 | Apache 2.0 or MIT, Contributions section

| Other     | Rating | Notes |
| --------- | ------ | ----- |
| unsafe    | +1 | None, 100% safe
| miri      |
| fs        | +1 | None, instead you need to pre-`include(path, into_string)`.
| io        | +1 | |
| docs      | +1 | |
| tests     | +1 | Not in .crate, but appears to be there/fine in original repository
'''
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/qI8K_9oEbT0GwyaO0i7OT-IU9PhDhXWdhw-bWsee3II",
]

[[audits.glutin_glx_sys]]
who = "\"icefox\" (https://git.sr.ht/~icefox)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.1.5"
notes = """
Just generates FFI for a system library.
"""
aggregated-from = [
    "https://git.sr.ht/~icefox/crev-proofs#lr2ldir9XdBsKQkW3YGpRIO2pxhtSucdzf3M5ivfv4A",
    "crev:review/LqKVIjcEU1Ot5cRRsYMPMjWAPWd5D5XqJyTXh7A3xoA",
]

[[audits.half]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "1.3.0"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/b77n992vJrJiOwctJhg8cYLrOuRGL8-HM3WtbVp2UU8",
]

[[audits.handy]]
who = "\"icefox\" (https://git.sr.ht/~icefox)"
criteria = [
    "negative",
    "level-medium",
    "trust-medium",
]
version = "0.1.3"
notes = "Apparently it's okay to silently give incorrect results; see https://github.com/thomcc/handy/pull/1"
aggregated-from = [
    "https://git.sr.ht/~icefox/crev-proofs#lr2ldir9XdBsKQkW3YGpRIO2pxhtSucdzf3M5ivfv4A",
    "crev:review/tOb0yzwrvjoR3Uyh7wLXbkf3UkvtupLTTYtFnWpfIf0",
]

[[audits.hash_hasher]]
who = "\"vorner\" (https://github.com/vorner)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "2.0.0"
notes = """
The code is trivial and looks good enough for creating hashes given already
hashed data, at least for non-security related scenarios.

There might be some cases where the given hashes don't use the full range of
u64, though (in case a structure of several small fields is used, for
example). This might lead to suboptimal distribution and collisions in a
HashMap and might come as some surprise. On the other hand, anything without
this problem would probably require something more complex and likely slower
and this seems to aim for things like bittorrent hashes and git commits,
where the data is an [u8].
"""
aggregated-from = [
    "https://github.com/vorner/crev-proofs#WJlSxaMnJ7GLdgFZKR_JrivA9KmmEZO806KlZZHHkyg",
    "crev:review/KE7MZqNYsblP_aO_2ojtlCAUoIxoHOBT8s8nZ3q65sg",
]

[[audits.hashbrown]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.8.2"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/lfVpmDiTMa69g8ODQoY--endMuE1Ej5diSfUU3kfL7Y",
]

[[audits.heck]]
who = "\"LovecraftianHorror\" (https://github.com/LovecraftianHorror)"
criteria = [
    "positive",
    "level-high",
    "trust-low",
]
version = "0.4.0"
notes = """
Simple, clean implementation, well documented, and a concise set of tests.
Can't really ask for much more."""
aggregated-from = [
    "https://github.com/LovecraftianHorror/crev-proofs#PTlVqKJclK7ELjugGnh_nDgpaWLAAGRIg5UH391WKnQ",
    "crev:review/czYTyDB6TF_x9aXjEvvC_qZtqdsJURepGIKCVSUwHxQ",
]

[[audits.heck]]
who = "\"kpcyrd\" (https://github.com/kpcyrd)"
criteria = [
    "strong",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.3.1"
aggregated-from = [
    "https://github.com/kpcyrd/crev-proofs#ZGgmIacywCRKLa33k7W04VFcK-glDkcBXKG4oF7t--4",
    "crev:review/qvmxugq9eBCuxdpRyxjkxcmGqJNyAJa927kYxgMo8TU",
]

[[audits.hermit-abi]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.1.12"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/cDmdh8x7D571nb01kp0FiuKxo9lR_eX_NIH4JW-PDMI",
]

[[audits.hex]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "strong",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.3.2"
notes = "Small, no unsafe, tests, good documentation."
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/-CPfluIS06fFS_HU7C_STSLUMGUIKhVh9bHPNtyrPFQ",
]

[[audits.hex_lit]]
who = "\"tcharding\" (https://github.com/tcharding)"
criteria = [
    "strong",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.1"
notes = "To the best of my knowledge this crate is secure, maintained, and well written."
aggregated-from = [
    "https://github.com/tcharding/crev-proofs#Df2R3MuKZTrPtFwmRvCfArOTY2E3IlKBJEEXqk_YMvY",
    "crev:review/8jilTDT3p2IMCpiVlHWPyEL5NM-HntMUTuk22YWp64Q",
]

[[audits.highway]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.2.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/-X4-JlpGnNeKOCIYwlhbcB24PNOtCaJdpt0-hH9WDo0",
]

[[audits.home]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.5.1"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/2_1NC4lpH5ZdEAGuNbiAM46dLGaFdWBrPnuppzFB3s0",
]

[[audits.hostname]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.3.0"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/rDf0AH4mTmadJH6n1SoNqCSYWj-BeN2kvqoASsaEvGo",
]

[[audits.hostname]]
who = "\"HeroicKatora\" (https://github.com/HeroicKatora)"
criteria = [
    "negative",
    "level-high",
    "trust-high",
]
version = "0.1.5"
notes = """
No references and not compliant to all possible implementations of the POSIX
interfaces it utilizes. Manifestation of the unsafety requires the hostname
to be set to a 255 byte string by the machine operator and is thus not
directly exploitable, especially on Linux or glibc where it is impossible to
configure the system into such a state.

This is not meant to assign blame towards the author, Crate repository is
properly abandoned and reverse dependencies should switch to another
implementation.
"""
aggregated-from = [
    "https://github.com/HeroicKatora/crev-proofs#-sApEowWcAS9J0R7aO18cghvhLBpuMhyeUuWQq_fits",
    "crev:review/EEekMaIR-BKpa2t7P_4yejW5lzoNGKId_outyUe2JR4",
]

[[audits.hostname]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.5"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/-fSOdfZCQ-ane5Tyc4rpsLIrZNd93wkj3Mj1rJDYw0c",
]

[[audits.http-auth-basic]]
who = "\"dbrgn\" (https://github.com/dbrgn)"
criteria = [
    "neutral",
    "level-medium",
    "trust-medium",
    "safe-to-run",
]
version = "0.1.2"
notes = """
This is a very small crate that encodes and decodes basic auth headers (which
is essentially just a base64 `user:password` string). It might be handy in
some situations.

The crate looks correct overall and is covered with tests. It could however
be made more efficient, there are a lot of allocations going on that could be
avoided (e.g. copying strings, taking strings instead of slices in an API,
collecting parts into Vec<String> after splitting, etc). That's not an issue
at all for small, non-performance-critical projects, but it might be a minor
issue if you're performance-sensitive and do a lot of authentication
handling."""
aggregated-from = [
    "https://github.com/dbrgn/crev-proofs#ILvan_fvVdN8cSH8GC7kB_h-3W6xWnafsCUTpdoTxQ4",
    "crev:review/KGPd78ai6URb6ZRNl30-z9fi5qbFB8kl41xfddxBhNg",
]

[[audits.http-body]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.1.0"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/VjiYjaG1uGM9IJExn5ON29Ol8HtFk27d7VIV4f2I0iY",
]

[[audits.httpdate]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.3.2"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/O5qwHLcAgwP2aKfRRPkb1dFFAgx7QEvAxF_-J-7ENko",
]

[[audits.humansize]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "1.1.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/1a--lks73FrhYG9O9jUUzxuhAjxtS8JdRjdEniYqcX8",
]

[[audits.humantime]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "1.2.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/tkPO4Uh0dKExQIW96u8U0WlQZSHDYSlyy42mE2U-BHo",
]

[[audits.hyperlocal]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.7.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/aGX48TchRlcM4QRQtOCe8pEwbfXsEmLBRCQMmgy713Q",
]

[[audits.hyperloglog]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.2"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/nPD2BkoKRrVf9YaBy-aHaIf-H7oMmnkD5i1j-0-c6qo",
]

[[audits.hyperloglogplus]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.4.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/fX1G1T8aljlU4z-Ljyav7yn8g62nN_swK_bFIzoW6x4",
]

[[audits.ico]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.0"
notes = """
Encoders/decoders for .ico and .cur file formats.

Pros:
* Well documented and ~complete despite 0.1.0 version
* Pure Rust

[Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/ico.md)"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/YQpSWIw9WSUZMi-E_NcAYYT5fb2fZIPV-TbI2Ln_51A",
]

[[audits.icon-pie]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.1.4-beta"
notes = """
Pros:
* Rescaling via `image`
* SVG rendering via `resvg`
* Pretty nifty and relatively comprehensive
* `icon-pie`'s lack of multithreading makes `icon-pie` sound despite `icon_baker`'s bogus Send+Sync impls

[Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/icon-pie.md)"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/2KkssTsA2ugz78WtZQcNTAJIVQrXuJNmaNOHQeeNlbk",
]

[[audits.icon_baker]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "negative",
    "level-medium",
    "trust-medium",
]
version = "3.2.0"
notes = """
Pros:
* Rescaling via `image`
* SVG rendering via `resvg`
* Pretty nifty and relatively comprehensive

Cons:
* Unsound

[Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/icon_baker.md)"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/KiSjSeazrMPsxRZ0A6_HsviMijlFzmLX-xKFJ-S44oM",
]

[[audits.ident_case]]
who = "\"chrysn\" (https://gitlab.com/chrysn)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.1"
notes = """
This crate is simple enough that I don't see how anything could go really
wrong here, and might easily be final with its 1.0.1 version unless new
features are added or the rules changed. No claims are made about the
conversion results being suitable for any application (eg. as identifiers)."""
aggregated-from = [
    "https://gitlab.com/chrysn/crev-proofs#bYdCa4xhd5VL4dlcVPBxV51PrW5joFp9U04rKgcTvk8",
    "crev:review/OPc0nrxRSj94CfxIZUdPW5gM3MdFEYYFROZyZqn6yMg",
]

[[audits.ident_case]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-run",
]
delta = "1.0.0 -> 1.0.1"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/pwZ5YrrTYeWE3QQhNkxVOh7_ZkDqrePYt8ObvtSue7I",
]

[[audits.ident_case]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-run",
]
version = "1.0.0"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/hG-jGOxHOafKncGyVc5LMeG9n6T4AJLPd9bAik4XAaw",
]

[[audits.idna]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.1.5 -> 0.2.0"
notes = """
0.2.0:  Some minor refactoring and a lot of ugly rustfmt(?) reformatting.
0.1.5:  Read all code, including skimmed every line of autogenerated rust tables. Looked for any security issues, including any obvious DoS attacks from loops. Did not try to manually verify any of the bidi/punycode/idna logic against a spec, but test coverage looks excellent.
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/bRV4dnjlefnR9vIDIFLbfOBZMhm0WB3L57reNIKPDqE",
]

[[audits.idna]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.1.5"
notes = """
Read all code, including skimmed every line of autogenerated rust tables. Looked for any security issues, including any obvious DoS attacks from loops. Did not try to manually verify any of the bidi/punycode/idna logic against a spec, but test coverage looks excellent.
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/4M3ZpGGZ1O39eUxw5tbzSOvI-_3k6tz9V0nw4pTANEQ",
]

[[audits.image-canvas]]
who = "\"HeroicKatora\" (https://github.com/HeroicKatora)"
criteria = [
    "strong",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.0.4"
notes = """
I'm the author and this packet avoids internal unsafe wherever it can. In its
current state it only requires it to perform a rather trivial cast for a
transparent `[u8]` wrapper type.

The package also considers resource exhaustion and interfaces with
potentially panicking, internal allocation generally come with a twin that
instead tries to perform the operation inplace and is a no-op error if that
is not possible.
"""
aggregated-from = [
    "https://github.com/HeroicKatora/crev-proofs#-sApEowWcAS9J0R7aO18cghvhLBpuMhyeUuWQq_fits",
    "crev:review/W1DzbZj3wiSxfMYdY_02r7w0k2QDErERqezDuUN5NgY",
]

[[audits.imagequant]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "2.11.9"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/VfsoCXBvXJTnSKc0lInojnj114XrAbhgp4VLAsm_hfk",
]

[[audits.imagequant-sys]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "3.0.3+sys2.14.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/sBNVVqEt_28kJ1SrK3Hkff8dei5DKUQ9LXuj-ZfO030",
]

[[audits.img_hash]]
who = "\"chrysn\" (https://gitlab.com/chrysn)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "3.1.0"
notes = """
Flexible implementation of perceptual hashes, with enough configurability to
try out their combinations."""
aggregated-from = [
    "https://gitlab.com/chrysn/crev-proofs#bYdCa4xhd5VL4dlcVPBxV51PrW5joFp9U04rKgcTvk8",
    "crev:review/-yari8m3UZcy7rQYCDgwFSUBd5hvYoPPZiaRXxUM6Ec",
]

[[audits.imgref]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.4.3"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/H-QBaCuNvPM5Cy6SfCwRyN3NEE7HYUhhMsjNlZsCu6o",
]

[[audits.indextree]]
who = "\"lo48576\" (https://github.com/lo48576)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "4.0.0"
notes = """
I've sent some patches and read whole sources carefully.
Data structure used by this crate is simple enough.
Additionally it contains many assertions and has no `unsafe` code.
"""
aggregated-from = [
    "https://github.com/lo48576/crev-proofs#wO-tKiJm4SRMJeJSAo_gT54GAoY2KhwMGHzEZUcTmbk",
    "crev:review/b1FS_NYIYJdd7xAev6Yj4EnkAXEiHmFI-zIAv5mJsak",
]

[[audits.insideout]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "strong",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.2.0"
notes = "Small, safe utility crate."
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/z9k29jYSZKBc5ntEXnsYastCLz5ttR4VA0aw2FW7t54",
]

[[audits.instant]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.2"
notes = """
std::time::Instant alternative that doesn't panic on wasm targets.

Pros:
- Doesn't panic!
- Just std::time::Instant on native, no performance hit or anything

Cons:
- Just std::time::Instant on native, easy to accidentally use new std APIs unavailable on wasm
- f64 repr for Instant makes me nervous
- Unusual license choice for rust projects
- Could use more test coverage

| File                                          | Rating | Notes |
| --------------------------------------------- | ------ | ----- |
| .circleci/config.yml                          | +1 | |
| src/lib.rs                                    | +1 | |
| src/native.rs                                 | +1 | I would've preferred a wrap Instant for ensuring compat, but sure.
| src/wasm.rs                                   |  0 | f64 repr might accumulate poorly
| tests/wasm.rs                                 |  0 | test_instant_now could spuriously fail if elapsed() == 0, would like to see more test coverage
| .cargo_vcs_info.json                          | +1 | |
| .cargo-ok                                     | +1 | |
| .gitignore                                    | +1 | Overkill
| AUTHORS                                       | +1 | |
| Cargo.lock                                    |  0 | Pointless, shouldn't be part of the package
| Cargo.toml                                    | +1 | BSD-3-Clause
| Cargo.toml.orig                               | +1 | BSD-3-Clause
| LICENSE                                       | +1 | BSD-3-Clause?
| README.md                                     | +1 | |

| Other     | Rating | Notes |
| --------- | ------ | ----- |
| unsafe    | +1 | None
| fs        | +1 | None
| io        | +1 | None
| docs      |  0 | Mostly unnecessary
| tests     |  0 | Could use more
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/l_rqKDSY5jr6fCxv5WSwAGCSnnD6EV0y0c2XryOO0_8",
]

[[audits.interpolate_name]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.2.3"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/gHD5KIxuFrxYu-UphNY4IPMGvWf15jmfUTgNxsVxvYQ",
]

[[audits.inventory]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.5"
notes = """
Great crate.  Doesn't work with WASM.
https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/inventory.md#015
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/xO7dMiG2VYrhkgLjt5Hn3mlJV34EI_M9lcLaqy-9EDI",
]

[[audits.ipnet]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "2.3.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/Prp1jPbPVaL6XQhidQ9l--FKDkXBBef5KLjUV8A3km4",
]

[[audits.ipnetwork]]
who = "\"vorner\" (https://github.com/vorner)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.15.1"
notes = """
Reasonably simple code, nothing fancy. Something you could write yourself if
you really needed and it wouldn't be that much work, but that's the whole
point of the crate that you don't have to repeat the easy code. With adequate
amount of testing. Seems to be working OK.

I'd also go as far as to say the declared WIP status is somewhat outdated.
Some things might still be missing, but I wouldn't be afraid to put it into
production and it would be unlikely to break."""
aggregated-from = [
    "https://github.com/vorner/crev-proofs#WJlSxaMnJ7GLdgFZKR_JrivA9KmmEZO806KlZZHHkyg",
    "crev:review/KTgE9c_Z1DIIXzz9vjx7mh9NAsPCb4HHsigtce3wjnM",
]

[[audits.is_ci]]
who = "\"matthiasbeyer\" (https://github.com/matthiasbeyer)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.1.1"
notes = "Code is pretty easy to understand and seems reasonable. No unsafe found."
aggregated-from = [
    "https://github.com/matthiasbeyer/crev-proofs#HT24oErbY-0x-yt9mGMZEk5S07lzpFQ4kayzEkVxJWU",
    "crev:review/Ag84nPNfqjwU2MfwQN5DpwsfnU30FPUpPxHn5H5YhZc",
]

[[audits.is_executable]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-run",
]
version = "1.0.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/8YKwz5R1lxrjHxgGq1OT9jh9SOQtl3VSIG4vm4SQIKk",
]

[[audits.ivf]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.1.0"
notes = "For AV1 only, but who'd want any other codec, right?"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/QVmYLWwA6xDx9bX38rD5lySF12C-iaq55RMbyF52T3s",
]

[[audits.jni]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "negative",
    "level-low",
    "trust-medium",
]
version = "0.13.0"
notes = '''
Rated files were at least reviewed to thoroughness + understanding medium, but the rest was only reviewed to througuhness low.

Detail
======

| File                                          | Rating | Notes |
| --------------------------------------------- | ------ | ----- |
| .github/PULL_REQUEST_TEMPLATE.md              | +1    | |
| .travis/run_travis_job.sh                     | +1    | |
| .vscode/tasks.json                            | +1    | |
| benches/api_calls.rs                          | +1    | Various API concerns but this file is fine.
| examples/HelloWorld.h                         | +1    | Matches HelloWorld.java... generated by `javah`?
| examples/HelloWorld.java                      | +1    | |
| examples/Makefile                             | +1    | |
| src/wrapper/descriptors/class_desc.rs         | +1    | |
| src/wrapper/descriptors/desc.rs               | +1    | |
| src/wrapper/descriptors/exception_desc.rs     | +1    | |
| src/wrapper/descriptors/field_desc.rs         | +1    | |
| src/wrapper/descriptors/method_desc.rs        | +1    | |
| src/wrapper/descriptors/mod.rs                | +1    | |
| src/wrapper/java_vm/init_args.rs              | +1    | |
| src/wrapper/java_vm/mod.rs                    | +1    | |
| src/wrapper/java_vm/vm.rs                     | -1    | Not 100% sure if it's sound to detatch threads out from under other Java code.  Some unsafe attach fns also confuse me as to why they're unsafe.
| src/wrapper/objects/auto_local.rs             | -1    | Not 100% sure if AutoLocal::new is sound based on scary JVM crash warnings
| src/wrapper/objects/global_ref.rs             | +1    | |
| src/wrapper/objects/jbytebuffer.rs            | -1    | Allowing construction from arbitrary jobject s will likely be unsound later
| src/wrapper/objects/jclass.rs                 | -1    | Ditto
| src/wrapper/objects/jfieldid.rs               | -1    | Ditto
| src/wrapper/objects/jlist.rs                  | -1    | Called it - internal is used in safe fns, unsound looking as fuck.
| src/wrapper/objects/jmap.rs                   |
| src/wrapper/objects/jmethodid.rs              |
| src/wrapper/objects/jobject.rs                |
| src/wrapper/objects/jstaticfieldid.rs         |
| src/wrapper/objects/jstaticmethodid.rs        |
| src/wrapper/objects/jstring.rs                |
| src/wrapper/objects/jthrowable.rs             |
| src/wrapper/objects/jvalue.rs                 |
| src/wrapper/objects/mod.rs                    |
| src/wrapper/strings/ffi_str.rs                |
| src/wrapper/strings/java_str.rs               |
| src/wrapper/strings/mod.rs                    |
| src/wrapper/errors.rs                         |
| src/wrapper/executor.rs                       |
| src/wrapper/jnienv.rs                         |
| src/wrapper/macros.rs                         |
| src/wrapper/signature.rs                      |
| src/wrapper/version.rs                        |
| src/lib.rs                                    |
| src/sys.rs                                    | +1    | pub use jni_sys::*
| tests/util/example_proxy.rs                   |
| tests/util/mod.rs                             |
| tests/executor_nested_attach.rs               |
| tests/executor.rs                             |
| tests/java_integers.rs                        |
| tests/jmap.rs                                 |
| tests/jni_api.rs                              |
| tests/jni_global_ref_is_deleted.rs            |
| tests/jni_global_refs.rs                      |
| tests/threads_attach_guard.rs                 |
| tests/threads_detach_daemon.rs                |
| tests/threads_detach.rs                       |
| tests/threads_explicit_detach_daemon.rs       |
| tests/threads_explicit_detach_permanent.rs    |
| tests/threads_explicit_detach.rs              |
| tests/threads_nested_attach_daemon.rs         |
| tests/threads_nested_attach_guard.rs          |
| tests/threads_nested_attach_permanently.rs    |
| .appveyor.yml                                 |
| .gitignore                                    |
| .travis.yml                                   |
| Cargo.toml                                    | +1    | |
| Cargo.toml.orig                               | +1    | |
| CHANGELOG.md                                  | +1    | |
| clippy.toml                                   | +1    | |
| CODE_OF_CONDUCT.md                            | +1    | |
| CONTRIBUTING.md                               | +1    | |
| LICENSE-APACHE                                | +1    | |
| LICENSE-MIT                                   | +1    | |
| README.md                                     | +1    | |

| Other     | Rating | Notes |
| --------- | ------ | ----- |
| unsafe    | -1    | Unsound
| fs        | +1    | Not used
| io        | +1    | Not used
| docs      | +1    | Well documented
| tests     | +1    | Decent testing

### benches/api_calls.rs

| Line | Notes |
| ----:| ----- |
| 52    | `..._unchecked` is safe?  Look at `call_static_method_unchecked` carefully.
| 69    | Not all `..._unchecked` are safe?
| 154   | Must manually drop local refs?  Lame.
| 226   | No use of black box?
|       | +1

### src/wrapper/descriptors/method_desc.rs

| Line | Notes |
| ----:| ----- |
| 24    | I feel like having an implicit "\<init\>" instead of a struct of some sort is potentially confusing?
|       | +1

### src/wrapper/java_vm/init_args.rs

| Line | Notes |
| ----:| ----- |
| 46    | Could use more doc-tests
| 50    | Silently ignoring unsupported options is a little lame
| 70    | `JavaVM::build` in doc comments, not `new` ?
| 101   | Pretty gosh darn heckin' sketchy if you ask me... relies on opts never being modified after this point.  Fortunately this type's contents are nice and private/local, so that's enforced.
|       | +1

### src/wrapper/java_vm/vm.rs 

| Line | Notes |
| ----:| ----- |
| 134   | unsafe impl Send + Sync - I believe this is safe for JavaVM (as used here), but not for JNIEnv (keep a look out for that later)
| 150   | unsafe { ... } - ptr casts are a bit sketchy, otherwise LGTM.
| 158   | +1
| 165   | unsafe fn - +1
| 185   | attach_current_thread_permanently - possible noop if already attached, meaning it might be temporary!
| 232   | detach_current_thread - doc comments make this sound possibly unsound?
| 270   | unsafe { ... } - +1
| 280   | unsafe { ... } - +1
| 364   | unsafe fn - This... actually looks sound? What am I missing?
| 386   | unsafe fn - This... actually looks sound? What am I missing?
| 409   | unsafe { ... } - +1
|       | -1 - Can detatched threads cause unsoundness?  What am I missing for unsafe fn?

### src/wrapper/objects/global_ref.rs

| Line | Notes |
| ----:| ----- |
| 36    | unsafe impl Send + Sync - should be safe?
| 48    | unsafe fn - presumably because this takes a jobject.  LGTM.
| 66    | unsafe fn - presumably because this takes a jobject.  LGTM.
|       | +1

### src/wrapper/objects/jbytebuffer.rs 

| Line | Notes |
| ----:| ----- |
| 11    | jobject is just a pointer, so this general purpouse crate-exported method means using JByteBuffer s is unsafe!
| 32    | there's no guarantee a given JObject is a JByteBuffer, but this succeeds unconditionally.
|       | -1 - I suspect invalid jobject s will cause soundness issues later

### src/wrapper/objects/jlist.rs

| Line | Notes |
| ----:| ----- |
| 20    | Eww, methods cached per-object?
| 46    | jobject -> JObject -> JList can be constructed with an invalid pointer...
| 69    | ...making all safe fns on this type unsound.  Use of 'safe' _unchecked methods also concerns me.
|       | -1

### src/wrapper/macros.rs

| Line | Rating | Notes |
| ----:| ------ | ----- |
| ...   |
| 26    | +1    | non_null
| ...   |
| 105   | +1    | java_vm_unchecked - 'unchecked' refers to error codes.  unsafe macro, $java_vm must be valid.
| 132   | -1    | java_vm_method    -  I wish this forced the caller to use `unsafe { ... }`.  unsafe macro, $jnienv must be valid.
| ...   |

# TIL

* Use `javah` to generate rust, perhaps?
* `[build-dependencies]`
'''
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/iEB8LhC0qMmLGH242acOudV20d9o1wteto80JxqbCFY",
]

[[audits.jni-sys]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.3.0"
notes = '''
Good solid FFI crate.  Manual generation (I see comments!) concerns me, but upon review it looks to have been done correctly.

Verified all structs and FFI signatures against android JNI.h, with the exception of double checking that *everything* is marked JNICALL on windows JNI instead of just most of it.
Android JNI lacks parameter names, so I didn't sanity check those either.
Verified against %LOCALAPPDATA%\Android\Sdk\ndk-bundle\toolchains\llvm\prebuilt\windows-x86_64\sysroot\usr\include\jni.h

Detail
======

| File                              | Rating | Notes |
| --------------------------------- | ------ | ----- |
| src/lib.rs                        | +1  | Lots of unsafe... but necessary. |
| .gitignore                        | +1  | |
| .travis.yml                       | +1  | |
| appveyor.yml                      | +1  | |
| Cargo.toml                        | +1  | |
| Cargo.toml.orig                   | +1  | |
| README.md                         | +1  | |

| Other     | Rating | Notes |
| --------- | ------ | ----- |
| unsafe    | +1    | Lots of it... but all necessary, and after careful review, all appears correct.
| fs        | +1    | None
| io        | +1    | None
| docs      | -1    | Nonexistant, but of low importance (other primary references are available)
| tests     |  0    | Not in crate

### src/lib.rs

| Line  | Rating | Notes |
| -----:| ------ | ----- |
| 7     | +1    | Looks sufficiently correct to me - VS defines this as *mut c_char, but *mut c_void is close enough IMO.
| 10    | +1    | all verified
| 20    | 0     | native version uses more newtypes, but without inheritence maybe this is sane in Rust.
| 39    | +1    | verified
| 51    | +1    | sure
| 57    | +1    | |
| 64    | -1    | DANGER - rust enum for C enum is begging for unsound if returned from FFI
| 71    | +1    | JNI constants here all look good
| 93    | 0     | JNINativeMethod - C version uses const char*, but the muts here aren't a *big* deal... I
| 99    | +1    | |
| 105   | +1    | JNINativeInterface is bloody huge, but all methods appear to match in name, position, and signature... |
| 115   |       | ...with the caveat that there's a lot of "system" convention when JNICALL isn't used throughout the android jni.h.  However, it *is* used in openjdk so that's probably fine?
| 116   |       | I'm also assuming `Option<unsafe extern "system" fn(...) -> ...>` is FFI compatible with C function pointers, which might be a bad assumption. |
| 157   |       | Native version isn't marked no return but I bet it is.
| 175   |       | Also, varargs functions degrade to "C" mode per https://stackoverflow.com/a/3615407
| 1411  |       | Reviewed all the way to here!
| 1413  | +1    | Sure
| 1421  | +1    | JNIEnv_ - Lack of impl with forwarding fns like jni.h has is vageuly annoying.
| 1425  | +1    | Sure
| 1433  | +1    | JavaVMOption - Again, mut differences, but otherwise OK.  Sure.
| 1438  | +1    | Sure
| 1446  | +1    | JavaVMInitArgs - LGTM
| 1453  | +1    | Sure
| 1461  | +1    | JavaVMAttachArgs - Again, mut differences, but otherwise OK.  Sure.
| 1467  | +1    | Sure
| 1475  | +1    | JNIInvokeInterface - LGTM
| 1501  | +1    | Sure
| 1507  | +1    | LHTM
'''
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/rqK_8F5ELJXODR2TsDMJUJwcOG56yPf3rBdeFtyNSDw",
]

[[audits.jpegxl-sys]]
who = "\"inflation\" (https://github.com/inflation)"
criteria = [
    "strong",
    "level-high",
    "trust-low",
]
version = "0.6.1"
notes = "I'm the author of the crate"
aggregated-from = [
    "https://github.com/inflation/crev-proofs#GAxYsfhooHqmU9arOms8u2Aj5x1VoUyYsYUzaB3OW6k",
    "crev:review/OPzoft3gmaKVb6hDmhxJGj6tPU3AqwP00YAUyEOpwpw",
]

[[audits.json]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "negative",
    "level-low",
    "trust-high",
    "unmaintained",
]
version = "0.12.4"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/2oZjBFXeboQQfW3sCujLV_XHWeQMs6wuCFYmpus4fvM",
]

[[audits.kamadak-exif]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.5.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/UQNOGcBOZ2mQD7ZkNVJip_wyt3y2XuOjT_u5qWb9SK4",
]

[[audits.keyvalues-parser]]
who = "\"LovecraftianHorror\" (https://github.com/LovecraftianHorror)"
criteria = [
    "positive",
    "level-high",
    "trust-low",
]
version = "0.1.0"
notes = """
Disclaimer, I'm the author

This crate handles parsing Valve's Data Format (VDF or KeyValues) into an
untyped structure. The parsing is backed by Pest without any real surprises
(the complicated parts being mapping the returned parsed object to a rust
structure. A bit annoying that this has to be done manually)

Verification-wise there are several places that could panic, but there is a
fuzzing suite to try and exercise code-paths that should be unreachable.

The only reason that I'm opting for positive over strong is because I know
that there are several VDF files that fail parsing (which should improve on
the next release), and I'm not confident that there aren't more files that
would also have issues since VDF doesn't really have a specification that is
followed :("""
aggregated-from = [
    "https://github.com/LovecraftianHorror/crev-proofs#PTlVqKJclK7ELjugGnh_nDgpaWLAAGRIg5UH391WKnQ",
    "crev:review/tRAyMabmoJPMTjN-mSS44POMkr_V0M1dHdPkEISXFIw",
]

[[audits.kurbo]]
who = "\"Michael-F-Bryan\" (https://github.com/Michael-F-Bryan)"
criteria = [
    "strong",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.5.6"
notes = """

This is a really high quality crate!

The library implements graphical primitives, so there's no use of `unsafe`.
Where applicable, the author has quoted sources (e.g. \"approximation taken
from http://example.com/\") and made explicit comments in regards to accuracy
and assumptions made. A lot of code has direct links to academic research,
and it's obvious the author has gone to great lengths to ensure good
algorithmic complexity (most operations are constant time where possible, no
use of loops to brute-force a solution, etc.)."""
aggregated-from = [
    "https://github.com/Michael-F-Bryan/crev-proofs#qxL5iIEv913oBYUgUHHVRQP8FHVzdEIoQm8IKd1Ewtc",
    "crev:review/bXndKNd2c95ai18gSVAg6su69jX0xd99HEynkUwcCR4",
]

[[audits.lab]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.9.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/8LBmnePK3oir_TZwacuozQn10gr88XkgEJ7XfuOgL1s",
]

[[audits.language-tags]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.2.2"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/iscvH8LkGJzJQvo0FoB4KZa3CsGdAEiBJypZJUblOPw",
]

[[audits.lazy-bytes-cast]]
who = "\"HeroicKatora\" (https://github.com/HeroicKatora)"
criteria = [
    "negative",
    "level-medium",
    "trust-high",
]
version = "4.0.0"
notes = """
Trait `FromByteSlice` relies on associated item `FromByteArray::Array` being
a proper byte array. However, this latter trait and associated type are safe
to implement with an almost arbitrary other type (a few trait std bounds
don't stop any implementation)."""
aggregated-from = [
    "https://github.com/HeroicKatora/crev-proofs#-sApEowWcAS9J0R7aO18cghvhLBpuMhyeUuWQq_fits",
    "crev:review/ceftDFjM4HvSnVX5kql3gt9R9aYIRCO9CTAKrWuAlx8",
]

[[audits.lazy-init]]
who = "\"niklasf\" (https://github.com/niklasf)"
criteria = [
    "negative",
    "level-medium",
    "trust-medium",
    "unmaintained",
]
version = "0.3.0"
notes = """
Unsound API due to a missing !Send bound, allowing data races in safe code.
Mitigated by the fact that most common uses will not expose this
vulnerability, but it is unacceptable for a crate whose entire purpose is to
provide safe synchronization primtives."""
aggregated-from = [
    "https://github.com/niklasf/crev-proofs#a0hN0qYwwDTmHtAchnTXiF-I_L9rK1KL5kgCmQoYR9o",
    "crev:review/ppehTWQRe3DxgYNfvfG92IpIe_gCS_OHqINXYzokflM",
]

[[audits.lazy_static]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
delta = "1.3.0 -> 1.4.0"
notes = """
1.4.0:  Read diff, looks fine.
1.3.0:  Read all of src, skimmed all of tests.  core_lazy.rs looks a little odd, but is 100% safe code - any issues would be in it's core dependency, spin.  inline_lazy.rs contains unsafe blocks... look safe, but downgrades rating to merely positive.  lib.rs is just safe macros.  Tests all pass.
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/urSBhG_KCPZv3NSOrnxp0IM4li9VB2rSUpxyV1UwoSU",
]

[[audits.lazy_static]]
who = "\"HeroicKatora\" (https://github.com/HeroicKatora)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.4.0"
notes = """
A bit puzzling that the inline implementation does not use `UnsafeCell`
directly but only through `Cell`. This adds a Sync impl which explicitely can
not exist for Cell itself. But the Once is enough to protect against races
even though there is no real benefit from using `Cell` over `UnsafeCell`.
"""
aggregated-from = [
    "https://github.com/HeroicKatora/crev-proofs#-sApEowWcAS9J0R7aO18cghvhLBpuMhyeUuWQq_fits",
    "crev:review/xk5jjm2LbV1sPN0UvpulC8BAOZ2qJ8bfM6UbEvwX-TA",
]

[[audits.lazy_static]]
who = "\"BurntSushi\" (https://github.com/BurntSushi)"
criteria = [
    "strong",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.4.0"
notes = """
The 1.4.0 release removes the hand-rolled unreachable hint in favor of
`unreachable_unchecked`, which was a new API introduced in Rust 1.27.
Otherwise, nothing substantial was changed, other than allowing some
deprecated APIs to support older versions of Rust.
"""
aggregated-from = [
    "https://github.com/BurntSushi/crev-proofs#VylyTuk8CMGqIxgHixWaqfiUn3xZyzOA1wFrQ0sR1As",
    "crev:review/91OpVGK1oe9QEMqD4V_kLidMOYXkOjvhP7CYmIDeHJ4",
]

[[audits.lazy_static]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.3.0"
notes = "Read all of src, skimmed all of tests.  core_lazy.rs looks a little odd, but is 100% safe code - any issues would be in it's core dependency, spin.  inline_lazy.rs contains unsafe blocks... look safe, but downgrades rating to merely positive.  lib.rs is just safe macros.  Tests all pass."
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/PVYPQs8C5BZsyR764hL50_kXI9YJetm22uPLOY-MAsM",
]

[[audits.lazy_static]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "strong",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.2.0"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/avYh-D212glMEC4_2IdFF6XkzIV9z1gqseogDUOveu4",
]

[[audits.lazycell]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
delta = "1.2.0 -> 1.2.1"
notes = """
https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/lazycell.md#1.2.1
Appears quite high quality, only the minimum necessary amount of unsafe code used.
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/99n1uFUThtXOI5hccK2yOI24vAOCR8PcqeSqY1jE0DM",
]

[[audits.lazycell]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "1.2.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/miGB8LseS4Pe-W7j-fmwD8MOwEOWLZqqKgQuCjjMctY",
]

[[audits.lazycell]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.2.0"
notes = """
https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/lazycell.md#1.2.0
Appears quite high quality, only the minimum necessary amount of unsafe code used.
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/aFspiGVpuspqS1xJxz5eLultKIaKSkAJLXdH9bL6mdg",
]

[[audits.lazyonce]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "neutral",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
    "unmaintained",
]
version = "1.0.0"
notes = "Obsolete"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/Ki7tQm9oAsJPMoabtkWYtIl-99Ib8py_odbhM7FnLEk",
]

[[audits.lazyonce]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "neutral",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.3.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/4cY73kqNg7fsdMEUQIBMPV5WlaHYCJMGLlG9IPLdmSc",
]

[[audits.lcms2]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "5.1.4"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/pBV1Ek5OTxPYElyN04V5pg0wJ3eXceVAxJZIISxu0qs",
]

[[audits.lcms2-sys]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "2.4.8"
notes = "Depends on a ton of C code"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/Im92_7wzfXFY82CpOPu_K1NKSBlMht8ZAi-5bTHplWk",
]

[[audits.leb128]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.2.4"
notes = """
Encode/decode DWARF's variable length integer format, LEB128

Pros:
- `Apache-2.0 OR MIT`
- Good test coverage
- Lean

[Full Audit]

[Full Audit]:   https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/leb128.md"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/mSNOznbJ8fpZWdeia_4rQffz4V8sU8jb95WDD9N4QXQ",
]

[[audits.legion]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "negative",
    "level-low",
    "trust-medium",
]
version = "0.1.1"
notes = '''
A low-boilerplate, high performance [archetype] based ECS.

Pros:
* Archetypes
* Low boilerplate
* MIT Licensed

Cons:
* Widespread use of 16-bit values is begging for overflows
* Some O(N) patterns I dislike, fortunately with small C.
* Not MIRI friendly in even the most trivial of examples.
* Difficult-to-vet unsafe code, strongly suspect some unsound.
* Omnipresent low-value logging
* Tons of dependencies (89)

0.1.1
=====

| crev  |   |
|-------|---|
| thoroughness  | medium
| understanding | low (thanks to use of unsafe)
| rating        | negative

| File                                          | Rating | Notes |
| --------------------------------------------- | ------ | ----- |
| benches/allocation_stress.rs                  | +1 | No global side effects, no black box use...?
| benches/pos_vel.rs                            | +1 | No global side effects, no black box use...?
| examples/hello_world.rs                       | +1 | |
| [src/borrows.rs](src/borrows.rs)              | +1 | API lock design concerns me... and I suspect this relies on [stable_drop_order] to avoid aliasing violations.
| [src/lib.rs](src/lib.rs)                      | -1 | Difficult to vet unsafe.  Some O(N) and overflow concerns.
| [src/query.rs](src/query.rs)                  | -1 | Difficult to vet unsafe.
| [src/storage.rs](src/storage.rs)              | -1 | Tons of difficult-to-vet UnsafeCell use that leaks some of it's unsafety out to other files.
| tests/query_api.rs                            | +1 | |
| tests/world_api.rs                            | +1 | |
| .cargo_vcs_info.json                          | +1 | |
| .cargo-ok                                     | +1 | |
| .gitignore                                    | +1 | |
| .travis.yml                                   | +1 | caching cargo might be a bad idea IME
| bench.png                                     | +1 | |
| Cargo.toml                                    | +1 | MIT
| Cargo.toml.orig                               | +1 | MIT
| LICENSE                                       | +1 | MIT
| readme.md                                     | +1 | |

| Other     | Rating | Notes |
| --------- | ------ | ----- |
| unsafe    | -1 | Lots of hard to reason about unsafe.
| miri      | -1 | Trivial use chokes up miri.
| fs        | +1 | |
| io        | +1 | |
| docs      | +1 | |
| tests     | +1 | |

src/borrows.rs
--------------
| Line  | What                      | Notes |
| -----:| ------------------------- | ----- |
| 17    | Borrow::aquire_read       | Possible race condition source.  Attempts to increment if >= 0.  Theoretically could livelock if sufficiently contested, shouldn't in practice.
| 33    | Borrow::aquire_write      | Possible race condition source.  Attempts to go from 0 => -1.
| 43    | Drop for Borrow           | +1
| 57    | Borrow*ed*                | Safe from aliasing violations by virtue of [stable_drop_order] ?  Cannot drop `Borrow` before `value` lifetime has ended.
| 92    | PartialEq for Borrowed    | 'b lifetime unused...?
| 98    | Eq for Borrowed           | 'b lifetime unused...?
| 128   | Borrow*ed*Mut             | Safe from aliasing violations by virtue of [stable_drop_order] ?  Cannot drop `Borrow` before `value` lifetime has ended.
| 177   | BorrowedSlice             | Safe from aliasing violations by virtue of [stable_drop_order] ?  Cannot drop `Borrow` before `value` lifetime has ended.
| 220   | BorrowedMutSlice          | Safe from aliasing violations by virtue of [stable_drop_order] ?  Cannot drop `Borrow` before `value` lifetime has ended.
| 269   | BorrowedIter              | Safe from aliasing violations by virtue of [stable_drop_order] ?  Cannot drop `Borrow` before `value` lifetime has ended.
| EOF   | | |

src/lib.rs
----------
| Line  | What                              | Notes |
| -----:| --------------------------------- | ----- |
| 1     | Lib doc comments                  | +1
| 254   | WorldId                           | Only 16-bit world IDs? I could see this overflowing in practice, especially if using the advertized ability to stream stuff in.
| 264   | ArchetypeId                       | Only 16-bit chunk IDs? Also, poor alignment.
| 281   | Entity                            | Standard dual generation index, I approve... although hot entity IDs could overflow in practice?
| 310   | Universe::logger                  | Not entirely sure I'm a fan of this.
| 365   | ComponentIndex & friends          | These Indexes should be used earlier when defining WorldId etc....
| 409   | impl EntityBlock                  | +1
| 431   | EntityBlock::in_range             | Slightly bogus u32 cast - EntityBlock::new should enforce u32 size if you want a u32 len...
| 498   | impl EntityAllocator              | Full of O(N/1024) operations that could be O(1).  Chunking is fine, but this really should abuse the fact that BLOCK_SIZE is constant more instead of looping.
| 517   | EntityAllocator::create_entity    | A better allocation strategy (IMO) would be to always start with the block we last allocated from.  Will have degenerate behavior if we're constantly freeing/allocating from the first block.
| 625   | World::merge doc comment          | Concerning, implies API is unsound
| 638   | World::merge                      | `unsafe { ... }` - I *think* this might be sound thanks to `&mut self` implying we have exclusive access to self.archetypes[?].chunks()[?].entities()
| 719   | World::insert                     | `unsafe { ... }` - I *think* this might be sound thanks to `&mut self` implying we have exclusive access to self.archetypes[?].chunks()[?].entities()
| 720   | World::insert                     | `unsafe { ... }` - I *think* this might be sound thanks to `&mut self` implying we have exclusive access to self.archetypes[?].chunks()[?].entities()
| 805   | World::entity_data_mut            | `unsafe { ... }` - I *think* this might be sound thanks to `&mut self` implying we have exclusive access to self.archetypes[?].chunks()[?].entities()
| 841   | World::prep_archetype             | `unsafe { ... }` - Probably sound - index should be valid - but why not just `.map(|(_, a)| a)` instead of using an index?
| 1016  | EntitySource for IterEntitySource | `unsafe { ... }` - I *think* this might be sound thanks to `&mut Chunk` implying we have exclusive access to chunk.entities()
| EOF   | | |

src/query.rs
------------
| Line  | What                                  | Notes |
| -----:| ------------------------------------- | ----- |
| *     | PhantomData<T>                        | Frequently used when T is already used in the struct, I'm concerned I'm missing something.
| 196   | impl View for (...) validate()        | `unsafe { ... }` - `0 <= i < j < types.len()`, so both calls to get_unchecked should be sound.
| 276   | std::ops::Not for Passthrough         | Oooh, operator overloading abuse.  Probably fine?
| 1065  | impl Iterator for ZipEntities next    | `unsafe { ... }` - Sketchy, assumes data.len() <= entities.len() and that's not a particularly trivial assertion to prove.
| 1088  | ChunkView::entities                   | `unsafe { ... }` - NFI if this is sound or not.
| EOF   | | |

src/storage.rs
--------------
| Line  | What                                      | Notes |
| -----:| ----------------------------------------- | ----- |
| 19    | StorageVec<T>                             | UnsafeCell!  Oh no.
| 39    | unsafe fn StorageVec::data_mut(&self)     | Because this doesn't take `&mut self`, this forces the caller to enforce borrow checking manually.
| 47    | ComponentStorage::remove for StorageVec   | `unsafe { ... }` - I *think* this might be sound thanks to `&mut self`
| 52    | ComponentStorage::len for StorageVec      | `unsafe { ... }` - Unsound?  It's not clear what, if anything, ensures len() isn't being mutated by another borrower.
| 104   | unsafe fn Chunk::entities_unchecked       | Because this doesn't take `&mut self`, this forces the caller to enforce borrow checking manually.
| 126   | unsafe fn Chunk::entity_data_unchecked    | +1?
| 141   | unsafe fn Chunk::entity_data_mut_unchecked| Ditto.
| 157   | Chunk::entity_data                        | `unsafe { ... }` - Unsound?  "Locks" via borrow types *after* constructing `&T`, which is too late.
| 174   | Chunk::entity_data_mut                    | `unsafe { ... }` - Unsound?  "Locks" via borrow types *after* constructing `&mut T`, which is too late.
| 199   | Chunk::shared_data                        | `unsafe { ... }` - NFI if this is sound or not.  Haven't groked why SharedComponentStore is UnsafeCell or what protects it, if anything.
| 212   | Chunk::remove                             | `unsafe { ... }` - I *think* this might be sound thanks to `&mut self`
| EOF   | | |

Miri Example
------------
```rust
use legion::prelude::*;

[test] // PREPEND YOUR OWN POUND SIGN
fn test() {
    let universe = Universe::new(None);
    let mut world = universe.create_world();
    world.insert_from((), vec![(1i32,)]);
}
```

```cmd
rustup toolchain install nightly-2019-09-11
rustup component add miri --toolchain=nightly-2019-09-11
cargo +nightly-2019-09-11 miri test
```

```
error[E0080]: Miri evaluation error: trying to reborrow for SharedReadWrite, but parent tag <126591> does not have an appropriate item in the borrow stack
    |
    = note: inside call to `<legion::IterEntitySource<std::vec::IntoIter<(i32,)>, (i32,)> as legion::EntitySource>::write` at C:\Users\Mike\.cargo\registry\src\github.com-1ecc6299db9ec823\legion-0.1.1\src\lib.rs:716:29
    = note: inside call to `legion::World::insert::<(), legion::IterEntitySource<std::vec::IntoIter<(i32,)>, (i32,)>>` at C:\Users\Mike\.cargo\registry\src\github.com-1ecc6299db9ec823\legion-0.1.1\src\lib.rs:689:9
note: inside call to `legion::World::insert_from::<(), std::vec::Vec<(i32,)>>` at src\lib.rs:7:5
    --> src\lib.rs:7:5
     |
7    |     world.insert_from((), vec![(1i32,)]);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
note: inside call to `test` at src\lib.rs:4:1
    --> src\lib.rs:4:1
     |
4    | / fn test() {
5    | |     let universe = Universe::new(None);
6    | |     let mut world = universe.create_world();
7    | |     world.insert_from((), vec![(1i32,)]);
8    | | }
     | |_^
```

TIL
---
* `TypeId::of::<T>()`



[stable_drop_order]:    https://github.com/rust-lang/rfcs/blob/master/text/1857-stabilize-drop-order.md
[Unity]:                https://unity.com
[archetype]:            https://github.com/SanderMertens/ecs-faq#what-is-an-archetype-based-ecs
'''
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/6bfw_Y8UqtobQkGldLWwKMRoD8yFmYQRs0cFBEGUIK0",
]

[[audits.lexopt]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
delta = "0.1.0 -> 0.2.0"
notes = """
The diff from 0.1.0 doesn't contain anything suspicious. Still no `unsafe`.

The issues I mentioned in my previous review were all addressed.

I now consider this library mature enough to be used in production (in my
case, Newsboat)."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/jtICZSpMqkgmtvuOiEj9-ugs_xJGaiyxncbis31Vyyw",
]

[[audits.lexopt]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.1.0"
notes = """
No `unsafe`, no dependencies except std. About 1KLOC.

Tries hard not to convert `OsString`s into `String` unless absolutely
necessary. I didn't review the Windows/UTF-16 bits, but everything else looks
tidy enough.

This is just the first release, so some bits are inconsistent. I reported them:
- https://github.com/blyxxyz/lexopt/issues/5
- https://github.com/blyxxyz/lexopt/issues/6

They aren't flaws, but they do indicate that the library is not yet mature
(to no-one's surprise)."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/0rVCX-lR7eO2a0w7l2X-pfsb5xPNbbEkDDF1HO2QhS4",
]

[[audits.lfs]]
who = "\"chrysn\" (https://gitlab.com/chrysn)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.5.3"
aggregated-from = [
    "https://gitlab.com/chrysn/crev-proofs#bYdCa4xhd5VL4dlcVPBxV51PrW5joFp9U04rKgcTvk8",
    "crev:review/kJWX4rYp74u6BDNFQfswmI9W-Ji810DhMkzli-Iwb4Y",
]

[[audits.lfs-core]]
who = "\"chrysn\" (https://gitlab.com/chrysn)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.3.1"
aggregated-from = [
    "https://gitlab.com/chrysn/crev-proofs#bYdCa4xhd5VL4dlcVPBxV51PrW5joFp9U04rKgcTvk8",
    "crev:review/SK1_tt-uPLUIBnaqFYlBKDewynFj9fNLYUshWEYXJf4",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.138 -> 0.2.139"
notes = """
Compared to 0.2.138, the bulk of the changes are support for new `target_os`,
`nto`, which is QNX/Neutrino. I glanced through them, they seem to have the
right shape. The rest of the changes are the usual: new constants and new
function declarations. The only interesting bit there is a new
`KERNEL_VERSION` function which emulates the eponymous macro; it returns the
kernel version, limiting the patch version to 255 (for compatibility).

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/UgIrOrPAN9kQtHi6C68W-XJXTZBsEoG7jE-iOxMz9BM",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.137 -> 0.2.138"
notes = """
Compared to 0.2.137, this version adds some new constants and bindings. The
only interesting bit is two new wrappers in unix::solarish::compat module
that wrap `getpwent_r` and `getgrent_r` functions in such a way that calls
don't modify `errno`. The wrappers look solid to me.

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/ltAZakimt3qhQoLaDkFY5foWvTSZGj82_GNTc4zv0nM",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.136 -> 0.2.137"
notes = """
Compared to 0.2.135, this version un-deprecates recvmmsg() flags deprecated
by the previous version. It also adds a few constants for madvise(), and
function declarations for dirname() and basename().

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/m9CpEEHpDIApXFqK8nEfDgtVVWG47j2mhC6V4A_R6E4",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.135 -> 0.2.136"
notes = """
Compared to 0.2.135, this version adds more constants, more structs, and more
function declarations. It also deprecates some of recvmmsg() flags, and adds
Apple tvOS as a target to some of Apple calls.

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/yhlO_CLhC2kBlnZUti6k5GI5cV7IqpmARpOJ3CfUFiA",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.134 -> 0.2.135"
notes = """
Compared to 0.2.134, this version adds more consts and function prototypes --
nothing suspicious.

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/M8QXk2KelD4XsYQ-yRbLGdmJUHkEskFH3k33eONwgVo",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.133 -> 0.2.134"
notes = """
Compared to 0.2.133, this tiny update only adds a couple new function
prototypes and a few new constants.

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/Ln_2Xeedx_Mg53rA7HevpZLqWx9CbzW2CCJrPBjtzmg",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.132 -> 0.2.133"
notes = """
Compared to 0.2.132, this version adds some new types, structs, consts, and
function prototypes. It also deprecates some constants on FreeBSD.

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/CO2003MMMYT3mGS0EawQj3NiSQL-kMV-mBwagYCURyA",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.131 -> 0.2.132"
notes = """
Compared to 0.2.131, this version fixes one constant, adds another, and
provides one new function signature. That's it.

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/YtYxnmZ6tMEK6L2ZFuLddCYWN7aFzDcGWfK3N-IWXok",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.127 -> 0.2.131"
notes = """
I'm again rolling two releases into a single review because 0.2.130 was
yanked from crates.io for unknown reason.

Compared to 0.2.129, this version only adds a couple functions for GNU/Linux,
and fixes a type of a constant for Unix newlib. Nothing major at all.

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/UI81vBpWpIzPGVIEC7msVKgYNHHxu-YGhMFAu-GmNC0",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.127 -> 0.2.129"
notes = """
I'm rolling two crate releases into a single review because 0.2.128 was
yanked: https://github.com/rust-lang/libc/issues/2866

Compared to 0.2.127, this release just adds some new sructs, consts, and fn
prototypes. It also shuffles around the code responsible for linking on
Android, and adds a workaround for *pintf functions on Windows when linking
with MSVC. All looks okay to me.

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/kn01ZCKd44UKoVY0ajd8TC7DFPzt1h88ynxKuv0COno",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.126 -> 0.2.127"
notes = """
Compared to 0.2.126, this release is just bookkeeping. A bunch of new
constants and functions were added, some fixes were applied to existing ones,
and some code was reformatted.

The problem with struct field missing from the `Hash` impl that I mentioned
in my previous review has been fixed, too.

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/ti0dGjEeYEBq6b3G7mwLuj24UvMVwT2XpbdT61ImGDw",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.125 -> 0.2.126"
notes = """
Compared to 0.2.125, this is just usual churn. I found a place where a struct
field is used in `PartialEq` but not `Hash`; I asked the author to check if
that's correct: https://github.com/rust-lang/libc/pull/2748/files#r880853330
Other than that, this looks solid.

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/QlkvcnSW1gFugv86kqTjtPKlfVLuoTaZcFQ230c6Z9Y",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.124 -> 0.2.125"
notes = """
Compared to 0.2.124, this release adds more constants, structs, and function
prototypes, plus some support for LoongArch (MIPS-like CPUs from a Chinese
company Loongson).

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/ctdQ15OrMDPatrjz3FAiZ4IrT-oldRqQKNT5cNagsxY",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.123 -> 0.2.124"
notes = """
Compared to 0.2.123, this release adds more constants, structs, and function
prototypes. The only interesting bit is `si_addr` and `si_value` methods for
`siginfo_t` on uclibc Linux: they use type punning to interpret `siginfo_t`
payload differently. They look fine to me.

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/a0vrqGHSAYjsrebE4cEIJEJTE6ei6sOVfJ3kRzRMOE0",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.122 -> 0.2.123"
notes = """
Compared to 0.2.122, this release only adds a couple constants and function
signatures.

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/w-N2OuO4zKEuKMleUXgDvlfN3YQrszhUwRUL-E12Lhg",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.121 -> 0.2.122"
notes = """
The major change in this release is partial support for __int128 (and similar
types) for aarch64 platforms. As usual with libc, the actual code is
dead-simple; the actual work--verifying that rustc's representation matches
platform's--was done elsewhere. Looks okay to me.

And then there's the usual churn of function declarations and new constants.

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/euggpAF-QATqQHzWUJP4CyZ5ODzfC-Y3PLQ07Wd7W4s",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.119 -> 0.2.121"
notes = """
Compared to 0.2.119, this mostly contains the usual churn: more function
prototypes, some changes to attributes, typo fixes. The only interesting bit
is updates to `siginfo_t` on Solarish, where Unix signal payload is now
handled more intelligently. It's admittedly unfinished, but looks okay to me.

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/ywfX0cwPKVNzvkT71DmnpER5oN0QNNHnmyY11u1YxXU",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.118 -> 0.2.119"
notes = """
Compared to 0.2.118, this version only adds a few lgrp_* functions for
Solaris-like systems, and a constant on Apple AArch64.

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/fBicI3cwb9BCTJSERl5ujfB7KpxuFDhevcuL7mAEgdg",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.117 -> 0.2.118"
notes = """
Most of the additions compared to 0.2.117 are related to System V contexts
support. There are also a bunch of new constants, a few new functions, and
a couple typo fixes. Nothing stands out to me in this release.

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/-Axcc-s-SGqE6RUae5ficiTnHVzAEFFIw13k4rB9Xf4",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.116 -> 0.2.117"
notes = """
Compared to 0.2.116, this version removes the \"How to apply the Apache
license to your work\" appendix from the LICENSE file, and adds a bunch of
constants for Android and musl. Nothing hairy.

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/m4OeXuWB4c2hhUsk1jVNvIe6yf1DYP-F7j7_i8i6hAk",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.115 -> 0.2.116"
notes = """
Compared to 0.2.115, this version is mostly about ARMv6K Nintendo 3DS
support, but it also adds a number of new constants and a couple functions.
Nothing scary.

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/JHt_koQrxt0veOlFa96TeA2ikJKccz0vfjCLMz4lv1o",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.114 -> 0.2.115"
notes = """
Compared to 0.2.114, this version adds one new constant, a couple new types,
and a few new structs. Looks legit.

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/gUwxB6G0cEtWRlMuAW-HUnzkbFSnrpzyW-4n7MBUk2c",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.113 -> 0.2.114"
notes = """
The diff from 0.2.113 only shows the usual churn: some constants got moved,
some functions got added, and one macro got fixed.

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/oVtx8pTI_A-8DDiWlLV89BLnS-dfKxhtWuzSD-BYPQs",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.112 -> 0.2.113"
notes = """
The diff from 0.2.111 reveals nothing malicious, just the usual churn.

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/Wey_cSRM0aTz53IKCbf5pJ4vONO_SlCnW4c8OPNoAf4",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.111 -> 0.2.112"
notes = """
The diff from 0.2.111 reveals nothing malicious.

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/NgDN46qcSRWGbjOZFDYrL3tLSI8JelyEUTGkZrgZ30I",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.110 -> 0.2.111"
notes = """
The diff from 0.2.110 is minuscule: just some BSD functions moved around, and
a new linker dependency added for FreeBSD.

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/xyNB6Bt43iC9UcWrworbzYJAxXlVc01l1DGjKTNjGbU",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.109 -> 0.2.110"
notes = """
The diff from 0.2.109 contains all the usual stuff: some new FreeBSD work,
some deprecation removals, plus a bit of new misc stuff. Nothing malicious
as far as I can tell.

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/EfTbGRmpT9cnCMrayXVVt5UicNObU5slhOrtp__ppRE",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.108 -> 0.2.109"
notes = """
The diff from 0.2.108 shows nothing malicious.

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/9SWCHU2FAO1PfJoFw3oFS_dRh279RmsLWvQaAGTBzLE",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.107 -> 0.2.108"
notes = """
The diff from 0.2.107 is large but boring. I didn't find anything malicious.

I *did* find a couple insignificant errors:
- https://github.com/rust-lang/libc/pull/2552#discussion_r754229773
- https://github.com/rust-lang/libc/pull/2545/files#r754246039

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/xhvIfE8NFf5GEAoAyy6pJ9_82CG5Zra_u2X5qrW99Lc",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.106 -> 0.2.107"
notes = """
The diff from 0.2.107 doesn't contain anything unusual or malicious.

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/A1Bv5Pw9RFdD-J9cUBo-1UQCLSmVQSpJ6BTAD-hDBZc",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.105 -> 0.2.106"
notes = """
The diff from 0.2.106 reveals nothing unusual or malicious.  

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/MtN2qVsM2abWZpBmckZoixTAeRBV8_hU9hewTClSQgI",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.104 -> 0.2.105"
notes = """
The diff from 0.2.104 only contains the usual churn, nothing malicious. Some
new entries have doc comments, that's unusual for this crate :)

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/58h5YisJh3KJNa9QYtD8lD0Lgu81EmET-US--X1Qrjc",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.103 -> 0.2.104"
notes = """
Half of the diff since 0.2.103 is bindings for the new rustc target, SOLID.
The other half is the usual: more constants, some more bindings.

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/9akmTGcSoKpT3KUzmwF6V7CyXt9T3fCjR4dS_wmip3A",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.102 -> 0.2.103"
notes = """
The diff from 0.2.102 doesn't reveal anything malicious.

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/5bsTRTzW7ytNwpVeCY0DPndUN0DFR_AFSwWjnpCMSyA",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.101 -> 0.2.102"
notes = """
The diff from 0.2.101 doesn't show anything malicious.

Funny typo: \"errnoeously\". Not worth reporting and fixing upstream, I think.

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/RGDV5fDw5NvuJMurYQOljfkUpF_HMylN72lHH-qSS4s",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.100 -> 0.2.101"
notes = """
The diff from 0.2.100 doesn't show anything malicious.

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/T5hPfBNQCwSVGFKvSiFOiB-VyQrqN89F6tJ6S4RolMg",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.99 -> 0.2.100"
notes = """
The diff from 0.2.99 doesn't show anything malicious.

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/0Aw55RjSGp8Kr2voc8mVz-w0lvrGPEBEb-Thok9P5CY",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.98 -> 0.2.99"
notes = """
The diff from 0.2.98 doesn't reveal anything malicious. I found a couple
typos though, and submitted a PR to fix them:
https://github.com/rust-lang/libc/pull/2330

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/Mo0QIiU7Hl_GxNVZNQmhdotTYHvLGKvTwLGm5wYbRac",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.97 -> 0.2.98"
notes = """
The diff from 0.2.97 doesn't reveal anything suspicious.

As usual, \"thoroughness\" for this review is \"low\" because I didn't manually
check that the bindings match the headers — I trust that the CI checked that
already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/I_T-8EXLM6fei2X8mQ4meyefnOVFL42raSia-oyNLyQ",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.96 -> 0.2.97"
notes = """
Compared to 0.2.95, there are two new functions (mallinfo2 and mstats) along
with their respective structs, and one new constant (AF_VSOCK).

Nothing fancy. As usual, \"thoroughness\" for this review is \"low\" because
I didn't manually check that the bindings match the headers — I trust that
the CI checked that already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/WLoZMuY_J9qF9Zzf0Y_nU0iM76iM4DM2ToEgX__KfmI",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.95 -> 0.2.96"
notes = """
Delta from 0.2.95 doesn't show anything malicious, just the usual stuff: more
bindings, more constants, more types.

This looks fine. As usual, \"thoroughness\" for this review is \"low\" because
I didn't manually check that the bindings match the headers — I trust that
the CI checked that already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/aJ-rIdim97t7FxPBycAsYPsZXzOj21fEbFPU4dgnKRM",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.94 -> 0.2.95"
notes = """
Delta from 0.2.94 reveals nothing unusual: add new bindings, add new
constants, move some code around, and undo a macOS-related hack that
I committed earlier. Some FIXMEs were added too, but their comments don't
sound urgent.

This looks fine. \"Thoroughness\" for this review is \"low\" because I didn't
manually check that the bindings match the headers — I trust that the CI
checked that already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/_cs81576wUYCS9Vkdu7VWajQwxelb41bDDWIk9VZ-l0",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.93 -> 0.2.94"
notes = """
Delta from 0.2.93 moves some TCP-related constants around, adds
RLIMIT_NLIMITS constant, and provides a few new function bindings.

This looks fine. \"Thoroughness\" for this review is \"low\" because I didn't
manually check that the bindings match the headers — I trust that the CI
checked that already."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/rZXGDipKrHmOYsZ5lzWT1SG2By5UVE60-UNJ6ob46cM",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.92 -> 0.2.93"
notes = """
Delta from 0.2.92 consists mostly of two things: formatting changes, and
modularisation of some architecture-specific constants for Linux.

Packing was disabled for `arphdr` and `in_addr` on NetBSD. The commit message
sounds convincing to me
(https://github.com/rust-lang/libc/commit/ec13c82bc93070dfe1d81a359174e0495edfe487).

There's also a hint at a new CI machinery that'll ensure the crate doesn't
break semver.

Overall this looks fine to me. As usual, I rely on the project's CI to check
that the bindings match C, hence \"thoroughness\" is low."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/aiYyRf3dDkNKkVZ-r4nIsB7PhgqWB4Cp6wd-M_YchC0",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.91 -> 0.2.92"
notes = """
Delta from 0.2.91 mostly moves code around by adding `const` annotations. It
also introduces one new bindings (pwrite64). Nothing suspicious. As usual,
I rely on the project's CI to check that the bindings match C, hence
\"thoroughness\" is low."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/HCuYW5xWwB6_YhZtdqvLdGLqTBymdHyzNiZlL7pa414",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.90 -> 0.2.91"
notes = """
Delta from 0.2.90 only adds a single constant to a couple modules and edits
some docs. Looks okay to me. (As usual, I rely on the project's CI to check
if the constant is correct, hence \"thoroughness\" is low)."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/rpFYHERizwYm3i2LBZKaXdwQA2iVQyZO4Uqhxnr3FcU",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
delta = "0.2.89 -> 0.2.90"
notes = """
I checked that the delta from 0.2.89 doesn't add any suspicious code. It
indeed doesn't. I trust that ctest in the project's CI checked that all new
constants have the expected values, and that function signatures match C."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/i5yy0A4AAIwyQS4Pt23CUlPiXecVD5xesD7gS9qmlQg",
]

[[audits.libc]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.2.89"
notes = """
This crate contains unsafe bindings to platform-specific C functions. The
project has an expansive CI pipeline that runs ctest on Linux, macOS,
FreeBSD, and Windows. Where possible, the testing is done on multiple
architectures with different libc implementations.

Most of the crate is marked unsafe, but that's just the nature of the beast.

I only looked at one module, unix, so thoroughness is capped at \"low\".
However, the crate comes from the same people who build Rust itself, so this
doesn't affect the rating.

Given it's just a list of declarations, which are then automatically checked,
I'm fairly confident that this code does what it's supposed to do."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/ywbbGh6DNi4As6TsVa6ocb7Zj6X4FESaFy0Aor_ekDE",
]

[[audits.libpng-sys]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "neutral",
    "level-medium",
    "trust-high",
    "safe-to-run",
]
version = "1.1.3"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/KdpJBVCgmjO8QK7UvHjaTCxB-hEgTcI7Fm_ER3Q6LeU",
]

[[audits.libpng-sys]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "neutral",
    "level-low",
    "trust-high",
]
version = "1.1.0"
notes = "C code"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/jniY1ytl6MBDyfl9JsMo9y1ZDd65CbjsESujw9mVx6o",
]

[[audits.libwebp-sys]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.3.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/yCMpbs7LAf6Vs90Cmd1hlzICnVtTDtdnp5xuwNRdWpg",
]

[[audits.lightway-sys]]
who = "\"pmembrey\" (https://github.com/pmembrey)"
criteria = [
    "positive",
    "level-high",
    "trust-low",
]
version = "0.1.0"
notes = """
I'm the owner of this crate and wrote the originally C library that this binding is for.

This is a Rust binding based on [Lightway Core](https://github.com/expressvpn/lightway-core).

Lightway Core is publically audited as is embedded in this crate."""
aggregated-from = [
    "https://github.com/pmembrey/crev-proofs#_Y8MetA5kBAku0hT16qKcH2r0opSMQjUH-F1XUSrZW4",
    "crev:review/wFAzS-xQfZSwKmVOtEo88hkS1H8dAWEk09kZezZE8eg",
]

[[audits.linfa]]
who = "\"remram44\" (https://github.com/remram44)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.2"
notes = """
No content, just re-exports crate `linfa-clustering`.
"""
aggregated-from = [
    "https://github.com/remram44/crev-proofs#V_B2pKpHVBIp_NegKfur4MK9GqFo0o78ijhku90pYS0",
    "crev:review/b2dyM0p1ToZyquRk2OiCifPfMJ-dDoFR4AnQ-ZJJTyg",
]

[[audits.linfa-clustering]]
who = "\"remram44\" (https://github.com/remram44)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.1.0"
notes = """
Didn't check the algorithm, but checked there is no source of unsoundness or dangerous code.
"""
aggregated-from = [
    "https://github.com/remram44/crev-proofs#V_B2pKpHVBIp_NegKfur4MK9GqFo0o78ijhku90pYS0",
    "crev:review/FaddgdYCx94o9Nei9JJgX1A97_N8remcFU18kNqHoe8",
]

[[audits.link-cplusplus]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "strong",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
delta = "1.0.5 -> 1.0.6"
notes = """
This update removes an implicit dependency on std and declares MSRV of 1.34.
No changes to the actual code, so my review for 1.0.4 stands."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/RHKXuGUQs6woQNReLgyK9IcCTnHMlyhWb0q5UrmoIfQ",
]

[[audits.link-cplusplus]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "strong",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
delta = "1.0.4 -> 1.0.5"
notes = """
The delta since 1.0.4 only shows documentation changes. They also added
Clippy to the CI, which is nice.

No changes to the code, so my 1.0.4 review stands."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/ZT1muoiqux48QFo430ZpsJ6PCP6C2fct4jvfwqQRCyE",
]

[[audits.link-cplusplus]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "strong",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.4"
notes = """
Another tiny-yet-useful crate. Lets the users request which C++ stdlib they'd
like to link to. If nobody cares, or if there are conflicting choices, it
punts the choice to the \"cc\" crate which picks the platform default.

I don't see anything suspicious here, and don't see a way to trick this crate
into doing something bad, thus a strong rating."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/54nPOvwdayeHfE4NGF3uACX5W09fkz_9HPlG5xDHX80",
]

[[audits.load_image]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "2.12.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/0_vXQAfrNCl1IP2jAAaMY3FTd-tSKnvkaAPCLtUA5bM",
]

[[audits.lodepng]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "3.4.3"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/vnTH7DBXZVDseUAqiI7rBRE-FlNCjeQtSpB8UcBajls",
]

[[audits.log]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.4.6"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/Y9dI89ZH-ADGnixbCyASYgMlgu7VQjOvFjj_MHQlg1c",
]

[[audits.loop9]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/RIfgvBS4D_kBFhEJT5QDmh-GpnQEhiVnRP_tjKjyyBQ",
]

[[audits.lru-cache]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.1.2"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/oA1PGFaAt7-7t8ZAB-qhffDay38aVUbkHRPOWdmyAQ0",
]

[[audits.lts]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "strong",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.5"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/pAkQ7_pPLDW-4qu9PuCkJgiwPajz3aol1J2XXo9Pulk",
]

[[audits.lzw]]
who = "\"niklasf\" (https://github.com/niklasf)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.10.0"
notes = """
An implementation of LZW compression. Overall appearance is solid.

+ No unsafe code.
+ No unexpected panics. Indirectly fuzz tested by gif encoding crates like
  gif and gift.
- Appears to be unmaintained.
- Could use cleanups and performance optimizations.
- Small test suite. Could use more roundtrip tests."""
aggregated-from = [
    "https://github.com/niklasf/crev-proofs#a0hN0qYwwDTmHtAchnTXiF-I_L9rK1KL5kgCmQoYR9o",
    "crev:review/WG_I8WwDyTHV7wJtTvvGPjwtsSaNYzWpvafdm1LGkLc",
]

[[audits.lzw]]
who = "\"icefox\" (https://git.sr.ht/~icefox)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.10.0"
aggregated-from = [
    "https://git.sr.ht/~icefox/crev-proofs#lr2ldir9XdBsKQkW3YGpRIO2pxhtSucdzf3M5ivfv4A",
    "crev:review/ILDDHt4c9canIpSP5m13rlWUyt3a0LDnsrMb7qI7U0E",
]

[[audits.macro_rules_attribute]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.0.1"
notes = """
Utility crate... LGTM!
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/F2e7RvGzxWVLiOUtd03on1ogpYKpDB9rupgF2gUE2Zo",
]

[[audits.macro_rules_attribute-proc_macro]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.0.1"
notes = """
Internal implementation detail crate of macro_rules_attribute.  Relatively trivial... LGTM.
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/1RIphbaMLkEQWYbCyw4elYqSv5OecKsXcAL138Bh3Zg",
]

[[audits.maimo]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "negative",
    "level-low",
    "trust-high",
    "unmaintained",
]
version = "0.0.3"
notes = "Warning: this is stolen code"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/iZsJXfpgqdTLVwDscWw4zk6W95CNGEp0owSLXVawqiE",
]

[[audits.malloc_buf]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "strong",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.0.6"
notes = """
This is a tiny wrapper over a raw pointer allocated by malloc; this crate
provides a slice-like interface and ensures that the pointer is free()d when
the wrapper is dropped.

This looks solid to me."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/eQZ2Tbe0BIQrt6V68NGxBBcxhiYVdCr9Aa9TwVcAowc",
]

[[audits.managed]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.7.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/qtS1Hbrhvlmax8JM5voQCr2UJaqx2kZVbgeNOStUR0M",
]

[[audits.map_in_place]]
who = "\"HeroicKatora\" (https://github.com/HeroicKatora)"
criteria = [
    "negative",
    "level-medium",
    "trust-high",
]
version = "0.1.0"
notes = """
Has unsoundness in a major, safe interface.

The main utility for Vec can reuse an allocation of differing element size
thus violating the explicit requirements of Vec::from_raw_parts and in
particular the allocator contract, potentially leading to memory corruption
on drop of the resulting Vec.

The interface affected are (maybe not complete):
  * `MapVecInPlace::map`
  * `MapVecInPlace::map_in_place`
  * `MapVecInPlace::filter_map`
  * `MapVecInPlace::filter_map_in_place`

An analysis of the code to show the issue:

In a macro, this code checks for various size and alignment constraints on
deciding whether to execute an in-place branch or a fallback (that may panic
in some variants).

  unsafe {
      if size!($a) == 0  ||  size!($b) == 0 {
          $zero
      } else if align!($a) != align!($b) {
          $alignment
      } else if $f(size!($a),size!($b)) {
          $incompatible
      } else {
          $ok
      }
  }

Already a naming issue appears, as the `$incompatible` branch is actually
taken when `f` returns `true` and some instantiation has `|a,b| a==b` as this
argument. Consequently, the `incompatible` parameter is filled with the
in-place branch in the `fallback` branch where the parameter is `$ok:expr`

Note that the check for `map` is `|a,b| a%b==0` and it invokes `$fallback`
with the `$ok:expr` argument set to `map_vec(self, f)` (note: the `f` here is
from the parameters of `map`). The `map_vec` function is an `unsafe` function
eventually doing the equivalent of

  let (ptr, len, cap) = /* The obvious */;
  // Some transformation code on `raw`.
  Vec::from_raw_parts(ptr, len, cap)

This violates very clearly the contract which states:

> `ptr`'s T needs to have *the same* size and alignment as it was allocated with
"""
aggregated-from = [
    "https://github.com/HeroicKatora/crev-proofs#-sApEowWcAS9J0R7aO18cghvhLBpuMhyeUuWQq_fits",
    "crev:review/VUkT0hBMYPhVJS_GkBPaKkeYLTdnDr6gvzas5uKeAIE",
]

[[audits.match_cfg]]
who = "\"kpcyrd\" (https://github.com/kpcyrd)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.1.0"
aggregated-from = [
    "https://github.com/kpcyrd/crev-proofs#ZGgmIacywCRKLa33k7W04VFcK-glDkcBXKG4oF7t--4",
    "crev:review/H10vG_LGKp04IFFH_B7OKQWqHSxTt5hqDoJDsz3XNwU",
]

[[audits.matches]]
who = "\"KonradBorowski\" (https://gitlab.com/KonradBorowski)"
criteria = [
    "strong",
    "level-medium",
    "trust-low",
]
version = "0.1.9"
notes = """
Does exactly what it's supposed to. For new projects it may make sense to
use matches! macro from standard library (https://doc.rust-lang.org/std/macro.matches.html),
but it's fine to use dependencies that use `matches` crate."""
aggregated-from = [
    "https://gitlab.com/KonradBorowski/crev-proofs#ZOm7om6WZyEf3SBmDC69BXs8sc1VPniYx7Nfz2Du6hM",
    "crev:review/epgHjDgGcpFYY8ZHLt8hiq05zoyE33g0iJgZa1Wi6yY",
]

[[audits.matches]]
who = "\"niklasf\" (https://github.com/niklasf)"
criteria = [
    "strong",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.8"
notes = """
Straight forward utilities. The matches! macro is now part of the standard
library."""
aggregated-from = [
    "https://github.com/niklasf/crev-proofs#a0hN0qYwwDTmHtAchnTXiF-I_L9rK1KL5kgCmQoYR9o",
    "crev:review/IcQ5BYcz4eK_NugJhNY4J1a5_w9IDj6kQh28S4n9BCw",
]

[[audits.matches]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.8"
notes = "Trivial, looks correct, looks tested.  cfg!(debug_assertions) is a sane cfg."
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/6NIXektcCk2b_497S-Pf8ZSF-Y1CTbx3gq3xkre3ztw",
]

[[audits.memalloc]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "negative",
    "level-medium",
    "trust-medium",
]
version = "0.1.0"
notes = """
API design is super brittle.  Returning uninitialized memory seems like UB-bait.

Detail
======

| File                                          | Rating | Notes |
| --------------------------------------------- | ------ | ----- |
| [src/lib.rs](src/lib.rs)                      | -1    | Soundish, but unsafe as heck APIs.
| .cargo-ok                                     | +1    | |
| .gitignore                                    | +1    | |
| .travis.yml                                   | +1    | |
| Cargo.toml                                    | +1    | |
| README.md                                     | +1    | |

| Other     | Rating | Notes |
| --------- | ------ | ----- |
| unsafe    | -1 | Soundish, but unsafe as heck API design.
| fs        | +1 | None
| io        | +1 | None
| docs      | +1 | |
| tests     | +1 | |

src/lib.rs
----------
| Line  | What  | Notes |
| -----:| ----- | ----- |
| 23    | allocate      | This looks like it returns uninitialized memory (only sizes capacity not actual size).  UB bait.  Unaligned.
| 38    | reallocate    | Minimal debug checks, constructs Vec from_raw_parts with size when the real vec had size 0.
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/q-1bQJf_xyeJtqCwH4CGJx9Kl9UXWW325pXtCVCuWKU",
]

[[audits.memchr]]
who = "\"BurntSushi\" (https://github.com/BurntSushi)"
criteria = [
    "strong",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "2.2.1"
notes = """
I wrote this crate, so this review is a reflection as a result of writing
the code and then reviewing it again for this review.

The entire purpose of the memchr crate is to do this:

    haystack.iter().position(|&b| b == needle)

... but really fast. As a result, this crate uses SIMD via CPU specific
vendor intrinsics. Consequently, there is a lot of unsafe code in this
crate. There is really no way to avoid this, other than perhaps using a
higher level platform independent SIMD API. But no such thing of sufficient
quality exists for stable Rust at the time of writing.

The testing strategy is the most important bit here. In particular, every
public API item is tested using a permutation of tests that exercise all
possible alignments found in a haystack. (Because the implementations used
aligned loads/stores, which are only correct if the address arithmetic is
correct.) Additionally, there are quickcheck tests that act as a sort of
fuzzer guaranteeing that the implementation is correct for a range of inputs.

I gave the highest rating possible because of the extensive use this crate
has seen, in addition to its level of testing. In particular, memchr
underlies a significant chunk of all text search in the Rust ecosystem.
"""
aggregated-from = [
    "https://github.com/BurntSushi/crev-proofs#VylyTuk8CMGqIxgHixWaqfiUn3xZyzOA1wFrQ0sR1As",
    "crev:review/fO-305XYZLC20K-i7PSnom2AR5gyycraIl1M2B-4ZK8",
]

[[audits.memoffset]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.6.5"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/Bpl0jF0TGzyEKDj8RSCAtQe3IPpFnfzOB7x3I_bJBIE",
]

[[audits.microbench]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.5.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/qsz6bRvcnyG0k4b70VuoixsYJzibc6HH5M1fTVGikDw",
]

[[audits.mime]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.3.16"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/I6hYojQrburIeInRHSPERx4TqbPziEX8lUQTnin13nY",
]

[[audits.mime_guess]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "2.0.0-alpha.6"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/tL-ZVWyTiM9KAWy4rXSsXF-QTy5roKFpfA86xkiMEbo",
]

[[audits.mimesniff]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.3.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/JKTIW02L9z80Jr94kt2loiOcuZnVt56CCW22ZWF2pHA",
]

[[audits.minicbor-ser]]
who = "\"oh-wind\" (https://github.com/oh-wind)"
criteria = [
    "positive",
    "level-medium",
    "trust-low",
]
version = "0.1.3"
notes = "I'm the author. minicbor-ser is based on minicbor and serde, and provides semantic version guarantees."
aggregated-from = [
    "https://github.com/oh-wind/crev-proofs#P-9O_LdWejw2bT2w2oERVsS9K96qVa3Puils4Ian9Zc",
    "crev:review/F02lZe4QMsVvxsQ1NqNlrVJa2a2WnKGNNHtEcskSvU0",
]

[[audits.minimad]]
who = "\"Canop\" (https://github.com/Canop)"
criteria = [
    "positive",
    "level-high",
    "trust-low",
]
version = "0.3.4"
notes = "As the author I feel positive enough to say this is a good quality crate - but the very limited set of features restricts its direct usage to very specific cases"
aggregated-from = [
    "https://github.com/Canop/crev-proofs#FBkykBV6YaqAaGoUXyvd-XkEqDYxQNM7EUnZ2nuy-XQ",
    "crev:review/TpB_eW8RjYMl5F4t0kndeqVPkrqYjbgTzQWiaYjE2-M",
]

[[audits.miniquad]]
who = "\"ozkriff\" (https://github.com/ozkriff)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.3.0-alpha.37"
notes = "Great minimalistic library for its purpose. Though atm contains a couple of unsafe blocks in its executor that could lead to UB if used from multiple threads."
aggregated-from = [
    "https://github.com/ozkriff/crev-proofs#LkfCl08m1q4xcjAQ0KV-t0uTsxu61my6IfzF8O5IJ-8",
    "crev:review/8jTzO-i3KDqn5FS2QPWjY7EucBYHHZtaUf2o4VlmQ78",
]

[[audits.miniz_oxide]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.4.2"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/ODYeg__tF1bLvYNmzGhhFPR0ezBA0EWZYf9XeIUTR64",
]

[[audits.miniz_oxide_c_api]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.2.3"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/MvT1mnu3q2sFjQ5X_8nF0AhVz7mhi3hAp8Ywqv26v_s",
]

[[audits.mint]]
who = "\"icefox\" (https://git.sr.ht/~icefox)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.5.1"
notes = "Has some unsafe code in surprising places, for zero-copy casts.  P. sure it's valid though."
aggregated-from = [
    "https://git.sr.ht/~icefox/crev-proofs#lr2ldir9XdBsKQkW3YGpRIO2pxhtSucdzf3M5ivfv4A",
    "crev:review/vC-lBeh04GhpFip7tlaJGMG37VSusn4OI1VUdWSgnHo",
]

[[audits.mockiato]]
who = "\"bash\" (https://github.com/bash/crev-proofs.git)"
criteria = [
    "positive",
    "level-high",
    "trust-low",
]
version = "0.9.0"
notes = "I'm the author"
aggregated-from = [
    "https://github.com/bash/crev-proofs.git#Mw3ReGwT2pB41AUQ12T7TcgvH5pq7I1gd8Iw_LLH4XQ",
    "crev:review/X4kU6X5xx89P0Cd7ptOXSwvLjYLtTEopsBxEypp8YMs",
]

[[audits.mockiato-codegen]]
who = "\"bash\" (https://github.com/bash/crev-proofs.git)"
criteria = [
    "positive",
    "level-high",
    "trust-low",
]
version = "0.9.0"
notes = "I'm the author"
aggregated-from = [
    "https://github.com/bash/crev-proofs.git#Mw3ReGwT2pB41AUQ12T7TcgvH5pq7I1gd8Iw_LLH4XQ",
    "crev:review/epci6cgbhrEGojo3FtWdKHkP6zggMxRLPgIkOTvBNbI",
]

[[audits.mockito]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.19.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/8n3Z-djstA8gEnTaN_zagHvmJJ08lxZCD59ASA-_f4g",
]

[[audits.mozjpeg]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.8.23"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/7SAonfF9R0y2v5bHrTmMcXEcoAd66PU5nppCZoGgOww",
]

[[audits.mozjpeg]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.8.14"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/OjgODJIixh0kDNorjmEdVeYuRYK5spPZdf7kzQwY1Qg",
]

[[audits.mozjpeg-sys]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.10.2"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/8nHgI1HP1uI80eu91eelbXuePNhILj681acjuPamZHo",
]

[[audits.mp4parse]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "neutral",
    "level-low",
    "trust-high",
]
version = "0.11.4"
notes = "Fallible feature is unsound. The rest looks ok."
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/qXx5yo3OpnOHn3wduT75I-T2BrUZt1viDiFgUj3pKrE",
]

[[audits.mparsed]]
who = "\"leo60228\" (https://github.com/leo60228)"
criteria = [
    "positive",
    "level-medium",
    "trust-low",
]
version = "0.2.0"
notes = "Mostly consists of types with a few simple helpers. Last commit is a year ago, but there aren't any outstanding issues or PRs and the author still seems to be active."
aggregated-from = [
    "https://github.com/leo60228/crev-proofs#2LuQSTppPubecRKRky5i_owgDcpbZhuFE3iXyLky5w4",
    "crev:review/BoDa1ulUQEVAE2fNl2vebDlAh8wGUhkMop6oRAzdoF8",
]

[[audits.mss_saliency]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.3"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/ZcwUhMh9wlEY1cAKeFwXV7qUH3aLZA729uAjRiAV5v0",
]

[[audits.multer]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "2.0.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/yTVB0OuWhnUnVp2LhEJqQbELKk7zOUwwPRKyIG3NKgI",
]

[[audits.mutants]]
who = "\"kpreid\" (https://github.com/kpreid)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.0.3"
notes = """
This proc-macro crate defines an attribute macro `#[mutants::skip]` which
always returns its input unchanged (i.e. the attribute has no effect).

The attribute is detected by the `cargo-mutants` tool when it parses source
code. It should be completely safe and have no effect unless you are using
`cargo-mutants` (which this is not a review of)."""
aggregated-from = [
    "https://github.com/kpreid/crev-proofs#RFs94ITILUKf6EoC8j-_qwMi4t5zhZ7t3bQ7KHmB5QI",
    "crev:review/o9f8m7IJOZSiNvc6BLeuYwnSbUhn1vO9IJgzeRQbLKs",
]

[[audits.myelin-engine]]
who = "\"bash\" (https://github.com/bash/crev-proofs.git)"
criteria = [
    "positive",
    "level-high",
    "trust-low",
]
version = "0.14.0"
notes = "I'm one of the authors"
aggregated-from = [
    "https://github.com/bash/crev-proofs.git#Mw3ReGwT2pB41AUQ12T7TcgvH5pq7I1gd8Iw_LLH4XQ",
    "crev:review/YPnCUgULLG0BUMIMIq1GOnKo8w2bERz_EIhM4ChchwU",
]

[[audits.myelin-geometry]]
who = "\"bash\" (https://github.com/bash/crev-proofs.git)"
criteria = [
    "positive",
    "level-high",
    "trust-low",
]
version = "2.4.0"
notes = "I'm one of the authors"
aggregated-from = [
    "https://github.com/bash/crev-proofs.git#Mw3ReGwT2pB41AUQ12T7TcgvH5pq7I1gd8Iw_LLH4XQ",
    "crev:review/TN_BRULfBqHyEIU4UIoiNSdeicu7GhWZ19CWZx2lS-A",
]

[[audits.nameof]]
who = "\"bash\" (https://github.com/bash/crev-proofs.git)"
criteria = [
    "positive",
    "level-medium",
    "trust-low",
]
version = "1.1.0"
aggregated-from = [
    "https://github.com/bash/crev-proofs.git#Mw3ReGwT2pB41AUQ12T7TcgvH5pq7I1gd8Iw_LLH4XQ",
    "crev:review/Z_KYfBWsTGkhnXo2VhovgM4Kony7ZpNw31ejZNeNHRM",
]

[[audits.nasm-rs]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.2.0"
notes = "`ar` integration is weak. You should use the `cc` crate for archiving static libs. It's OK otherwise."
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/Bczx-Y3y7K08KBqwSahh_G0F0RNXVrlaccCdzuJe4Ao",
]

[[audits.native-tls]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.2.3"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/2zDAKnM3uKM2Ee-795xF3CCWyPYtl7_0I0hRr9OhmwI",
]

[[audits.nb]]
who = "\"chrysn\" (https://gitlab.com/chrysn)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.1.2 -> 1.0.0"
notes = "Changes since 0.1.2 were largely cosmetic."
aggregated-from = [
    "https://gitlab.com/chrysn/crev-proofs#bYdCa4xhd5VL4dlcVPBxV51PrW5joFp9U04rKgcTvk8",
    "crev:review/BrV8BWBRpI-elQRxrtHND9ZLa9czsv1k0H0AQpUPeyI",
]

[[audits.nb]]
who = "\"chrysn\" (https://gitlab.com/chrysn)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.1.2"
aggregated-from = [
    "https://gitlab.com/chrysn/crev-proofs#bYdCa4xhd5VL4dlcVPBxV51PrW5joFp9U04rKgcTvk8",
    "crev:review/VJl-NYOCAurMQGRIwPqeXBnABDfGs-gf6TbSDJY2lGc",
]

[[audits.ndk-context]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.1.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/K26XPa8Yq0Be6KWsCANN-wEX0CDNlm6qantfdiEJWC0",
]

[[audits.new_debug_unreachable]]
who = "\"KonradBorowski\" (https://gitlab.com/KonradBorowski)"
criteria = [
    "positive",
    "level-medium",
    "trust-low",
]
version = "1.0.3"
notes = "Always causes UB, but that's exactly what this crate is supposed to do and it properly requires unsafe."
aggregated-from = [
    "https://gitlab.com/KonradBorowski/crev-proofs#ZOm7om6WZyEf3SBmDC69BXs8sc1VPniYx7Nfz2Du6hM",
    "crev:review/Pj5uvp3nYuwArbE1oFQhm7_cZtabA-1m1s3sjEWQ_A4",
]

[[audits.nias]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "neutral",
    "level-low",
    "trust-high",
]
version = "0.4.0"
notes = "These are helper functions. They aren't actually closures, but plain function pointers."
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/_lK5LOct_2PeZ-KrXmc2L7qmDdAgjCmIok8tXjGcuFE",
]

[[audits.nodrop]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.13"
notes = "Some `unsafe`, but LGTM"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/bg1emkg-2wihU8aPPFy_pSJxxhkK_msPMJ1Lca9iwrg",
]

[[audits.nonmax]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.4.0"
notes = '''
\[[Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/nonmax.md)\]
std::num::NonZero___ equivalents

Pros:
* Works
* Can represent 0
* Clever cheap xors for implementation

Cons:
* Missing [a lot of traits](https://doc.rust-lang.org/std/num/struct.NonZeroI32.html#trait-implementations) vs equivalent `NonZero*`s
* Extra pointless unsafe in `new` impl'''
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/54YoeFes7dgxfekIALoPXA-PXlSeZcqhmolKI-osh4A",
]

[[audits.noop_proc_macro]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.2.1"
notes = "Literally nothing to see here"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/eLfBOC6_0_BsQ_cu1djcn2P5mF_ZnLGrFAV7J2Zt3Qg",
]

[[audits.ntapi]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.3.6"
notes = "The build script is benign. It does what it says on the tin. I haven't checked whether definitions match the ABI."
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/WesheOqqJlabAXxr14q-j72Rsi_G8ea2Qj0PFKElmhY",
]

[[audits.num]]
who = "\"icefox\" (https://git.sr.ht/~icefox)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.42"
notes = """
Just a compatibility shim re-exporting traits.
"""
aggregated-from = [
    "https://git.sr.ht/~icefox/crev-proofs#lr2ldir9XdBsKQkW3YGpRIO2pxhtSucdzf3M5ivfv4A",
    "crev:review/YsQRNu3gG0BU9NCuWwZgUyFcuaUORj8ClzdsqNUXimw",
]

[[audits.num-traits]]
who = "\"HeroicKatora\" (https://github.com/HeroicKatora)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
delta = "0.2.8 -> 0.2.11"
notes = """
With a prior parsing bug fixed and Rust soon stabilizing floating point to
integer conversion without UB the previous reservations no longer hold. It
looks stable as is and doesn't attempt anything far fetched."""
aggregated-from = [
    "https://github.com/HeroicKatora/crev-proofs#-sApEowWcAS9J0R7aO18cghvhLBpuMhyeUuWQq_fits",
    "crev:review/rLlzh6yi06pTNeeDlVMRj84Awzrlw1oNwMTpQF59G3I",
]

[[audits.num-traits]]
who = "\"niklasf\" (https://github.com/niklasf)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-run",
]
version = "0.2.11"
notes = """
num-traits provides traits for writing code generic over numeric types
and implementations for built-in numeric types. I exclusively reviewed
unsafe code.

num-traits uses some instances of unsafe code. Each unsafe block has a
comment explaining why it is required and why it is sound. The blocks are
easy to understand and check locally."""
aggregated-from = [
    "https://github.com/niklasf/crev-proofs#a0hN0qYwwDTmHtAchnTXiF-I_L9rK1KL5kgCmQoYR9o",
    "crev:review/ekRNiDu0DbnEHohWjKS-M6aqko3c9vBOvfohlLahQy0",
]

[[audits.num-traits]]
who = "\"HeroicKatora\" (https://github.com/HeroicKatora)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.2.6"
notes = """
Not quite ready for untrusted input due to panics and not fuzzed. Minor
soundness concerns for floating point operations, rooted in Rust language
`as` operator not having fully specified behaviour (yet). All is well for the
integer part of the library.
"""
aggregated-from = [
    "https://github.com/HeroicKatora/crev-proofs#-sApEowWcAS9J0R7aO18cghvhLBpuMhyeUuWQq_fits",
    "crev:review/vGUKiEYoZfUHxmKM6ERXhOmUhVaUO-Ew7K0NbR0H8cs",
]

[[audits.num_cpus]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.12.0"
notes = """
Queries the OS for the number of CPU cores you have.

Pros:
*   You didn't have to write it.
*   Handles all that hideously platform specific nonsense for you.

Cons:
*   Lots of (necessary) `unsafe`
*   Linux cgroups support seems wildly overcomplicated.
*   [Lies](https://github.com/seanmonstar/num_cpus/issues/95) and
    [lies](https://github.com/seanmonstar/num_cpus/issues/69) and
    [lies](https://github.com/seanmonstar/num_cpus/issues/34) and
    [lies](https://github.com/seanmonstar/num_cpus/issues/81).
    Not exactly this crate's fault - the system APIs are brittle and full of edge cases.
    Multi-processor **architectures** are full of edge cases.

Alternatives:
*   Just hardcode a reasonable number of threads for your workload!
    Spinning up threads for 64 CPU cores to all false-share a single cacheline
    because that's how many logical cores were detected isn't the right choice!
    And all your threads are probably blocked on I/O anyways!

[Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/num_cpus.md)"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/JhY532a-9yJQ4VNSPRN_tOLLsyaVy0kdRQClt7xoasQ",
]

[[audits.num_cpus]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.10.1"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/YnJfKR2kBp7qJHFXUBMD27rO28UmGBQc7xJGzZ-f9Qs",
]

[[audits.num_enum]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.4.1 -> 0.4.3"
notes = "https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/num_enum.md#0.4.3"
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/L28JZqG25gwOBjzxidd056jgAZa2waEitf7eQu8MKhU",
]

[[audits.num_enum]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.4.0 -> 0.4.1"
notes = "https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/num_enum.md#0.4.1"
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/tg_doIvsZVmv7K9zQWReKazRNV_q4OWtVzMaVCUXxIE",
]

[[audits.num_enum]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.3.1 -> 0.4.0"
notes = "https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/num_enum.md#0.4.0"
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/T2VIDaBtnXA26uj23l3dwBLwHaDmpgNZyE3Q_74gcB0",
]

[[audits.num_enum]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.3.0 -> 0.3.1"
notes = "https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/num_enum.md#0.3.1"
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/lV8IsLBvhG7WCxQRTdszB2zS6Meuquxb7INhGJgV3-g",
]

[[audits.num_enum]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.3 -> 0.3.0"
notes = "https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/num_enum.md#0.3.0"
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/N5Nbzt0hPyYwyqiSsMJ8vonwXUNc3bXn6VwRkDTq9nM",
]

[[audits.num_enum]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.2 -> 0.2.3"
notes = "https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/num_enum.md#0.2.3"
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/Q3lZYdVw0gY-9WNHODv9FWC-4YjYT3kqZVlJaL2qUfk",
]

[[audits.num_enum]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.1 -> 0.2.2"
notes = "https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/num_enum.md#0.2.2"
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/sU-kUT8FQ6oO2rgd520TJ-FmOT3BE3cKO1JggsvlC70",
]

[[audits.num_enum]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.2.0 -> 0.2.1"
notes = "https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/num_enum.md#0.2.1"
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/Ongp__c0xr8jOiUTORbfnKTaPulGqMdCs1WRAmPO7Ig",
]

[[audits.num_enum]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.1.1 -> 0.2.0"
notes = "https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/num_enum.md#0.2.0"
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/VHtXQwZCpbtLbENbf0AEGTP9hxyFo_a79jP3QJJ177c",
]

[[audits.num_enum]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.1.1 -> 0.1.1"
notes = "https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/num_enum.md#0.1.1"
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/ULUGJL3FYAf8ukbQnnWLhpOjxBrt0zG7N7d1fZ2x0Ho",
]

[[audits.num_enum]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.1.0"
notes = "https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/num_enum.md#0.1.0"
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/8OJLVAiK4Ux2QeALPWKQCbg1JhUI8wmuB-iPlifvOno",
]

[[audits.num_enum_derive]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.4.2 -> 0.4.3"
notes = "https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/num_enum_derive.md#0.4.3"
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/1O-OChm7UZ2AP2k3eDGecI78UuUKgQGGkuEYI782wbM",
]

[[audits.num_enum_derive]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.4.1 -> 0.4.2"
notes = "https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/num_enum_derive.md#0.4.2"
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/8jQ01Sbnm2nJ-b5d2SwfVmgSO35GzvpZKANHzVlHF7k",
]

[[audits.num_enum_derive]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.4.0 -> 0.4.1"
notes = "https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/num_enum_derive.md#0.4.1"
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/2vYYQkjhBMOFd-0gPoa8bDhAM3r0oRSCbus-C5QPP7c",
]

[[audits.num_enum_derive]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.0.0 -> 0.4.0"
notes = "https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/num_enum_derive.md#0.4.0"
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/S6ryvi23unS8TNcW5qYw76fcUF-Mg_1uhP2XO7QRJjw",
]

[[audits.num_enum_derive]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "strong",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.0.0"
notes = """
Placeholder
https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/num_enum_derive.md#0.0.0"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/I_dSz3K8HE6Q9G-GRXW8vQ693MZI4e01TQ6C6TEHY78",
]

[[audits.oorandom]]
who = "\"icefox\" (https://git.sr.ht/~icefox)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "11.1.0"
notes = """
Very minor version bump compared to previous version.
"""
aggregated-from = [
    "https://git.sr.ht/~icefox/crev-proofs#lr2ldir9XdBsKQkW3YGpRIO2pxhtSucdzf3M5ivfv4A",
    "crev:review/HzfuUAwdzrwbUj9XefBxTcYDokJb2UOAUmYoE8zKpi8",
]

[[audits.opaque-debug]]
who = "\"LovecraftianHorror\" (https://github.com/LovecraftianHorror)"
criteria = [
    "strong",
    "level-high",
    "trust-low",
]
version = "0.2.3"
notes = """
Intended for cases where you want a debug format that formats a struct as
`StructName { ... }` to prevent leaking internal state, and it seems to do
exactly that."""
aggregated-from = [
    "https://github.com/LovecraftianHorror/crev-proofs#PTlVqKJclK7ELjugGnh_nDgpaWLAAGRIg5UH391WKnQ",
    "crev:review/AcMnUlQIidu9xAhAYsy-dHRjtAQ-YgZcO1gEUT51tOc",
]

[[audits.opaque-debug]]
who = "\"KonradBorowski\" (https://gitlab.com/KonradBorowski)"
criteria = [
    "positive",
    "level-high",
    "trust-low",
]
delta = "0.2.2 -> 0.2.3"
notes = "Doesn't support generic struts"
aggregated-from = [
    "https://gitlab.com/KonradBorowski/crev-proofs#ZOm7om6WZyEf3SBmDC69BXs8sc1VPniYx7Nfz2Du6hM",
    "crev:review/TmKOiWb74dFgS9Nk0ZXTGF9vXmV7JHOaruz5fI0tSn8",
]

[[audits.opaque-debug]]
who = "\"KonradBorowski\" (https://gitlab.com/KonradBorowski)"
criteria = [
    "neutral",
    "level-high",
    "trust-low",
]
version = "0.2.2"
notes = "Doesn't support generic struts and checks for core/std incorrectly sometimes causing compilation errors when used in Edition 2015 code"
aggregated-from = [
    "https://gitlab.com/KonradBorowski/crev-proofs#ZOm7om6WZyEf3SBmDC69BXs8sc1VPniYx7Nfz2Du6hM",
    "crev:review/7NFyB3SrTFE3VXD9CQ275_VWvzRsKUNxOcNq4muJ1Ig",
]

[[audits.openmp-sys]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "neutral",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.6"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/d2M6S3bVY2-_DueSKla1PaouVQHTID4ytZqEbKMI6dY",
]

[[audits.openssl-probe]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.2"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/kYEZPyiNXiZ5vDtoKSQ43LD6I0zskbhGFxXYfwNXNxM",
]

[[audits.os_str_bytes]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "6.3.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/lAwdkA7w3u48jP6O3JERuDtGlA-DbzuaSOexqmFzxiI",
]

[[audits.owning_ref]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.4.0"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/j-_08lvxutcroJGHsBebJZU0-goMnb5vxnQOYNAIK3U",
]

[[audits.parse_cfg]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "neutral",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
    "unmaintained",
]
version = "2.0.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/beOTDgemFExG_JOaCu0wTVlPzJ-TmjzumhfjkGhIBY4",
]

[[audits.parse_cfg]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "2.0.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/KZpRIYmxk6cczHQtf2wK7QD9iVhziuuLCUT2_rAR1eY",
]

[[audits.peak_alloc]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.1.0"
notes = "It really is a thin wrapper around `System.alloc` (too bad it can't wrap other allocators)"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/kBJqyRF4h9uAVDfhDI2VgrKBhMEe9jihE5TRZD2M-LE",
]

[[audits.peeking_take_while]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.2"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/ml5a4XFVkXRWc01eK4gYU1K4l5RCmC8ZbXII_rzPffI",
]

[[audits.percent-encoding]]
who = "\"chrysn\" (https://gitlab.com/chrysn)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "2.1.0"
notes = """
The crate is compact and straight-forward. It is refreshingly unopinionated
in that it leaves it up to the user to pick what to escape; consequently,
there was little to check against RFC3986 other than that the default
uppercasing rule is followed. A minor issue about unsafe code was found and
reported (https://github.com/servo/rust-url/pull/583), but it's more
theoretical then likely to cause practical trouble."""
aggregated-from = [
    "https://gitlab.com/chrysn/crev-proofs#bYdCa4xhd5VL4dlcVPBxV51PrW5joFp9U04rKgcTvk8",
    "crev:review/WxqMMjjTgpb2A6ebD0Vjckgegv_7U9UGpgkyHLmvmGE",
]

[[audits.percent-encoding]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "1.0.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/uw82t0RgYohZAyjPErD1ohWo5miWm9r7aIfNIUSa7K0",
]

[[audits.pest_derive]]
who = "\"LovecraftianHorror\" (https://github.com/LovecraftianHorror)"
criteria = [
    "positive",
    "level-high",
    "trust-low",
]
version = "2.3.1"
notes = "This crate is just a tiny macro shim over `pest_generator`"
aggregated-from = [
    "https://github.com/LovecraftianHorror/crev-proofs#PTlVqKJclK7ELjugGnh_nDgpaWLAAGRIg5UH391WKnQ",
    "crev:review/R28vv_pTFXwFWOs9n3y-NHVb0ocwXLrN_pZ5LApA9BY",
]

[[audits.pest_derive]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "2.1.0"
notes = "There's not much to review. It's just a proxy to underlying crates."
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/7_cxDhRdbjOcHVRoekjkwf5UV6pZmfgj1kDO662nHuM",
]

[[audits.phf]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.7.24"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/fY9PyvCFTqrpHjzKiddziR9o_yYeregk_eyuRXWCyP4",
]

[[audits.phf_codegen]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.7.24"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/UqFPaYHsdvku1v3h4qEyiI19HiE_n1-HZh4G8SDBzNo",
]

[[audits.pin-utils]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.1.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/7ZmC4vDnaNIEkFxQREe7zELs1W8fjWD7WO6fXaf7U9U",
]

[[audits.pipe]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.4.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/DdLD_u9ECdvz7tMfR3PfrryJKWBp0TwTI_0MHWacskU",
]

[[audits.pipe]]
who = "\"vorner\" (https://github.com/vorner)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.2.0"
notes = """
There are probably few places where it could be made little faster or more
idiomatic. Apart from that, it's a small and simple crate that does what it
should and the tests seem adequate to the simplicity of the code. No unsafe
too.
"""
aggregated-from = [
    "https://github.com/vorner/crev-proofs#WJlSxaMnJ7GLdgFZKR_JrivA9KmmEZO806KlZZHHkyg",
    "crev:review/35406kBKnQS07Tign3PgjMYfN6zrn03Tr4ZkKR8W7yE",
]

[[audits.piston]]
who = "\"remram44\" (https://github.com/remram44)"
criteria = [
    "strong",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.49.0"
notes = """
This crate has no code, it re-exports from its dependencies.
"""
aggregated-from = [
    "https://github.com/remram44/crev-proofs#V_B2pKpHVBIp_NegKfur4MK9GqFo0o78ijhku90pYS0",
    "crev:review/z7T86loBBvvLj31iiJ50OHhKEOA49rsT3fcze1_4a1w",
]

[[audits.piston-music]]
who = "\"icefox\" (https://git.sr.ht/~icefox)"
criteria = [
    "negative",
    "level-medium",
    "trust-medium",
]
version = "0.25.1"
notes = "Gratiutous unsafe and global mutable state where there doesn't need to be any."
aggregated-from = [
    "https://git.sr.ht/~icefox/crev-proofs#lr2ldir9XdBsKQkW3YGpRIO2pxhtSucdzf3M5ivfv4A",
    "crev:review/X0RbGaJpa_cOhsNkz57KsRQ8kRQtWmogleCHsfiaegs",
]

[[audits.pkg-config]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.3.19"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/fCw9UntbrLXT-Up9UQyTlJvdWeOy_D397cu0gbXy06s",
]

[[audits.plain]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.2.3"
notes = "Very simple. Does what it says."
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/8rHYaCucEKVUXcm5HP7DrHoLqvAZVbLKsVig8Vc-u9s",
]

[[audits.platter-walk]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.1.3"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/a_o7Ym8FbLNm2repu-XkMx4hOVtiD45EzixfKmHcOaE",
]

[[audits.pledge]]
who = "\"kpcyrd\" (https://github.com/kpcyrd)"
criteria = [
    "strong",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.3.1"
aggregated-from = [
    "https://github.com/kpcyrd/crev-proofs#ZGgmIacywCRKLa33k7W04VFcK-glDkcBXKG4oF7t--4",
    "crev:review/5iRzWcblQ1DHgiLTwNOfll-bxUGAy54zGxAcGnREBnY",
]

[[audits.pmac]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.2.0"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/1XSIzhoRlaamKXbZsd1XplyfTdW9Zqploa_r-dylO_E",
]

[[audits.png]]
who = "\"icefox\" (https://git.sr.ht/~icefox)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.15.0"
notes = """
No unsafe, no real I/O, nothing weird in build stuff.  Exactly what
you'd want from an image codec.
"""
aggregated-from = [
    "https://git.sr.ht/~icefox/crev-proofs#lr2ldir9XdBsKQkW3YGpRIO2pxhtSucdzf3M5ivfv4A",
    "crev:review/egPpTC8pyqAF-lbyVvQmJ2Z-44ALlVg0mNglKRQAfDM",
]

[[audits.podio]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.1.6"
notes = """
Solid looking, 100% safe.  Only concern is CI scripts downloading random URLs.
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/a3sKyhASb6qp4zMXQlZm8OzZ4T-3OrlWvhCkcRNFw8w",
]

[[audits.power-instruction-analyzer]]
who = "\"programmerjake\" (https://github.com/programmerjake)"
criteria = [
    "positive",
    "level-medium",
    "trust-low",
]
version = "0.2.0"
notes = "original author"
aggregated-from = [
    "https://github.com/programmerjake/crev-proofs#dUc4luSnPuYlfYarXUizPOSBLUBZguTVOQUCHmAKSps",
    "crev:review/BJ7QhS56G9MaNFAso0T54qe5fm-eT_TywyfzMRm9Qoo",
]

[[audits.power-instruction-analyzer-proc-macro]]
who = "\"programmerjake\" (https://github.com/programmerjake)"
criteria = [
    "positive",
    "level-medium",
    "trust-low",
]
version = "0.2.0"
notes = "original author"
aggregated-from = [
    "https://github.com/programmerjake/crev-proofs#dUc4luSnPuYlfYarXUizPOSBLUBZguTVOQUCHmAKSps",
    "crev:review/9oGjtjzhQ130NiHx8_NqR6u0aLS3Fed4cbOpZY8FJBI",
]

[[audits.ppv-lite86]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.2.6"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/pX9US7ShgMUfUPE-IabrtoDaRyntk9jSKFHwEeGzGuc",
]

[[audits.pq-sys]]
who = "\"KonradBorowski\" (https://gitlab.com/KonradBorowski)"
criteria = [
    "positive",
    "level-medium",
    "trust-low",
]
version = "0.4.6"
notes = "Bindings generated by bindgen. Quality of actual PostgreSQL code wasn't verified as it's a huge codebase."
aggregated-from = [
    "https://gitlab.com/KonradBorowski/crev-proofs#ZOm7om6WZyEf3SBmDC69BXs8sc1VPniYx7Nfz2Du6hM",
    "crev:review/U5UGWnnejqoID9uvUEJss9gzew-z9okKqeZ4oYFWp4E",
]

[[audits.predicates]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "1.0.4"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/R6DgjCs41T6x_SvotcdFlJt8DjMgHloaO52LxMk4uc0",
]

[[audits.predicates-core]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "1.0.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/F2GlhSD0gLNiY0vO6ZW-Sz54jZ47rfu3AKYVItmjW08",
]

[[audits.pretty_assertions]]
who = "\"kpreid\" (https://github.com/kpreid)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.4.0"
notes = """
Simple, clear code. No unsafe.

I have some nitpicks about correctness-in-all-cases but none of
them would do significant harm if not addressed. Specifically:
  
* The macros have internal-use arms, which could instead be implemented as
  separate macros.
* The package defines mutually exclusive Cargo features, which is incorrect
  (<https://doc.rust-lang.org/cargo/reference/features.html#feature-unification>);
  if a `std`-using package depends on a `no_std` package and both of
  them depend on `pretty_assertions` then both features will end up enabled."""
aggregated-from = [
    "https://github.com/kpreid/crev-proofs#RFs94ITILUKf6EoC8j-_qwMi4t5zhZ7t3bQ7KHmB5QI",
    "crev:review/GULxOaM3vbDDql9_p8TXynsiO_9BXFgjxy2-_wJxdeM",
]

[[audits.proc-macro-crate]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
delta = "0.1.3 -> 0.1.4"
notes = """
https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/proc-macro-crate.md#014
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/Q6EN-2LolguARRMXR7sFAgAmVe_H07GoZDfseUNmMIc",
]

[[audits.proc-macro-crate]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
delta = "0.1.2 -> 0.1.3"
notes = """
https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/proc-macro-crate.md#013
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/YFIIpRjw5USkGPQmri0AchTDFjILjnvwgLfbASPqgPc",
]

[[audits.proc-macro-crate]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
delta = "0.1.1 -> 0.1.2"
notes = """
https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/proc-macro-crate.md#012
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/C_FY-9C4aH3HXbA7QP41_baqS36-JiRGFzeirdWZZLU",
]

[[audits.proc-macro-crate]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
delta = "0.1.0 -> 0.1.1"
notes = """
https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/proc-macro-crate.md#011
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/Kt3HvdusTZyNHUtgXD5ZAvFzsoJJbfdsVIGTh7AjoAA",
]

[[audits.proc-macro-crate]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.0"
notes = """
https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/proc-macro-crate.md#010
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/xW97fjyCYQEVbV2DNiKfhgSADB-ckKERd0l1V2Xu9AM",
]

[[audits.proc-macro-error-attr]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "1.0.4"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/PmiqFyv-hZhB-L5cde1PeBgOyZgc0WTPt9Y5OmSfurk",
]

[[audits.prometheus]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.8.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/p9tuhLR0rBqxXFvmWQ8ozb_J5rZ2xUFAEsPLe-9JLVc",
]

[[audits.ptr-union]]
who = "\"cad97\" (https://github.com/cad97)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.0"
notes = """
I am the author of this crate. As such, I obviously trust it and believe it is useful.
So this review will instead point at the trickiest parts and try to rationalize them.

Don't believe cargo-geiger for this crate. The majority of the API is macro-generated,
and cargo-geiger misses unsafe invocations emitted by the complex macro.

This crate makes liberal usage of unreachable_unchecked,
but for cases where the case is trivially actually unreachable.

However, using this crate _will_ decrease the required unsafe for your crate,
as it gives you alignment-tagged pointer unions for only one line of unsafe per union type.
The unsafe burden you take on is to guarantee the alignment required to store the tag within.

Smoke tests are run under miri, but the crate could potentially do with some more examples
as well as some more tests to ensure that all of the functionality works as advertised.

I've only put this review as positive rather than strong because of a lack of real-world use.
As of yet, the library is just of theoretical use, and has yet to be stress tested for real."""
aggregated-from = [
    "https://github.com/cad97/crev-proofs#e13vqC78LDCc-IiVPs-XkOHWd1j6PJUcYrugasS77hQ",
    "crev:review/VWnhkEYjmwMxUeOz1vfsvitM0s_ovpfqy5WkLsJWiPI",
]

[[audits.quick-error]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "1.2.3"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/6AeryRWSsrwnUh3E4oCsgJR0VBtGKMyWF0pJv5dBVk4",
]

[[audits.quick-xml]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "negative",
    "level-low",
    "trust-high",
]
version = "0.23.0"
notes = "This crate uses a bytewise parser even for files in UTF-16 encoding. It can be tricked into parsing plain text as XML elements (e.g. UTF-16BE \"䄼A†⼾\" is parsed as `<A />` and fires an element event)."
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/XEfIB-ndpPBtq21799pEyDDd5N8k-XhyaNw5ELDEmJ8",
]

[[audits.rake]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.3"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/Piu_AIuFXAwwwjgs2jqhABWmehceXsGikNFLe4-5dJc",
]

[[audits.rand]]
who = "\"mgeisler\" (https://github.com/mgeisler)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
delta = "0.8.1 -> 0.8.3"
notes = """
This is the standard crate for random number generation. I use it in
my own projects.

The code uses unsafe in a few places for performance reasons such as
SIMD support. It is hard for me to say if this is safe, but I have
had no problems with it myself."""
aggregated-from = [
    "https://github.com/mgeisler/crev-proofs#buAHNI2OOf3cARKjtWidV2ur7MlZJNK1RLNZfaQqUj4",
    "crev:review/WN01uaMwSG7BPCaiOK3AhBsFOnamLtgHuH6wvIT4bsc",
]

[[audits.rand]]
who = "\"mgeisler\" (https://github.com/mgeisler)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.8.1"
notes = """
This is the standard crate for random number generation. I use it in
my own projects.

The code uses unsafe in a few places for performance reasons such as
SIMD support. It is hard for me to say if this is safe, but I have
had no problems with it myself."""
aggregated-from = [
    "https://github.com/mgeisler/crev-proofs#buAHNI2OOf3cARKjtWidV2ur7MlZJNK1RLNZfaQqUj4",
    "crev:review/_cabRa8fHra-G_DnY3dFPuZs-BUENaZL4nKNzHI5q9g",
]

[[audits.rand_chacha]]
who = "\"mgeisler\" (https://github.com/mgeisler)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.3.0"
notes = """
Standard and well-tested RNG. Has one instance of unsafe, which
seems safe to me."""
aggregated-from = [
    "https://github.com/mgeisler/crev-proofs#buAHNI2OOf3cARKjtWidV2ur7MlZJNK1RLNZfaQqUj4",
    "crev:review/2NwSquXFUc8kHwkwqmzupg5U7EbchKZjpG3A5RcJEkA",
]

[[audits.rand_core]]
who = "\"mgeisler\" (https://github.com/mgeisler)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
delta = "0.6.1 -> 0.6.2"
notes = "The delta to 0.6.1 is safe: two assertions have been tightened."
aggregated-from = [
    "https://github.com/mgeisler/crev-proofs#buAHNI2OOf3cARKjtWidV2ur7MlZJNK1RLNZfaQqUj4",
    "crev:review/_tmrJczeSRyXRS7nkjhB48EJeucaYZqaeWOQsETa-sw",
]

[[audits.rand_core]]
who = "\"mgeisler\" (https://github.com/mgeisler)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.6.1"
aggregated-from = [
    "https://github.com/mgeisler/crev-proofs#buAHNI2OOf3cARKjtWidV2ur7MlZJNK1RLNZfaQqUj4",
    "crev:review/jIvZe4uNCRav8hQGHK4B4vqff_iRvH80m-Ontkh2snY",
]

[[audits.rand_hc]]
who = "\"mgeisler\" (https://github.com/mgeisler)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.3.0"
notes = """
No unsafe code, has tests and references to the original
implementation."""
aggregated-from = [
    "https://github.com/mgeisler/crev-proofs#buAHNI2OOf3cARKjtWidV2ur7MlZJNK1RLNZfaQqUj4",
    "crev:review/oINsWgPO9EUsZ7i8aE13f1mVfeJhjeNTF-DH-CIybBc",
]

[[audits.rand_os]]
who = "\"KonradBorowski\" (https://gitlab.com/KonradBorowski)"
criteria = [
    "strong",
    "level-medium",
    "trust-low",
]
version = "0.1.3"
aggregated-from = [
    "https://gitlab.com/KonradBorowski/crev-proofs#ZOm7om6WZyEf3SBmDC69BXs8sc1VPniYx7Nfz2Du6hM",
    "crev:review/FegfTbAdNPbBdV8pFvhqXJ79IcFbXpZkg9f0PKS7aYw",
]

[[audits.rand_pcg]]
who = "\"icefox\" (https://git.sr.ht/~icefox)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.2.0"
notes = """
There's still some transmute's that are unnecessary with Rust 1.32 but the code itself is fine.
"""
aggregated-from = [
    "https://git.sr.ht/~icefox/crev-proofs#lr2ldir9XdBsKQkW3YGpRIO2pxhtSucdzf3M5ivfv4A",
    "crev:review/KvTVzzM6YIuYlOkiI7y8ORtxWWw8G41rHZvQ__wfdXs",
]

[[audits.rand_xorshift]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.3.0"
notes = """
This implements a xorshift RNG with 128 bits of state.

The implementation uses no unsafe, and does not even require std. The code is
straightforward, and matches the code from the paper that describes the RNG
(\"Xorshift RNGs\" by George Marsaglia).

Seeding from an existing RNG can theoretically hang if the seeding RNG keeps
returning zeroes. I filed https://github.com/rust-random/rngs/issues/24 about
this and capped the rating at \"positive\"."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/XHp6PUxeXu0kAEcdZX8bJK-LfB6DD2H16jiX4QoCNL0",
]

[[audits.random]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "negative",
    "level-low",
    "trust-high",
]
version = "0.12.2"
notes = "I see no point in this crate existing (just use `rand`), and considering poor quality of other crates of this author, I would advise not to use. https://github.com/stainless-steel/temporary/issues/1"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/cHhbLXPBoKsIacY1SroTy69__u1bVAeZ1BQFwRJRuJE",
]

[[audits.randomize]]
who = "\"icefox\" (https://git.sr.ht/~icefox)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "3.0.0"
notes = """
No unsafe in the library, no I/O, well documented and commented.
"""
aggregated-from = [
    "https://git.sr.ht/~icefox/crev-proofs#lr2ldir9XdBsKQkW3YGpRIO2pxhtSucdzf3M5ivfv4A",
    "crev:review/awqBIyoUFl6fI0bM-WbNsT2no2HWhVxayIooLnsnbxg",
]

[[audits.rangemap]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.1.11"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/j2xR_e0qXsJeKEDqsDIghRMhEQ0WHzS5hmPSfl3Eud8",
]

[[audits.raw-cpuid]]
who = "\"niklasf\" (https://github.com/niklasf)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "10.2.0"
notes = """
All soundness issues have been fixed and unsafe code is no longer used
casually. Some transmutes from raw CPUID data to structs remain, but now
with comments explaining why they are safe."""
aggregated-from = [
    "https://github.com/niklasf/crev-proofs#a0hN0qYwwDTmHtAchnTXiF-I_L9rK1KL5kgCmQoYR9o",
    "crev:review/xFnyTzdxt-weyjLM5xWTqNBksMoBigM8gMuFtQWm-SI",
]

[[audits.raw-cpuid]]
who = "\"niklasf\" (https://github.com/niklasf)"
criteria = [
    "negative",
    "level-medium",
    "trust-medium",
]
version = "8.1.2"
notes = """
The crate has multiple soundness issues.

Most importantly, it performs transmutes that are most likely unsound or
at best incorrect (https://github.com/gz/rust-cpuid/issues/40).

Further, for machines that do not support CPUID (arguably rare, when ignoring
SGX), it incorrectly exposes the unsafe core::arch::__cpuid_count() as a safe
function. (The safety requirement is that the CPUID instruction is supported,
https://github.com/gz/rust-cpuid/issues/41).

Soundness issues aside, there are some minor issues.

- The crate introduces considerable complexity (including FFI), to support
  old rustc versions (https://github.com/gz/rust-cpuid/pull/38).
- Some casual use of unsafe code that can be rewritten to be safe
  (https://github.com/gz/rust-cpuid/pull/39)."""
aggregated-from = [
    "https://github.com/niklasf/crev-proofs#a0hN0qYwwDTmHtAchnTXiF-I_L9rK1KL5kgCmQoYR9o",
    "crev:review/otb5E93K-K1O2G5XzLJdGgKT7jFXejcKHID5f1mOLxo",
]

[[audits.rawpointer]]
who = "\"icefox\" (https://git.sr.ht/~icefox)"
criteria = [
    "strong",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.0"
notes = "The name is scary but it's nothing but shortcuts for unsafe code patterns you'd already use."
aggregated-from = [
    "https://git.sr.ht/~icefox/crev-proofs#lr2ldir9XdBsKQkW3YGpRIO2pxhtSucdzf3M5ivfv4A",
    "crev:review/O-t3nucrIKbwUntfU3YtTfeau-49mJP1YiqRI758vGU",
]

[[audits.rc-borrow]]
who = "\"cad97\" (https://github.com/cad97)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.0"
notes = """
I am the author of this crate. As such, I obviously trust it and believe it is useful.
So this review will instead point at the trickiest parts and try to rationalize them.

Do not believe cargo-geiger for this crate. The implementation is primarily macro-generated,
and cargo-geiger does not see into unsafe generated in macros.

That said, this crate is fairly simple and self-evident.
The main tricky bit is around pointer provenance when reconstructing the (A)Rc.
See <https://internals.rust-lang.org/t/_/11463/11> for some context.
The standard library currently does this wrong, even!
Getting the \"raw\" reference as `&**arc` gives shared immutable provenance,
and (A)Rc requires \"raw mutable\" provenance, because of get_mut.

If you're reading this and you _ever_ upgrade &T to (A)Rc<T>, replace it with this crate!
The crate uses autocfg to automatically probe for the \"fix\" methods of std providing a
(A)Rc::as_raw, so will automatically upgrade to the purely sound version when it's available.

Smoke tests are run under miri, but the crate could potentially do with some more examples
as well as some more tests to ensure that all of the functionality works as advertised.

I've only put this review as positive rather than strong because of a lack of real-world use.
As of yet, the library is just of theoretical use, and has yet to be stress tested for real."""
aggregated-from = [
    "https://github.com/cad97/crev-proofs#e13vqC78LDCc-IiVPs-XkOHWd1j6PJUcYrugasS77hQ",
    "crev:review/vx5uCMTjdguRK1V34BsYNOZz0ghDTJreiLbmqTseY6o",
]

[[audits.rc-box]]
who = "\"cad97\" (https://github.com/cad97)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.0"
notes = """
I am the author of this crate. As such, I obviously trust it and believe it is useful.
So this review will instead point at the trickiest parts and try to rationalize them.

Do not believe cargo-geiger for this crate. The implementation is primarily macro-generated,
and cargo-geiger does not see into unsafe generated in macros.

That said, this crate is fairly simple and self-evident.

Smoke tests are run under miri, but the crate could potentially do with some more examples
as well as some more tests to ensure that all of the functionality works as advertised.

I've only put this review as positive rather than strong because of a lack of real-world use.
As of yet, the library is just of theoretical use, and has yet to be stress tested for real."""
aggregated-from = [
    "https://github.com/cad97/crev-proofs#e13vqC78LDCc-IiVPs-XkOHWd1j6PJUcYrugasS77hQ",
    "crev:review/smS1g13CrAJOrYvz5N12fs3HTfg8RRboGbvR_7VyXcY",
]

[[audits.rctree]]
who = "\"lo48576\" (https://github.com/lo48576)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.3.3"
notes = """
It is completely written in safe Rust, and I didn't find any malicious code.

I've found a minor issue and a non-obvious behavior which is not documented (yet), but I think they are not severe and they have very easy workarounds.
You can see <https://github.com/RazrFalcon/rctree/issues> if you want to know them.

In conclusion, I think this crate is safe to use.
"""
aggregated-from = [
    "https://github.com/lo48576/crev-proofs#wO-tKiJm4SRMJeJSAo_gT54GAoY2KhwMGHzEZUcTmbk",
    "crev:review/F3ScIcFbkHuzxA_1FL4BPPZrcxuq0ujLltLUynkIQuE",
]

[[audits.rdkafka-sys]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "4.1.0+1.7.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/AYLBgc7iOY6ImYKybp8Sr0-0MEH9CicoqLQb5Zv0K4c",
]

[[audits.rdrand]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "neutral",
    "level-medium",
    "trust-medium",
    "safe-to-run",
]
delta = "0.5.2 -> 0.6.0"
notes = '''
Sound, although buggy AMD hardware makes implementing CryptoRng for RdRand/RdSeed a little unnerving to me ( https://github.com/nagisa/rust_rdrand/issues/12 )

Reviewed:
    benches\rdrand.rs:  +1
    benches\rdseed.rs:  +1
    benches\std.rs:     +1
    src\changelog.rs:   +1
    src\lib.rs:         0
        All of $gen::try_fill_bytes::imp being unsafe is still concerning... but I believe it's sound now.
        RdRand/RdSeed implement CrytoRng, which makes buggy AMD hardware concerning: https://github.com/nagisa/rust_rdrand/issues/12

Concerns reduced since 0.4.0:
    https://github.com/nagisa/rust_rdrand/commit/7af432c6e315fde053d0056d1b7df893a865711a
        unsafe blocks appear much larger than they need to be.

Concerns fixed since 0.4.0:
    https://github.com/nagisa/rust_rdrand/commit/26a0a2f9d885fbbb8e14fa47c8a48e366cf15455
        mem::uninitialized() u32s
        loop_rand! uses mem::uninitialized() for $el:ty, easy to misuse!  Requires unsafe{} so technically sound.  Not exported.
    https://github.com/nagisa/rust_rdrand/commit/7af432c6e315fde053d0056d1b7df893a865711a
        $gen::try_fill_bytes:  UNSOUND!  word and buffer reference the same data.  As both are &mut Ts, this is 100% undefined behavior.
        ptr::copy_nonoverlapping: This should really use a slice copy which should be just as safe...?  But maybe missing from core?
    Verified vs https://www.amd.com/system/files/TechDocs/24594.pdf
        is_x86_feature_detected: I have not verified this is correct.
'''
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/xEmEtJaTXkYNAOfCWBDk6irMqSRVYmgJ4gLHcOVwRFA",
]

[[audits.rdrand]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "neutral",
    "level-medium",
    "trust-medium",
    "safe-to-run",
]
delta = "0.4.0 -> 0.5.2"
notes = '''
Sound, although buggy AMD hardware makes implementing CryptoRng for RdRand/RdSeed a little unnerving to me ( https://github.com/nagisa/rust_rdrand/issues/12 )

Reviewed:
    benches\rdrand.rs:  +1
    benches\rdseed.rs:  +1
    benches\std.rs:     +1
    src\changelog.rs:   +1
    src\lib.rs:         0
        All of $gen::try_fill_bytes::imp being unsafe is still concerning... but I believe it's sound now.
        RdRand/RdSeed implement CrytoRng, which makes buggy AMD hardware concerning: https://github.com/nagisa/rust_rdrand/issues/12

Concerns reduced since 0.4.0:
    https://github.com/nagisa/rust_rdrand/commit/7af432c6e315fde053d0056d1b7df893a865711a
        unsafe blocks appear much larger than they need to be.

Concerns fixed since 0.4.0:
    https://github.com/nagisa/rust_rdrand/commit/26a0a2f9d885fbbb8e14fa47c8a48e366cf15455
        mem::uninitialized() u32s
        loop_rand! uses mem::uninitialized() for $el:ty, easy to misuse!  Requires unsafe{} so technically sound.  Not exported.
    https://github.com/nagisa/rust_rdrand/commit/7af432c6e315fde053d0056d1b7df893a865711a
        $gen::try_fill_bytes:  UNSOUND!  word and buffer reference the same data.  As both are &mut Ts, this is 100% undefined behavior.
        ptr::copy_nonoverlapping: This should really use a slice copy which should be just as safe...?  But maybe missing from core?
    Verified vs https://www.amd.com/system/files/TechDocs/24594.pdf
        is_x86_feature_detected: I have not verified this is correct.
'''
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/c3HvdW0e0n0lNXzWQZ9svhaI1qlpLK3xO2fD05XB_-4",
]

[[audits.rdrand]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "negative",
    "level-medium",
    "trust-medium",
]
version = "0.4.0"
notes = '''
$gen::try_fill_bytes invokes undefined behavior (overlapping &mut u32 and &mut [u8]): https://github.com/nagisa/rust_rdrand/issues/13.  0.5.x removed some use of uninitialized.

Reviewed:
  benches\rdrand.rs:  +1
  benches\rdseed.rs:  +1
  benches\std.rs:     +1
  src\changelog.rs:   +1
  src\lib.rs:  Concerns:
    mem::uninitialized() u32s
    is_x86_feature_detected: I have not verified this is correct.
    loop_rand! uses mem::uninitialized() for $el:ty, easy to misuse!  Requires unsafe{} so technically sound.  Not exported.
    $gen::try_fill_bytes:  UNSOUND!  word and buffer reference the same data.  As both are &mut Ts, this is 100% undefined behavior.
    unsafe blocks appear much larger than they need to be.
    ptr::copy_nonoverlapping: This should really use a slice copy which should be just as safe...?  But maybe missing from core?
'''
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/jq3cFxzRdUR_ZoRFXtt0OT_4wvUCCOucY5bpemxrtJA",
]

[[audits.rdrand]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.4.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/25nTK_wenfEXZNvKurzoT5DGjjEpDgtCPGbARPoYK9k",
]

[[audits.read_color]]
who = "\"remram44\" (https://github.com/remram44)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.0"
notes = """
Very straightforward library which does one simple thing (reads RGB colors
from hex characters). Could use some tests.
"""
aggregated-from = [
    "https://github.com/remram44/crev-proofs#V_B2pKpHVBIp_NegKfur4MK9GqFo0o78ijhku90pYS0",
    "crev:review/36tb6-ja7PuitKeapMF3zo4Z9AbAealJ-3w29JJG8xA",
]

[[audits.read_write_at]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.0"
notes = """
Offset read/write with `&self`

Pros:
* No runtime dependencies
* Very thorough, well documented

Cons:
* `File` isn't `ReadAt`/`WriteAt` on windows due to seeks... reasonable but annoying
* A couple of minor API holes to be fixed

[Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/read_write_at.md)"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/ij1cP5KVz22hQGl6TavPAuj0RwuXgisyoBGJwzcks2A",
]

[[audits.redox_users]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.3.5"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/933Q4ss5VZFJm8em1wO5CkYsV47gTZqqjrcoZ5PwDFs",
]

[[audits.reduce]]
who = "\"kpcyrd\" (https://github.com/kpcyrd)"
criteria = [
    "strong",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.2"
aggregated-from = [
    "https://github.com/kpcyrd/crev-proofs#ZGgmIacywCRKLa33k7W04VFcK-glDkcBXKG4oF7t--4",
    "crev:review/SV3u_3sZTRv1Rn-Q8Hbafdghr-vMCsc08491GHn9XUw",
]

[[audits.regex]]
who = "\"BurntSushi\" (https://github.com/BurntSushi)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.2.1"
notes = """
I wrote this crate, so this review is a reflection as a result of writing the
code and then reviewing it again for this review.

I gave a rating of positive because the implementation in the regex crate has
remain mostly unchanged for a long period of time, so it has matured and been
battle tested. Moreover, the crate uses very little unsafe directly. The
only uses are in the DFA regex engine for explicitly eliding bounds checks
in very hot loops.

A better rating is likely deserved, but there are still a few outstanding
bugs that can produce incorrect matches. In many cases, these bugs are a
result of optimizations using literal searches, which can be subtle and
difficult to get right.
"""
aggregated-from = [
    "https://github.com/BurntSushi/crev-proofs#VylyTuk8CMGqIxgHixWaqfiUn3xZyzOA1wFrQ0sR1As",
    "crev:review/XtA-Gl705fNL2bOCRRzWhyXkHAjFtRzcb71XPMVGZ8c",
]

[[audits.regex-syntax]]
who = "\"BurntSushi\" (https://github.com/BurntSushi)"
criteria = [
    "strong",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.6.11"
notes = """
I wrote this crate, so this review is a reflection as a result of writing
the code and then reviewing it again for this review.

The regex-syntax crate is mostly an internal implementation detail of the
regex crate. It is exposed as a stand-alone crate for the occasional use
case where it is convenient to analyze the syntax of a regex. The primary
thing that the regex-syntax crate provides is a parser for the concrete
syntax supported by the `regex` crate.

The regex-syntax crate is very large, but there is no unsafe used anywhere.
Moreover, it has no dependencies. That means that no matter what concrete
syntax is given, the worst that can happen is a panic. Memory safety should
be preserved (modulo bugs in the compiler or the standard library). On top of
that, the parser does not use explicit recursion and enforces a nest depth
by default, so it should generally be safe with respect to arbitrary input.
"""
aggregated-from = [
    "https://github.com/BurntSushi/crev-proofs#VylyTuk8CMGqIxgHixWaqfiUn3xZyzOA1wFrQ0sR1As",
    "crev:review/NlTI86Zv6lHk1S0yiEaCbFbKA1ESj6SFvCAoEQXFRoc",
]

[[audits.require_unsafe_in_body]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.2.0-alpha"
notes = """
0.2.0-alpha:  Significant refactoring, adding support for generics.  LGTM?
0.1.2:  Seems solid, although my syn-fu is weak, limiting my ability to review this.

Detail
======

| File                                          | Rating | Notes |
| --------------------------------------------- | ------ | ----- |
| src/docs/require_unsafe_in_bodies.md          | +1 | |
| src/docs/require_unsafe_in_body.md            | +1 | |
| src/utils/macros.rs                           | +1 | |
| src/utils/mod.rs                              | +1 | |
| src/lib.rs                                    | +1 | understanding: low - I'm barely following along
| src/tests.rs                                  | +1 | |
| tests/ui/body_on_method_2.rs                  | +1 | |
| tests/ui/body_on_method_2.stderr              | +1 | |
| tests/ui/body_on_method.rs                    | +1 | |
| tests/ui/body_on_method.stderr                | +1 | |
| tests/ui/readme.rs                            | +1 | |
| tests/ui/readme.stderr                        | +1 | |
| tests/impl_method_2.rs                        | +1 | The cfgs on unit-tests look the wrong way around?
| tests/impl_method.rs                          | +1 | The cfgs on unit-tests look the wrong way around?
| tests/trait_default_method.rs                 | +1 | The cfgs on unit-tests look the wrong way around?
| tests/ui.rs                                   | +1 | The cfgs on unit-tests look the wrong way around?
| .cargo_vcs_info.json                          | +1 | |
| .cargo-ok                                     | +1 | |
| .gitignore                                    | +1 | |
| Cargo.toml                                    | +1 | MIT
| Cargo.toml.orig                               | +1 | MIT
| LICENSE                                       | +1 | MIT
| Makefile                                      | +1 | Unixy
| README.md                                     | +1 | |

| Other     | Rating | Notes |
| --------- | ------ | ----- |
| unsafe    | +1    | Wrangles unsafe but doesn't actually use it itself
| fs        | +1    | None
| io        | +1    | Modifies codegen through syn
| docs      | +1    | |
| tests     | +1    | |

TIL
---
```rs
let Struct { ref member, ref mut member2, .. } = to_destructure;
```
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/Buehqt4CbHqkjrPYJYmENLzaDoFngHPF_402JdG2v1I",
]

[[audits.require_unsafe_in_body]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.1.2"
notes = """
Seems solid, although my syn-fu is weak, limiting my ability to review this.

Detail
======

| File                                          | Rating | Notes |
| --------------------------------------------- | ------ | ----- |
| src/docs/require_unsafe_in_bodies.md          | +1 | |
| src/docs/require_unsafe_in_body.md            | +1 | |
| src/utils/macros.rs                           | +1 | |
| src/utils/mod.rs                              | +1 | |
| src/lib.rs                                    | +1 | understanding: low - I'm barely following along
| src/tests.rs                                  | +1 | |
| tests/ui/body_on_method_2.rs                  | +1 | |
| tests/ui/body_on_method_2.stderr              | +1 | |
| tests/ui/body_on_method.rs                    | +1 | |
| tests/ui/body_on_method.stderr                | +1 | |
| tests/ui/readme.rs                            | +1 | |
| tests/ui/readme.stderr                        | +1 | |
| tests/impl_method_2.rs                        | +1 | The cfgs on unit-tests look the wrong way around?
| tests/impl_method.rs                          | +1 | The cfgs on unit-tests look the wrong way around?
| tests/trait_default_method.rs                 | +1 | The cfgs on unit-tests look the wrong way around?
| tests/ui.rs                                   | +1 | The cfgs on unit-tests look the wrong way around?
| .cargo_vcs_info.json                          | +1 | |
| .cargo-ok                                     | +1 | |
| .gitignore                                    | +1 | |
| Cargo.toml                                    | +1 | MIT
| Cargo.toml.orig                               | +1 | MIT
| LICENSE                                       | +1 | MIT
| Makefile                                      | +1 | Unixy
| README.md                                     | +1 | |

| Other     | Rating | Notes |
| --------- | ------ | ----- |
| unsafe    | +1    | Wrangles unsafe but doesn't actually use it itself
| fs        | +1    | None
| io        | +1    | Modifies codegen through syn
| docs      | +1    | |
| tests     | +1    | |

TIL
---
```rs
let Struct { ref member, ref mut member2, .. } = to_destructure;
```
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/hmkEbysZ2ufpaPO1bQl9PNvmdgzeMn1hetB9V3Blvb0",
]

[[audits.resiter]]
who = "\"matthiasbeyer\" (https://github.com/matthiasbeyer)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.5.0"
notes = "I am the author and maintainer of this crate."
aggregated-from = [
    "https://github.com/matthiasbeyer/crev-proofs#HT24oErbY-0x-yt9mGMZEk5S07lzpFQ4kayzEkVxJWU",
    "crev:review/NJhz5lQ0Pgd1WprZehzD7p_zf52cvSMRgdrFvdgLg1U",
]

[[audits.resize]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.5.5"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/R77ng44LT5KRNoaYBTSttZv4lwNT6SgzoyaKiVGoZKk",
]

[[audits.rexif]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.5.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/zvlxZP3ukKs058X6GiFQCmCv_NL1bd3EAvsLw4pW6tg",
]

[[audits.rgb]]
who = "\"HeroicKatora\" (https://github.com/HeroicKatora)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.8.20"
notes = """
On first glance you'll find a lot of unsafety but most of it is (now) benign.
The largest parts are casting a transparent, repr-C wrapper struct to native
arrays or slices and forwarding impls of bytemuck::{Pod, Zeroable}
accordingly. There's a derive crate for bytemuck that may be used instead.
There are not a lot of safety comments but not a lot of invariants used
either."""
aggregated-from = [
    "https://github.com/HeroicKatora/crev-proofs#-sApEowWcAS9J0R7aO18cghvhLBpuMhyeUuWQq_fits",
    "crev:review/mawyPQfc3L3jIObZEC87TzgXWdlb3IRa24pEh5LtGcE",
]

[[audits.rgb]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.8.20"
notes = "Fixed soundness of ComponentBytes"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/dXfJpD6Fkn0Z4nu5tTFg_Y3i8mQOzazvhu5XlQisgN8",
]

[[audits.riff]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/Nuq6QNs6Bp6O7SGwQVC-D4cTku48Lu3eghqQgcLI6_Q",
]

[[audits.riot-sys]]
who = "\"chrysn\" (https://gitlab.com/chrysn)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-run",
]
version = "0.7.0"
notes = """
Own-crate review. Does what it says on the packaging. Not safe in a 'safe to
use' sense, but then again this is not to be expected from a -sys crate (all
functions are declared unsafe)."""
aggregated-from = [
    "https://gitlab.com/chrysn/crev-proofs#bYdCa4xhd5VL4dlcVPBxV51PrW5joFp9U04rKgcTvk8",
    "crev:review/ZG3bb6Lft097H7dCL0T4G4-HiToyLFF3FdmXIZTZilU",
]

[[audits.riot-wrappers]]
who = "\"chrysn\" (https://gitlab.com/chrysn)"
criteria = [
    "neutral",
    "level-medium",
    "trust-medium",
    "safe-to-run",
]
version = "0.7.15"
notes = """
Own-crate review. Mixed quality; some older interfaces are built on a flawed
understanding of Pin and are not fully safe; these are being worked on."""
aggregated-from = [
    "https://gitlab.com/chrysn/crev-proofs#bYdCa4xhd5VL4dlcVPBxV51PrW5joFp9U04rKgcTvk8",
    "crev:review/F9rVYlkD39WH-fJ3a7ztrJB3uIbSVtg3EYJzgwXGU30",
]

[[audits.rle-decode-fast]]
who = "\"lo48576\" (https://github.com/lo48576)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.1"
notes = "This crate contains a single `unsafe` block and it seems ok."
aggregated-from = [
    "https://github.com/lo48576/crev-proofs#wO-tKiJm4SRMJeJSAo_gT54GAoY2KhwMGHzEZUcTmbk",
    "crev:review/tioE3N5IXXWpG7IEk2EsBEEA7ph1p-VEZFC2XbvpauM",
]

[[audits.rmp-serde]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.15.4"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/ZR82VB7s9XBsL_dfWevL-pClvyYAWYnm8YXSEEP92Ak",
]

[[audits.rmpv]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.4.7"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/uyGezDoCzLKEW3ICsniSq1L9XPDi0MuYql9tk0ksZgI",
]

[[audits.rpassword]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "strong",
    "level-low",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "2.1.0"
notes = "LGTM, small amount of `unsafe` for terminal manipulation"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/wGRSwujVT7T-MGd29fqo86TxqAXsrovQHFaZCRsfHVE",
]

[[audits.rprompt]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "strong",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.3"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/k6P-o5Dxm5mLxuOYjcN_AQ-NH4zauA41EOI6hOKXlsA",
]

[[audits.rst_parser]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.4.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/Yo4VBJvMll-ydf2ip-SHSryoCzzsKGXRLPln5oGU5gs",
]

[[audits.ructe]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.5.6"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/icbB3avJl10nJyMMLTjKbJKDQM7nqrQSsD6PPvLSXG8",
]

[[audits.rusoto_core]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.47.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/eYgBBm2A88sjlZjDsVVKuGIJBwtqpayR-APfSfXIHtY",
]

[[audits.rusqlite]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.19.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/U4AT0uu-BR5cI39T16lZQtB9FtXpOkINdy6XZvMsgPc",
]

[[audits.rust-argon2]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.8.3"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/_l_n2PXiJjyYbac3tSbu-87v8pVHIDhMRTcrNoCOAoQ",
]

[[audits.rust_hawktracer_proc_macro]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "neutral",
    "level-medium",
    "trust-high",
    "safe-to-run",
]
version = "0.4.1"
notes = "It doesn't use robust parsing and doesn't validate inputs. It's probably fine anyway."
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/KYnQi_xQ8XdyQG5TGT5dqTXMM7t66Y46HKHuXGpxr64",
]

[[audits.rust_hawktracer_sys]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "negative",
    "level-low",
    "trust-high",
]
version = "0.4.2"
notes = "Has public functions that take arbitrary raw pointers, but aren't marked as unsafe"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/7EdGbbLCW15DfxdcZdlu1FUHp-e691PwkbyltL8wiy8",
]

[[audits.rustbox]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "negative",
    "level-low",
    "trust-high",
]
version = "0.11.0"
notes = "Not really actively maintained, and pieces of functionality missing. I'm going to try `termion` instead."
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/oNObLNSwTpQnkdBID38NH4vSxzsa3BSwDmPL4SyCejs",
]

[[audits.rustc-workspace-hack]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-run",
]
version = "1.0.0"
notes = "I am confused why this crate exists, but it looks harmless."
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/geN_oIfFFau86x9xITZZGbELXppEc0kSKzTRBkldIiA",
]

[[audits.rustc_version]]
who = "\"programmerjake\" (https://github.com/programmerjake)"
criteria = [
    "positive",
    "level-medium",
    "trust-low",
]
version = "0.3.0"
notes = "read through v0.3.0 code after contributing to master version"
aggregated-from = [
    "https://github.com/programmerjake/crev-proofs#dUc4luSnPuYlfYarXUizPOSBLUBZguTVOQUCHmAKSps",
    "crev:review/0pvGte6EYts-Yck3xQR3wB8QXF_31KnwqWDnAdxzap4",
]

[[audits.rustc_version]]
who = "\"icefox\" (https://git.sr.ht/~icefox)"
criteria = [
    "neutral",
    "level-medium",
    "trust-medium",
    "safe-to-run",
]
version = "0.2.3"
notes = "It can be told to execute arbitrary programs via env var, but does nothing malicious itself."
aggregated-from = [
    "https://git.sr.ht/~icefox/crev-proofs#lr2ldir9XdBsKQkW3YGpRIO2pxhtSucdzf3M5ivfv4A",
    "crev:review/c3arU7uD168j3SPVhy5Eika463oDjDzDt-c0TsHTrcw",
]

[[audits.rustify]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.5.3"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/xhNrrruLBJHhN2LAqnGWMFl1u7U86nOU8Aac1KM1yLM",
]

[[audits.rustify_derive]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.5.2"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/5pq74ioK7yXOhGYfwJSZZAnfQxPG_20BHSPKiMpUW8M",
]

[[audits.rustracing]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.4.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/5JIOdqC_fOoQrTv2ERfasDW51GbE-d90bf_VAxp4Vms",
]

[[audits.rustracing_jaeger]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.5.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/9D5VX-GR8xucjILcyT24KpUqy9K2Ui64PHo7Ed30jBo",
]

[[audits.rusttype]]
who = "\"remram44\" (https://github.com/remram44)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.7.9"
notes = """
Simply depends on and re-export rusttype 0.8.0
"""
aggregated-from = [
    "https://github.com/remram44/crev-proofs#V_B2pKpHVBIp_NegKfur4MK9GqFo0o78ijhku90pYS0",
    "crev:review/KF1-AxrWSKMsyuSxO-qnVtvRBghDv7uWl9YKm8fBm8U",
]

[[audits.rustversion]]
who = "\"jhpratt\" (https://github.com/jhpratt)"
criteria = [
    "strong",
    "level-low",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.1"
notes = """
This crate makes minimal assumptions about data; the only ones made are ones
that will hold true for a significant amount of time. One assumption will not
be invalid until the year 2100, while another is that there will not be a
Rust 2. The code will likely be updated (or integrated into std) long before
either of these become an issue.

Aside from these minimal, relatively safe assumptions, the code looks great."""
aggregated-from = [
    "https://github.com/jhpratt/crev-proofs#qaK7beyMfX1tZsTpvRigDsDmXiePQhAAlBXwWx5KmXE",
    "crev:review/ewqjNE4eI6wTPSWCD2C9m_h1AX3A-1MQipMd5cuyjLA",
]

[[audits.rustversion]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.0"
notes = """
Excellent looking crate.
Full notes:  https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/rustversion.md#100
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/FwCilEKoNTdwyJg9A-AiFRjQivPTzf3b9Zz5ofn8Ohc",
]

[[audits.ryu]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "1.0.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/ibp9yWcllqFuneLIkiuf5GneDOX7M_Fmi1ziOYdR6zI",
]

[[audits.safemem]]
who = "\"KonradBorowski\" (https://gitlab.com/KonradBorowski)"
criteria = [
    "strong",
    "level-high",
    "trust-low",
]
delta = "0.3.0 -> 0.3.1"
aggregated-from = [
    "https://gitlab.com/KonradBorowski/crev-proofs#ZOm7om6WZyEf3SBmDC69BXs8sc1VPniYx7Nfz2Du6hM",
    "crev:review/DxcR_uiAtBd8r8xowKhDevfNI_7FVpTdXu-YjQpvwr4",
]

[[audits.safemem]]
who = "\"KonradBorowski\" (https://gitlab.com/KonradBorowski)"
criteria = [
    "negative",
    "level-high",
    "trust-low",
]
version = "0.3.0"
notes = "copy_over and prepend functions cause UB"
aggregated-from = [
    "https://gitlab.com/KonradBorowski/crev-proofs#ZOm7om6WZyEf3SBmDC69BXs8sc1VPniYx7Nfz2Du6hM",
    "crev:review/iKfP6IQ2D0KUcPBog_JNA93BoH6n95q7EVr8M5uuQ6o",
]

[[audits.same-file]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "1.0.5"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/39_dhF3sVlu4KW6MK24rLRiagUDvQbHBXfmyrXmC2vk",
]

[[audits.saturating]]
who = "\"vlad20012\" (https://github.com/vlad20012)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.0"
notes = """
It's a pretty simple library, the code is very similar to `std::num::Wrapping`,
there's zero unsafe code.
There's a lack of tests, unfortunately"""
aggregated-from = [
    "https://github.com/vlad20012/crev-proofs#AZ7vUkGvANHlXnQtbHBZ7KCDqIbtE7HdSOPNz51MedM",
    "crev:review/3a6kTV2FfAg1Cw47F-PLwTLCCvFkAgk2XVrl92b1kXc",
]

[[audits.scan_fmt]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.2.5"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/eRYfXkW-bJEiMBPP_ntvRrJze0acL9p4yNqV1JALMs8",
]

[[audits.scopeguard]]
who = "\"HeroicKatora\" (https://github.com/HeroicKatora)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.1.0"
notes = """
Small, stable, and highly useful.

Most of the code is straightforward but to increase usability there are three
`unsafe` blocks. It seems feasible to write a completely safe version of the
API without hurting the main use case too much. The benefit, however, would
be slim except for those focussed on purging even well-reviewed local
`unsafe`. Let's explain how we agree with all reasoning, and documentation.

src/lib.rs:351:`ScopeGuard::into_inner`: Here it performs a manual move from
a to-be-forgotten value that can't be destructured due to the rules around
Drop types. It's slightly awkward to use `mem::forget` _after_ the copy
instead of wrapping the value in a `ManuallyDrop` at the start but the
comment correctly explains why the order is equivalent and still sound. It
also seems odd that this pseudo-destructuring does not return the function
instance but only the value and thus always drops the functor which
potentially also drops any contained captured value and thus might panic.
That seems more ergonomic in the common case or when a pure function is used,
so it isn't critical.

src/lib.rs:422:`impl Sync`: This is likely the most involved here but the
comment explains it well enough. It might have been/be beneficial to create a
very small newtype wrapper that enforces that no such access by reference can
take place in future versions of the crate also. This would also reduce the
mental load, as this impl with all its type bounds would not be explicitly
required. It would nevertheless not reduce the amount of necessary soundness
reasoning so this is just polish.

src/lib.rs:455:`Drop::drop for ScopeGuard`: Same as `into_inner` but since
this is within the Drop impl there is no need (and possibility) to forget
`self` so this is self-explanatory. This could share a common core with the
`into_inner` method, a private inherent method that `ptr::read`'s the stored
values. Avoiding duplication here would be more important if different ways
of destructuring existed."""
aggregated-from = [
    "https://github.com/HeroicKatora/crev-proofs#-sApEowWcAS9J0R7aO18cghvhLBpuMhyeUuWQq_fits",
    "crev:review/8PjuFbpODn7lNUPG8Xc1YmyvxIyCZLpb-x-jpF1pVmU",
]

[[audits.scratch]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "strong",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
delta = "1.0.0 -> 1.0.1"
notes = "There were no material changes since 1.0.0, the main code wasn't even touched."
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/Vjlj-UZ5YEFBQePKCFy6j8r8OoB4gOn_VPgnOH6nHZ8",
]

[[audits.scratch]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "strong",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.0"
notes = """
Trivial (but useful!) crate that creates a temporary directory which can be
seen by any crate that depends on this one.

There are just 6 lines of actual code here. They read OUT_DIR from
environment, and create/remove some directories.

A rogue crate could include this one and use it to stomp on some other
crate's scratch space. It's hard for me to see this as a vulnerability, since
the user is supposed to trust the code they're running during the build."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/TCmfQImAjamlZ43j4chrv1EpLGpQjKTsGxQF7SI85_w",
]

[[audits.sct]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.6.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/fob8AaK-daV3m9l5KGeQB-Tcq-ya-Z5u5DEJEkEiPts",
]

[[audits.secp256k1]]
who = "\"tcharding\" (https://github.com/tcharding)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.27.0"
notes = "I attest that this version of the library is secure to the best of my knowledge, I am not a cryptographer."
aggregated-from = [
    "https://github.com/tcharding/crev-proofs#Df2R3MuKZTrPtFwmRvCfArOTY2E3IlKBJEEXqk_YMvY",
    "crev:review/wbWqKrihtBozun4NNJBlvvXhnbRJQ3BD8vlYG4TD_M0",
]

[[audits.secp256k1-sys]]
who = "\"tcharding\" (https://github.com/tcharding)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.8.1"
notes = """
I attest that this version of the library is secure to the best of my knowledge. I am only attesting to this crate (the FFI layer) not the underlying C code (libsecp256k1), I am not a  cryptographer.
 """
aggregated-from = [
    "https://github.com/tcharding/crev-proofs#Df2R3MuKZTrPtFwmRvCfArOTY2E3IlKBJEEXqk_YMvY",
    "crev:review/o5mDMGuAkOgwD38wQSTcwAnrMWjfgR7hlI78C5Z5O2w",
]

[[audits.secret_integers]]
who = "\"HeroicKatora\" (https://github.com/HeroicKatora)"
criteria = [
    "negative",
    "level-medium",
    "trust-high",
]
version = "0.1.5"
notes = """
The crate contains no comments on how the supposed constant time operations
are actually achieved. There is no mention of a memory model, no discussion
of references, black boxes, speculation, optimization, etc. And on top of
these theoretical shortcomings the crate also contains no tests to verify any
of their assumptions. This means: no `asm` output review, no smoke tests for
operation's time dependencies and a general lack of even functional tests.

The `classify` method is just a glorified constructor and even contains a
generic which will in general have no guarantees and is totally misplaced
here. And `declassify` doesn't really do anything since the whole type state
can always be dereferenced into the underlying type if the compiler pleases
(and, oh, it will).

An unexplained fill-horn of converters is added. Since they do not perform
any more robust sequencing or basic optimization barriers, one might as well
use the `classify` constructor instead. They are even declared `#[inline]`!

Some allocating to-bytes converters are offered. Despite plainly leaking all
values into the global heap without any protection or zeroing after
expiration, they have no documentation, unlike much less dangerous methods.

Despite the fact that several operations are disallowed as a 'security
feature', an inconsistent other set is allowed. Overflow checked operations
will, almost by definition, at least contain conditional moves if compiled
naively using the built-ins. But for some unexplained reason, the division
operation of all is untrusted!

Many other such ops -- with invalid and panicking inputs or similar -- exist:
Rotations will probably do a branch on the input value, additions overflow
check and complain etc. in debug code. Maybe the bitwise operations are not
totally broken.

WORST! Some operations are transliterated from WireGuard. But they contain
TYPOS that plainly contradict newly introduced variable names. How do they
even work? It is not explained.

By the way, the code is copied from a GPL licensed project (WireGuard) but
the crate itself LOOKS like an MIT license but actually mentions APACHE
within the text. So this might also be a licensing risk for the future.
"""
aggregated-from = [
    "https://github.com/HeroicKatora/crev-proofs#-sApEowWcAS9J0R7aO18cghvhLBpuMhyeUuWQq_fits",
    "crev:review/6KrxNPo3AvjnIu3RxuXc0yzJYi_s8Ph566-sUx2FQrs",
]

[[audits.section_testing]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.0.5"
notes = """
This crate implements \"section testing\" similar to Catch2 framework for C++.

The code is pure Rust, there is no dependencies, and there are no \"unsafe\".
As such, there are no worries about unsoundness.

However, the algorithm here is pretty involved, and after spending 20 minutes
staring at it, I still can't claim I grok how this code actually achieves
what it achieves. However, I *am* confident that this code is not malicious,
thus a positive rating."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/_o2f6dtwybeFw6V42Pqsgw1xgOOgA08-k4mwWfz_XFA",
]

[[audits.security-framework]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "2.1.2"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/h1FbrDaPjS1ngObwSQEnE2KJeu_uJcz_SiMoKEc4n1s",
]

[[audits.security-framework]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.0-alpha.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/Z64LULkYVVxiwWRAlqnGo1Z8eICoYCqlWn_FWzO7ros",
]

[[audits.security-framework]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.2.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/JQTTvO914lwQiAec5dOp62w16LlXm1hpksleyCA-qas",
]

[[audits.security-framework-sys]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "2.1.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/tA_45JyTCnySOisllsH8P9XXHTaj27aNrOWA6PfSe-w",
]

[[audits.self_update]]
who = "\"niklasf\" (https://github.com/niklasf)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.24.0"
notes = "Reviewed superficially and found not to be malicious."
aggregated-from = [
    "https://github.com/niklasf/crev-proofs#a0hN0qYwwDTmHtAchnTXiF-I_L9rK1KL5kgCmQoYR9o",
    "crev:review/CTsae9Sk-PFQvxb7FhCdMIfHECKoZoBBkIYBJglzsoo",
]

[[audits.semver-parser]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.9.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/tYa6hzhQxoHhu-tkDD41j83SBZAumk5dtwGQb_6WiOg",
]

[[audits.sentry-contexts]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.23.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/FCcKjyJARavo039pvYTlgVTpoGIJcsQ4-SuO3lE7F8w",
]

[[audits.sentry-core]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.23.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/DKVX45VPimHVFKgQEFVCT7I_ppbMwZ0r__AQ5uG8_nE",
]

[[audits.serde]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "strong",
    "level-low",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.101"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/SVEncbbEoQxdX_uzjGNGXXLSQS5q8zpU-WksMhQ6PV0",
]

[[audits.serde-feature-hack]]
who = "\"KonradBorowski\" (https://gitlab.com/KonradBorowski)"
criteria = [
    "strong",
    "level-high",
    "trust-low",
]
version = "0.2.0"
notes = "Re-export of serde to workaround crates being implicit features"
aggregated-from = [
    "https://gitlab.com/KonradBorowski/crev-proofs#ZOm7om6WZyEf3SBmDC69BXs8sc1VPniYx7Nfz2Du6hM",
    "crev:review/2b9UHCqZo9SBYfZcY5qRDy3E2W1sYoTgdzjlmOVLOr0",
]

[[audits.serial_test]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.5.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/bG1vx15sR76YezOdG7YRVGcwTg-nPGMz76djfBPrgx0",
]

[[audits.sha2]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.8.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/YWaRUbKYzqJe3VQkygnecX8BZtCGDdA6C9GQJdrRP8Y",
]

[[audits.shakmaty]]
who = "\"niklasf\" (https://github.com/niklasf)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.20.1"
notes = """
This is a self-assessment. I am the author of this crate.

Soundness: I am highly confident in soundness. Unfortunately, I could not
avoid two kinds of unsafe blocks, without major performance impact.
Instead, all preconditions are explained thoroughly in comments and asserted
with debug assertions.

(1) The optimizer does not reliably elide bounds checks based on the
assumption that u64::trailing_zeros() will never be larger than 63.
This is important in many hot loops.

(2) The perfect hash function for attack lookups always stays within bounds.
This technique is called Magic Bitboards, widely used and very well
understood in the chess community. When selecting magic factors, exactly this
assumption is tested for all possible inputs.

Correctness: For move generation in standard chess, confidence is based
on a large test suite of randomly generated, as well as historical and tricky
positions, so called perft tests. The numbers are shared in the chess
community and compared across a wide array of implementations.

I am gradually less confident in other features, especially chess variants,
simply because they are less popular and played less often, and Zobrist
hashing, a recent feature addition.

The library has been used to parse 1 billion recorded real world games
(https://database.lichess.org). Some bugs have been found, but in the source
of the data, not this library.

For handling of input formats (FEN, SAN, UCI) I reviewed the code thoroughly
and used fuzz testing to ensure absence of DOS/panics."""
aggregated-from = [
    "https://github.com/niklasf/crev-proofs#a0hN0qYwwDTmHtAchnTXiF-I_L9rK1KL5kgCmQoYR9o",
    "crev:review/TegT2tehDkbrkdiCb93Wl6SAiKSP5vBo0HkpHgw1BOs",
]

[[audits.shakmaty-syzygy]]
who = "\"niklasf\" (https://github.com/niklasf)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
delta = "0.13.0 -> 0.15.0"
notes = """
Probes Syzygy tablebases.

This is a self-assessment. I am the author of this crate.

Soundness: The crate uses no unsafe code. Unlike existing implementations in
C/C++, I made a deliberate choice to use the safer pread instead of mmap,
despite performance costs.

Panics/DOS: I carefully reviewed the code to ensure that all loops and
all recursion is bounded. I used fuzz testing to simulate corrupted tablebase
files. Nonetheless, it is best to verify the checksums of tablebase files
before use, if only for transmission errors.

Correctness: The test suite compares the probe results of random and hand
picked positions with multiple independent implementations (in other
languages). The library has also been used by researchers and players
(through the https://lichess.org/analysis#explorer and
https://syzygy-tables.info frontends) for years, without reported
inconsistencies.

I am gradually less confident in the implementation of variant tablebases,
simply because they are less popular and used less frequently.

During the development of 7-piece Syzygy tablebases, this library was used
successfully to find inconsistencies in the new tablebase files. See
http://www.talkchess.com/forum3/viewtopic.php?start=0&t=66797&topic_view=flat
for details.

The Syzygy format itself has a stellar reputation in the chess community."""
aggregated-from = [
    "https://github.com/niklasf/crev-proofs#a0hN0qYwwDTmHtAchnTXiF-I_L9rK1KL5kgCmQoYR9o",
    "crev:review/6QP96aeqK5KSSsFOEHCXtM0PFPSGawHHLO1FEuwdcYo",
]

[[audits.shakmaty-syzygy]]
who = "\"niklasf\" (https://github.com/niklasf)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.13.0"
notes = """
Probes Syzygy tablebases.

This is a self-assessment. I am the author of this crate.

Soundness: The crate uses no unsafe code. Unlike existing implementations in
C/C++, I made a deliberate choice to use the safer pread instead of mmap,
despite performance costs.

Panics/DOS: I carefully reviewed the code to ensure that all loops and
all recursion is bounded. I used fuzz testing to simulate corrupted tablebase
files. Nonetheless, it is best to verify the checksums of tablebase files
before use, if only for transmission errors.

Correctness: The test suite compares the probe results of random and hand
picked positions with multiple independent implementations (in other
languages). The library has also been used by researchers and players
(through the https://lichess.org/analysis#explorer and
https://syzygy-tables.info frontends) for years, without reported
inconsistencies.

I am gradually less confident in the implementation of variant tablebases,
simply because they are less popular and used less frequently.

During the development of 7-piece Syzygy tablebases, this library was used
successfully to find inconsistencies in the new tablebase files. See
http://www.talkchess.com/forum3/viewtopic.php?start=0&t=66797&topic_view=flat
for details.

The Syzygy format itself has a stellar reputation in the chess community."""
aggregated-from = [
    "https://github.com/niklasf/crev-proofs#a0hN0qYwwDTmHtAchnTXiF-I_L9rK1KL5kgCmQoYR9o",
    "crev:review/fIEkTU5Zr9lBBL8YVn3jX4trUrsw83Qr68FnZa_bQWs",
]

[[audits.shell-escape]]
who = "\"niklasf\" (https://github.com/niklasf)"
criteria = [
    "negative",
    "level-low",
    "trust-medium",
]
version = "0.1.5"
notes = """
This small crate implements Windows-style and Unix-style shell escaping.
Its not clear which exactly are the supported shells, so its hard
to guarantee the escaping is safe for all possible ones (although it
looks fine for all common shells).

A second worry is the runtime detection of the current shell, where an
environment variabe (MSYSTEM) can be used to change the escaping style to
Unix. For users of the crate, if the environment is known, I would recommend
explicitly specifying it, instead of relying on the detection.

The exposed functions have the signature Cow<str> -> Cow<str>. It would seem
that &str -> Cow<str> is more natural.

I do not know if character encodings play a role, here, and if str is the
correct type to be working with."""
aggregated-from = [
    "https://github.com/niklasf/crev-proofs#a0hN0qYwwDTmHtAchnTXiF-I_L9rK1KL5kgCmQoYR9o",
    "crev:review/58BW0-X0G3Q7OHovFEYBStUbDXj8G29D2EwiCQWFmMI",
]

[[audits.shell-escape]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.1.4"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/TbCT2_WpJwaygzfoQTluiqgGFeRmiAkS2xYKP1sIOd0",
]

[[audits.shellexpand]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
delta = "0.1.0 -> 1.0.0"
notes = """
Pros:
* 100% safe code.
* 0 dependencies.
* Does exactly what it's supposed to do.
* Great test coverage.

Cons:
* Might want to feature-gate functions which assume std::env access under the hood.
* Env access (but that's the whole point)
* No ~username/ support.
* No %ENV% support (windows style env var syntax... or maybe that's a feature?).

1.0.0
=====
* Minor breaking changes
* Typo fixes
* Missing example fixes

0.1.0
=====
| File                                          | Rating | Notes |
| --------------------------------------------- | ------ | ----- |
| [src/lib.rs](src/lib.rs)                      | +1 | |
| .cargo-ok                                     | +1 | |
| .gitignore                                    | +1 | |
| .travis.yml                                   | +1 | Installs travis-cargo
| Cargo.lock                                    | +1 | |
| Cargo.toml                                    | +1 | No 3rd party deps
| LICENSE-APACHE                                | +1 | |
| LICENSE-MIT                                   | +1 | |
| Readme.md                                     | +1 | Properly dual licensed

| Other     | Rating | Notes |
| --------- | ------ | ----- |
| unsafe    | +1 | None
| miri      | -1 | \"can't call foreign function: GetCurrentProcess\"
| fs        | +1 | None
| io        |  0 | Hardcoded env fns might need to be featured out for browser WASM targets
| docs      | +1 | |
| tests     | +1 | Doc tests

src/lib.rs
----------
| Line  | What  | Notes |
| -----:| ----- | ----- |
| 1     | lib.rs doc comments                       | +1
| 155   | fn full_with_context                      | +1
| 229   | fn full_with_context_no_errors            | +1
| 283   | fn full                                   | +1
| 295   | struct LookupError                        | +1
| 303   | impl Display for LookupError              | +1
| 309   | impl Error for LookupError                | +1
| 314   | macro_rules try_lookup!                   | +1
| 323   | fn is_valid_var_name_char                 | +1 - includes unicode, as mentioned in docs
| 393   | fn env_with_context                       | +1
| 506   | fn env_with_context_no_errors             | +1
| 552   | fn env                                    | +1
| 584   | fn tilde_with_context                     | 0 - example incomplete
| 633   | fn tilde                                  | +1
| 637   | mod tilde_tets                            | +1
| 675   | mod env_test                              | +1
| 821   | mod full_tests                            | +1

TIL
---
Apparently you *can* use references link style for badge images.  Huh!  I should use that for reviews...
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/75RIcAOtIysxWOYl9e9JHczkzoEvzeC-2WTAE1PjDG4",
]

[[audits.shellexpand]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.0"
notes = """
Pros:
* 100% safe code.
* 0 dependencies.
* Does exactly what it's supposed to do.
* Great test coverage.

Cons:
* Might want to feature-gate functions which assume std::env access under the hood.
* Env access (but that's the whole point)
* No ~username/ support.
* No %ENV% support (windows style env var syntax... or maybe that's a feature?).

0.1.0
=====
| File                                          | Rating | Notes |
| --------------------------------------------- | ------ | ----- |
| [src/lib.rs](src/lib.rs)                      | +1 | |
| .cargo-ok                                     | +1 | |
| .gitignore                                    | +1 | |
| .travis.yml                                   | +1 | Installs travis-cargo
| Cargo.lock                                    | +1 | |
| Cargo.toml                                    | +1 | No 3rd party deps
| LICENSE-APACHE                                | +1 | |
| LICENSE-MIT                                   | +1 | |
| Readme.md                                     | +1 | Properly dual licensed

| Other     | Rating | Notes |
| --------- | ------ | ----- |
| unsafe    | +1 | None
| miri      | -1 | \"can't call foreign function: GetCurrentProcess\"
| fs        | +1 | None
| io        |  0 | Hardcoded env fns might need to be featured out for browser WASM targets
| docs      | +1 | |
| tests     | +1 | Doc tests

src/lib.rs
----------
| Line  | What  | Notes |
| -----:| ----- | ----- |
| 1     | lib.rs doc comments                       | +1
| 155   | fn full_with_context                      | +1
| 229   | fn full_with_context_no_errors            | +1
| 283   | fn full                                   | +1
| 295   | struct LookupError                        | +1
| 303   | impl Display for LookupError              | +1
| 309   | impl Error for LookupError                | +1
| 314   | macro_rules try_lookup!                   | +1
| 323   | fn is_valid_var_name_char                 | +1 - includes unicode, as mentioned in docs
| 393   | fn env_with_context                       | +1
| 506   | fn env_with_context_no_errors             | +1
| 552   | fn env                                    | +1
| 584   | fn tilde_with_context                     | 0 - example incomplete
| 633   | fn tilde                                  | +1
| 637   | mod tilde_tets                            | +1
| 675   | mod env_test                              | +1
| 821   | mod full_tests                            | +1

TIL
---
Apparently you *can* use references link style for badge images.  Huh!  I should use that for reviews...
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/AfMQU1eTT154FHvcTvPLDRQNn0_X8mPoVfVBnsC-xJ4",
]

[[audits.shellwords]]
who = "\"kpcyrd\" (https://github.com/kpcyrd)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.0"
aggregated-from = [
    "https://github.com/kpcyrd/crev-proofs#ZGgmIacywCRKLa33k7W04VFcK-glDkcBXKG4oF7t--4",
    "crev:review/qwRoCCzrhnkh5i9ZPvQut79hgYzfd1ugaKI_gwkFmqU",
]

[[audits.signal]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.6.0"
notes = "Small, but full of low-level `unsafe` signal handling. LGTM, but it low intensity review."
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/xpZm4WYEU-pOr1JCVTtgkDSeGAVkzKP8SW8U2iCYixg",
]

[[audits.signal-hook]]
who = "\"qnighy\" (https://github.com/qnighy)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.1.10"
notes = "I've once made a patch for it and I understand the basic workings of the library. It's written carefully with understanding of how signal works."
aggregated-from = [
    "https://github.com/qnighy/crev-proofs#fkkJ3Z6xSDEZwFlyKgIDxYS2x6mS7b2cxbWBeEWgfXs",
    "crev:review/ZXfACcxCwBX7-eV0iFKy-4nBFFU6KFHJX2CUBR3MwKo",
]

[[audits.signal-hook-registry]]
who = "\"qnighy\" (https://github.com/qnighy)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "1.0.1"
notes = "I've once made a patch for it and I understand the basic workings of the library. It's written carefully with understanding of how signal works."
aggregated-from = [
    "https://github.com/qnighy/crev-proofs#fkkJ3Z6xSDEZwFlyKgIDxYS2x6mS7b2cxbWBeEWgfXs",
    "crev:review/M6s96IrLfbPWKhIPUxJnOHakrKLyRDZaYAJ8ZPczUJU",
]

[[audits.simd_helpers]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.1.0"
notes = "it just splits a string"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/zELyv9dQMuxb1vNqmt1_JP2AEeKIANkvH0ugFrumf3U",
]

[[audits.simple-soft-float]]
who = "\"programmerjake\" (https://github.com/programmerjake)"
criteria = [
    "positive",
    "level-medium",
    "trust-low",
]
version = "0.1.0"
notes = """
original author
"""
aggregated-from = [
    "https://github.com/programmerjake/crev-proofs#dUc4luSnPuYlfYarXUizPOSBLUBZguTVOQUCHmAKSps",
    "crev:review/G5hsDlT3_IXHKqRS1sslS8QirXpCt8YlsZ_VcKl4dJo",
]

[[audits.simple-text-pattern]]
who = "\"dbrgn\" (https://github.com/dbrgn)"
criteria = [
    "neutral",
    "level-medium",
    "trust-medium",
    "safe-to-run",
]
version = "0.1.0"
notes = """
Overall the code looks clean and easy to understand, with the exception of
the is_match / handle_text functions in lib.rs... Those are a bit hard to wrap
the head around and could probably be refactored for easier understanding.

Performancewise I have the feeling that a few allocations could be avoided,
but I didn't fully think through alternative implementations."""
aggregated-from = [
    "https://github.com/dbrgn/crev-proofs#ILvan_fvVdN8cSH8GC7kB_h-3W6xWnafsCUTpdoTxQ4",
    "crev:review/Aq3ZRR-p7mxzI0s7mc1clMoq_vzcd9GO6r-CdqYNTy0",
]

[[audits.sized-chunks]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.6.3"
notes = "Fixes reported soundness issues"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/wPgQdW357rZcsdyT6Ez03elvndOhVJ9dK--7w0vsT34",
]

[[audits.slab]]
who = "\"LovecraftianHorror\" (https://github.com/LovecraftianHorror)"
criteria = [
    "strong",
    "level-high",
    "trust-low",
]
version = "0.4.7"
notes = """
## Fundamental

* [x] Well maintained?
  * Maintained by the Tokio project
* [x] Well documented?
* [x] Sane dep tree?
  * Build dependency on `autocfg` and optional dependency on `serde` :)
* [x] Good test coverage?
  * Good when including the unstable `--doctests` option
  * 90.7% line coverage with `cargo +nightly llvm-cov --doctests`
* [x] Tests are passing?
* [x] `cargo audit` is happy?

## Nice to have

* [x] `cargo check` is happy?
* [x] `rustfmt` is happy?
* [x] `clippy` is happy?
  * Happy on 1.66.1 at least
* [x] No outdated deps?

## Build scripts

* [x] Build script(s) seem sane?
  * Only used to gate off `cfg`s for different rust versions

## `unsafe` Review

* [x] Directly uses `unsafe`?
* [x] Passes `miri` if using `unsafe`?
  * `unsafe` methods are tested and this is enforced with CI

Only uses `unsafe` to expose three unsafe methods on `Slab`

`Slab::get_unchecked()` is just an analog to `[T]::get_unchecked()` and
internally calls `[T]::get_unchecked()` on the underlying vector. The caller
MUST call this method on an occupied entry within the bounds of the underlying
vector. Calling it outside of bounds is undefined behavior while calling it on
a `Vacant` entry will panic (hits `unreachable!()`) although this may be
relaxed to `unreachable_unchecked()` in the future a la
https://github.com/tokio-rs/slab/issues/40

`Slab::get_unchecked_mut()` is the same situation as `Slab::get_unchecked()`.
Also an analog of the slice method and also the same UB and panic behavior

`Slab::get2_unchecked_mut()` provides a way to get a mutable reference to two
elements in the `Slab` without bounds checking. This has the same invariants
as the other two (UB if out of range and panics on `Vacant` entries) along
with the additional invariant that the two elements have to be different to
prevent multiple mutable references to the same element. The last invariant is
enforced with a debug assert. Because there is no analog for slices this
manually implements the addressing in a similar way to
`[T]::get_unchecked_mut()` although it would be nice to have a debug assert
that the indices are in range (the standard library uses
`assert_unsafe_precondition!()` to do this on `[T]::get_unchecked()` and
`[T]::get_unchecked_mut()` which gets picked up by `cargo-careful`)

## General Review

`lib.rs`

Essentially a `Vec` where removed elements get replaced by a vacant entry
marker instead of shifting down all later values to compact. All vacant
entries store an index pointing to some other vacant entry with the last
vacant entry pointing to the end of the `Slab`. The `Slab` itself then stores
a `next` value pointing to the top of the stack so that it can keep track of
where all vacant entries are to efficiently push on new values. These
underlying entries are never publicly exposed to prevent users from mangling
this stack

Overall everything looks good. The `Slab` seems to correctly maintain its
invariants at all times and there is a nice sprinkling of asserts and debug
asserts to handle sanity checking

`serde.rs`

Contains the optional `serde::{Serialize, Deserialize}` impls for `Slab`. It
just (de)serializes as a map with the deserialization performing the same
operations as the `FromIterator` implementation"""
aggregated-from = [
    "https://github.com/LovecraftianHorror/crev-proofs#PTlVqKJclK7ELjugGnh_nDgpaWLAAGRIg5UH391WKnQ",
    "crev:review/oHd_Ytsreh27Wx0KlPRMxEvjD1Ya5HNsmcQj5J6mmY4",
]

[[audits.slab]]
who = "\"HeroicKatora\" (https://github.com/HeroicKatora)"
criteria = [
    "strong",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.4.1"
notes = """
No internal use of unsafe. Only an get_unchecked unsafe api without bounds
that translates directly to Vec and does not exploit the possible unsafety in
its implementation to the fullest extent (unreachable instead of
unreachable_unchecked).
"""
aggregated-from = [
    "https://github.com/HeroicKatora/crev-proofs#-sApEowWcAS9J0R7aO18cghvhLBpuMhyeUuWQq_fits",
    "crev:review/nElqgCQkTxBtzNfAG-lx4JJsRr2AhQF5tECRDC-meFk",
]

[[audits.slice-dst]]
who = "\"cad97\" (https://github.com/cad97)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.0"
notes = """
I am the author of this crate. As such, I obviously trust it and believe it is useful.
So this review will instead point at the trickiest parts and try to rationalize them.

First and foremost, a caution: `YOLO_RC_HEAP_LAYOUT_KNOWN` is unsound, don't use it.
It isn't public API nor documented API, but it does create \"working\" code that only
happens to work for the current compiler and relies on too many implementation details.

This crate provides a completely safe API through SliceWithHeader.
Prefer using it to the unsafe APIs that power it.

It should be noted that this crate's unsafety is purely on slice dst construction.
Once the slice dst has been manually allocated into a `Box`, everything becomes safe again.
Rust actually supports these trailing-slice DSTs perfectly well,
it is only construction that is unsafe.

Triomphe also provides a HeaderSlice<HeaderWithLength<Header>, [Item]> equivalent to slice-dst's
SliceWithHeader<Header, Item>. Slice-dst's is usable with std smart pointers, wheras triomphe's
is only usable with triomphe::Arc (and variants). Triomphe, however, is more battle tested.

Smoke tests are run under miri, but the crate could potentially do with some more examples
as well as some more tests to ensure that all of the functionality works as advertised.

I've only put this review as positive rather than strong because of a lack of real-world use.
As of yet, the library is just of theoretical use, and has yet to be stress tested for real."""
aggregated-from = [
    "https://github.com/cad97/crev-proofs#e13vqC78LDCc-IiVPs-XkOHWd1j6PJUcYrugasS77hQ",
    "crev:review/FoMJE3H0if-hEj-fZ80s0DQXthttC7ShgR5LVOlrvwo",
]

[[audits.slog-async]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "strong",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "2.3.0"
notes = "I'm the author. It's a decent, popular crate."
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/11FVrGSyb0d9gnb1T0Np-oh4kdqbGrdRrTX7SJ0vhbc",
]

[[audits.slog-term]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "strong",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "2.4.0"
notes = "Strong. It's a decent, popular crate."
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/8mo59tmNiljfhck_4Sewv4MhuWadffnN5OMxchhTqj0",
]

[[audits.smallvec]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.6.10"
notes = """
Quite a bit of unsafe, but I've implemented fuzzing for it https://github.com/servo/rust-smallvec/pull/168,
so hopefully unsoundness issues won't be a problem anymore.
"""
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/tpJ0ZE08ZUopszcOuNnxjpT-52lQFvvMnpDZQtZR184",
]

[[audits.smartstring]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.2.5"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/8CcgUIdZVMZbNxBejkFQiiJBaCbCHkV_e-1R6u9h1KM",
]

[[audits.solkit]]
who = "\"HeroicKatora\" (https://github.com/HeroicKatora)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.4.7"
notes = """
No unsafe code. This review includes the binary which does some file IO. I
believe one might get the binary to overwrite arbitrary files by symbolically
linking files (and the binary) such that they are located next to each other.
This puts it into a `portable` mode, which means it does not only write to
its own XDG directories. Not a real problem as that works for a lot of
applications."""
aggregated-from = [
    "https://github.com/HeroicKatora/crev-proofs#-sApEowWcAS9J0R7aO18cghvhLBpuMhyeUuWQq_fits",
    "crev:review/_j_ZjeXBidmFKrdx2izCcIvnGBp8JHZAOuLpRhQdO1g",
]

[[audits.sourcefile]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.1.4"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/GYxyW8iCx1DlTQWCenUdAO_3RCavH7B3XHwfewN3lq4",
]

[[audits.sourcefile]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.4"
notes = "Slightly odd-seeming design, looks sane/safe though."
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/_lOBvqXhiZtBSQTSlhtXm_d7oRgqj7OJNZbZcm4kulw",
]

[[audits.spaceapi]]
who = "\"dbrgn\" (https://github.com/dbrgn)"
criteria = [
    "strong",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.7.0"
notes = "I'm one of the authors. This crate contains just types for serialization and is of low complexity. No unsafe. Using this in production."
aggregated-from = [
    "https://github.com/dbrgn/crev-proofs#ILvan_fvVdN8cSH8GC7kB_h-3W6xWnafsCUTpdoTxQ4",
    "crev:review/LY8q5H77kf5hoer19UdW_Uwc7eHMRsF16CNKqHzrqes",
]

[[audits.specs]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "neutral",
    "level-medium",
    "trust-medium",
    "safe-to-run",
]
version = "0.15.1"
notes = '''
Pros:
* Very well documented
* Well tested
* Good attention to detail WRT unsafe code.

Cons:
* Issue [#644] Scary partially uninitialized Vec\<T\>s
* PR [#645] `println!()`s for !is_unconstrained() joins is lame / a perf hazard in and of itself.
* Complicated as heck
* I'm not yet convinced the ParJoin s are sound
* Plenty of unsafe code
    * Some scary lifetime extensions
    * Comments like "// This is horribly unsafe."
* See `-1`s for more details

0.15.1
======

Misc. notes:
* I still don't have a firm grasp on when `world.maintain()` is necessary

| crev          |   |
| ------------- |---|
| thoroughness  | medium
| understanding | medium
| rating        | neutral

| File                                                  | Rating | Notes |
| ----------------------------------------------------- | ------ | ----- |
| .github/ISSUE_TEMPLATE/bug_report.md                  | +1 | |
| .github/ISSUE_TEMPLATE/feature_request.md             | +1 | |
| .github/stale.yml                                     | +1 | |
| benches/benches_main.rs                               | +1 | criterion
| benches/big_or_small.rs                               | +1 | nalgebra, shred
| benches/parallel.rs                                   | +1 | |
| benches/storage_cmp.rs                                | +1 | |
| benches/storage_sparse.rs                             | +1 | |
| benches/world.rs                                      | +1 | rayon
| docs/reference/src/01_system.md                       |  0 | ~empty
| docs/reference/src/intro.md                           | +1 | |
| docs/reference/src/SUMMARY.md                         | +1 | TOC
| docs/reference/book.toml                              | +1 | |
| docs/tutorials/src/images/component-tables.svg        | +1 | \<switch\>?  \<foreignObject\>?  What is this madness...
| docs/tutorials/src/images/entity-component.svg        | +1 | |
| docs/tutorials/src/images/system.svg                  | +1 | |
| docs/tutorials/src/01_intro.md                        | +1 | Java?
| docs/tutorials/src/02_hello_world.md                  |  0 | specs 0.15.0, lots of `rust,ignore`s, poor link names
| docs/tutorials/src/03_dispatcher.md                   | +1 | |
| docs/tutorials/src/04_resources.md                    | +1 | Option\<Read\<...\>\>
| docs/tutorials/src/05_storages.md                     | +1 | |
| docs/tutorials/src/06_system_data.md                  | +1 | |
| docs/tutorials/src/07_setup.md                        | +1 | |
| docs/tutorials/src/08_join.md                         | +1 | |
| docs/tutorials/src/09_parallel_join.md                | +1 | |
| docs/tutorials/src/10_rendering.md                    | +1 | |
| docs/tutorials/src/11_advanced_component.md           | +1 | |
| docs/tutorials/src/12_tracked.md                      | +1 | |
| docs/tutorials/src/13_saveload.md                     | +1 | |
| docs/tutorials/src/14_troubleshooting.md              | +1 | |
| docs/tutorials/src/SUMMARY.md                         | +1 | TOC
| docs/tutorials/book.toml                              | +1 | |
| docs/website/content/pages/about.md                   | +1 | |
| docs/website/content/pages/docs.md                    | +1 | |
| docs/website/content/_index.md                        | +1 | |
| docs/website/content/specs-0.15.md                    | +1 | draft, "Test"
| docs/website/themes/hyde/sass/hyde.scss               | +1 | |
| docs/website/themes/hyde/sass/poole.scss              | +1 | |
| docs/website/themes/hyde/sass/print.scss              | +1 | |
| docs/website/themes/hyde/static/.gitkeep              | +1 | |
| docs/website/themes/hyde/templates/404.html           | +1 | some templating engine used
| docs/website/themes/hyde/templates/index.html         | +1 | |
| docs/website/themes/hyde/templates/page-nodate.html   | +1 | |
| docs/website/themes/hyde/templates/page.html          | +1 | |
| docs/website/themes/hyde/.gitignore                   | +1 | |
| docs/website/themes/hyde/config.toml                  | +1 | |
| docs/website/themes/hyde/LICENSE                      | +1 | MIT
| docs/website/themes/hyde/README.md                    | +1 | |
| docs/website/themes/hyde/theme.toml                   | +1 | |
| docs/website/config.toml                              | +1 | |
| examples/async.rs                                     | +1 | |
| examples/basic.rs                                     | +1 | |
| examples/bitset.rs                                    | +1 | fizzbuzz!  Hah.
| examples/cluster_bomb.rs                              | +1 | |
| examples/full.rs                                      | +1 | `dispatcher.with_barrier()`
| examples/ordered_track.rs                             | +1 | |
| examples/saveload.rs                                  | +1 | ron, structs/impls inside fns
| examples/track.rs                                     | +1 | |
| scripts/build-netlify.sh                              |  0 | Installing things from the internet (zola, mdbook, rustup)
| scripts/kcov.sh                                       | -1 | docker - owns/deletes mykcov1, runs images, disables seccomp
| [src/join/mod.rs](src/join/mod.rs)                    |  0 | I don't fully grok the ParJoin limitations yet, nor the underlying reason behind unsafe fn open/get.
| [src/join/par_join.rs](src/join/par_join.rs)          | -1 | "[...] technically not allowed" (ab)use of UnsafeCell
| src/saveload/de.rs                                    | +1 | |
| src/saveload/marker.rs                                | +1 | |
| src/saveload/mod.rs                                   | +1 | |
| src/saveload/ser.rs                                   | +1 | |
| src/saveload/tests.rs                                 | +1 | |
| src/saveload/uuid.rs                                  | +1 | |
| src/storage/data.rs                                   | +1 | |
| [src/storage/drain.rs](src/storage/drain.rs)          | +1 | |
| [src/storage/entry.rs](src/storage/entry.rs)          | -1 | `Entries::get` seems sketchy
| [src/storage/flagged.rs](src/storage/flagged.rs)      | +1 | |
| src/storage/generic.rs                                | +1 | |
| [src/storage/mod.rs](src/storage/mod.rs)              | -1 | `&mut Storage::get_mut` is sketchy as heck
| [src/storage/restrict.rs](src/storage/restrict.rs)    | -1 | More `ParJoin` I can't wrap my head around, `_unchecked` fns sound unsafe but aren't marked as such.
| [src/storage/storages.rs](src/storage/storages.rs)    | -1 | [#644], `UnprotectedStorage` is a scary API in general for perf reasons.
| [src/storage/tests.rs](src/storage/tests.rs)          | +1 | needs more 
| [src/storage/track.rs](src/storage/track.rs)          |  0 | |
| src/world/comp.rs                                     | +1 | |
| [src/world/entity.rs](src/world/entity.rs)            |  0 | Possibly missing some `self.killed.contains(...)` checks in `Allocator`, ungrokked `ParJoin`
| src/world/lazy.rs                                     | +1 | |
| src/world/mod.rs                                      | +1 | |
| src/world/tests.rs                                    | +1 | |
| [src/world/world_ext.rs](src/world/world_ext.rs)      |  0 | Some concerns about `create_entity_unchecked`, `is_alive`
| [src/bitset.rs](src/bitset.rs)                        | +1 | |
| [src/changeset.rs](src/changeset.rs)                  | -1 | Bypasses lifetime checks
| src/error.rs                                          | +1 | |
| src/lib.rs                                            | +1 | |
| src/prelude.rs                                        | +1 | |
| tests/saveload.rs                                     | +1 | |
| tests/tests.rs                                        | +1 | |
| .cargo_vcs_info.json                                  | +1 | |
| .cargo-ok                                             | +1 | |
| .gitignore                                            | +1 | |
| .rustfmt.toml                                         | +1 | |
| Cargo.lock                                            | +1 | |
| Cargo.toml                                            | +1 | |
| Cargo.toml.orig                                       | +1 | |
| CHANGELOG.md                                          | +1 | I like the link format here
| CODE_OF_CONDUCT.md                                    | +1 | |
| codecov.yml                                           | +1 | |
| CONTRIBUTING.md                                       | +1 | |
| LICENSE-APACHE                                        | +1 | |
| LICENSE-MIT                                           | +1 | |
| netlify.toml                                          | +1 | |
| PULL_REQUEST_TEMPLATE.md                              | +1 | |
| README.md                                             | +1 | Dual MIT/Apache 2.0, could use a deps badge

| Other     | Rating | Notes |
| --------- | ------ | ----- |
| unsafe    | -1 | ParJoin sounds unsound, scary comments like "// This is horribly unsafe."
| miri      | -1 | N/A (atomics)
| fs        | +1 | N/A
| io        | +1 | N/A
| docs      | +1 | Sets the golden standard for how to document unsafe code in many places... but sadly not all.
| tests     | 0  | Some gaps on a per-module basis, which really seem necessary for some of the scarier nests of unsafe code.

src/join/mod.rs
---------------
| Line  | What  | Notes |
| -----:| ----- | ----- |
| 227   | unsafe fn Join::open                          | Hmm... will this truly be unsound?  Will need to read more...
| 237   | unsafe fn Join::get                           | "The implementation [...] has no invariants to meet" - I don't grok why this is unsafe yet, but tat least the doc comments seem clear.
| 273   | unsafe fn MaybeJoin::open                     | +1, just forwards, good doc comments about held constraints
| 280   | unsafe fn MaybeJoin::get                      | +1, meets documented constraints, good doc comments about held constraints
| 305   | fn JoinIter::new                              | 0, fix pending: [#645] println! isn't an appropriate mechanism for this and possibly adds another perf issue.  PR switches to log crate.
| 312   | fn JoinIter::new                              | 0, relies on constraint of impl
| 370   | fn JoinIter::get                              | +1, documents and abides by safety constraints
| 386   | fn JoinIter::get_unchecked                    | +1, documents and abides by safety constraints
| 399   | fn JoinIter::next                             | +1, documents and abides by safety constraints
| 422   | unsafe fn (A,B,...)::open                     | +1, documents and abides by safety constraints
| 434   | unsafe fn (A,B,...)::get                      | +1, documents and abides by safety constraints
| 440   |        fn (A,B,...)::is_unconstrained         | +1
| 451   | unsafe impl ParJoin for (A,B,...)             | 0, sounds accurate but I don't fully grok
| 500   | unsafe fn \_Readers\_::open                   | +1, just forwards sanely
| 506   | unsafe fn \_Readers\_::get                    | +1, just forwards sanely
| 511   | unsafe fn \_Readers\_::is_unconstrained       | +1
| 519   | unsafe impl ParJoin for \_Readers\_           | 0, sounds accurate but I don't fully grok
| 542   | unsafe fn \_Writers\_::open                   | +1, just forwards sanely
| 548   | unsafe fn \_Writers\_::get                    | +1, just forwards sanely
| 553   | unsafe fn \_Writers\_::is_unconstrained       | +1
| 561   | unsafe impl ParJoin for \_Writers\_           | 0, sounds accurate but I don't fully grok
| EOF   | | |

src/join/par_join.rs
--------------------
| Line  | What  | Notes |
| -----:| ----- | ----- |
|  21   | fn ParJoin::par_join comment                  | -1, "NOTE: This is currently unspecified behavior." - concerning...
|  30   | fn ParJoin::par_join                          | 0, fix pending: [#645] println! isn't an appropriate mechanism for this and possibly adds another perf issue.  PR switches to log crate.
|  56   | fn JoinParIter::drive_unindexed               | 0, `unsafe { ... }` relies on constraint of impl
|  98   | unsafe impl Send for JoinProducer             | -1, "[...] technically not allowed" abuse of UnsafeCell
| 130   | fn UnindexedProducer::fold_with               | 0, logic makes sense to me here
| EOF   | | |

src/storage/drain.rs
--------------------
| Line  | What  | Notes |
| -----:| ----- | ----- |
|  25   | unsafe fn Drain::open                         | +1, just forwards sanely
|  32   | unsafe fn Drain::get                          | +1, uses remove sanely
| EOF   | | |

src/storage/entry.rs
--------------------
| Line  | What  | Notes |
| -----:| ----- | ----- |
|  41   | fn Storage::entry                             | +1, `unsafe { ... }` documents and abides by safety constraints
| 121   | fn Storage::entries                           | +1
| 140   | unsafe fn Entries::open                       | +1
| 146   | unsafe fn Entries::get                        | -1, `unsafe { ... }` - I can't verify how this lifetime extension is possibly sound either.
| 164   | fn Entries::is_unconstrained                  | +1
| 184   | fn OccupiedEntry::get                         | +1, `unsafe { ... }` - documents and abides by safety constraints
| 197   | fn OccupiedEntry::get_mut                     | +1, `unsafe { ... }` - documents and abides by safety constraints
| 205   | fn OccupiedEntry::into_mut                    | +1, `unsafe { ... }` - documents and abides by safety constraints
| 209   | fn OccupiedEntry::insert                      | +1
| 215   | fn OccupiedEntry::remove                      | +1
| 236   | fn VacantEntry::insert                        | +1, `unsafe { ... }` - documents and abides by safety constraints
| EOF   | | |

src/storage/flagged.rs
----------------------
| Line  | What  | Notes |
| -----:| ----- | ----- |
| 203   | unsafe fn FlaggedStorage::clean               | +1, just forwards sanely
| 210   | unsafe fn FlaggedStorage::get                 | +1, just forwards sanely
| 214   | unsafe fn FlaggedStorage::get_mut             | +1, just forwards sanely
| 221   | unsafe fn FlaggedStorage::insert              | +1, just forwards sanely
| 228   | unsafe fn FlaggedStorage::remove              | +1, just forwards sanely
| EOF   | | |

src/storage/mod.rs
------------------
| Line  | What  | Notes |
| -----:| ----- | ----- |
|  57   | unsafe fn AntiStorage::open                   | +1, safe and sound
|  62   | unsafe fn AntiStorage::get                    | +1, safe and sound
|  66   | unsafe impl DistinctStorage for AntiStorage   | +1, safe and sound
|  70   | unsafe impl ParJoin for AntiStorage           | +1, safe and sound
|  78   | unsafe impl CastFrom for dyn AnyStorage       | 0, don't fully grok why this is unsafe, but looks 100% safe and sound and matches shred examples.
| 122   | unsafe trait DistinctStorage                  | +1, safe and sound
| 155   | fn MaskedStorage::clear                       | +1, `unsafe { ... }` - documents and abides by safety constraints
| 165   | fn MaskedStorage::remove                      | +1, `unsafe { ... }` - documents and abides by safety constraints
| 175   | fn MaskedStorage::drop                        | +1, `unsafe { ... }` - documents and abides by safety constraints
| 231   | fn Storage::get                               | +1, `unsafe { ... }` - documents and abides by safety constraints
| 274   | unsafe fn Storage::unprotected_storage_mut    | +1, documents constraints
| 282   | fn Storage::get_mut                           | +1, `unsafe { ... }` - documents and abides by safety constraints
| 299   | fn Storage::insert                            | +1, `unsafe { ... }` - documents and abides by safety constraints
| 304   | fn Storage::insert                            | +1, `unsafe { ... }` - documents and abides by safety constraints
| 341   | unsafe impl DistinctStorage for Storage       | +1, proper constraints
| 356   | unsafe fn &Storage::open                      | +1, documents constraints
| 362   | unsafe fn &Storage::get                       | +1, just forwards sanely
| 400   | unsafe fn &mut Storage::open                  | +1, documents constraints
| 409   | unsafe fn &mut Storage::get                   | -1, WTF? Lifetime extension? Can't this just be v.get_mut(i)?
| 449   | trait UnprotectedStorage                      | -1, needs to make it clearer that `clear` *must* be called before dropping as currently stands, unless that's just a bug.
| 457   | unsafe fn UnprotectedStorage::clear           | +1, documents constraints
| 472   | unsafe fn UnprotectedStorage::get             | +1, documents constraints
| 485   | unsafe fn UnprotectedStorage::get_mut         | +1, documents constraints
| 496   | unsafe fn UnprotectedStorage::insert          | +1, documents constraints
| 504   | unsafe fn UnprotectedStorage::remove          | +1, documents constraints
| 514   | unsafe fn UnprotectedStorage::drop            | +1, documents constraints, default impl sane/sound
| EOF   | | |

src/storage/restrict.rs
-----------------------
| Line  | What  | Notes |
| -----:| ----- | ----- |
|  83   | unsafe impl ParJoin for &mut RestrictedStorage\<..., MutableParallelRestriction\> | -1, no idea
|  93   | unsafe impl ParJoin for &RestrictedStorage\<..., ImmutableAliasing\>              | -1, no idea
| 113   | unsafe fn &RestrictedStorage::open                                                | 0, could maybe document safety more, but I believe sound?
| 118   | unsafe fn &RestrictedStorage::get                                                 | 0, could maybe document safety more, but I believe sound?
| 144   | unsafe fn &mut RestrictedStorage::open                                            | 0, could maybe document safety more, but I believe sound?
| 149   | unsafe fn &mut RestrictedStorage::get                                             | 0, could maybe document safety more, but I believe sound?
| 239   | fn PairedStorage::get_unchecked                                                   | -1, `unsafe { ... }` - maybe fine, but safety undocumented and get_unchecked sounds like something that should itself be an unsafe fn?
| 252   | fn PariedStorage::get_mut_unchecked                                               | -1, `unsafe { ... }` - maybe fine, but safety undocumented and get_unchecked sounds like something that should itself be an unsafe fn?
| 272   | fn PairedStorage::get                                                             | +1, abides by safety constraints
| 294   | fn PairedStorage::get_mut                                                         | +1, abides by safety constraints
| EOF   | | |

src/storage/storages.rs
-----------------------
Careful auditing gives a good idea for what the actual API requirements of `UnprotectedStorage` are, and it's a doozy.

1. VecStorage makes it unsound to not call `clean`
2. Noop `clean`s on several storages make me think it should consume `self` instead of taking `&mut self` - maybe can't due to API limitations?
3. Need clearer UnprotectedStorage docs

| Line  | What  | Notes |
| -----:| ----- | ----- |
|  20   | unsafe fn BTreeStorage::clean                     | 0, should maybe clear storage?
|  27   | unsafe fn BTreeStorage::get                       | +1
|  31   | unsafe fn BTreeStorage::get_mut                   | +1
|  35   | unsafe fn BTreeStorage::insert                    | +1
|  39   | unsafe fn BTreeStorage::remove                    | +1
|  44   | unsafe impl DistinctStorage for BTreeStorage      | +1 as I grok DistinctStorage
|  54   | unsafe fn HashMapStorage::clean                   | 0, should maybe clear storage?
|  61   | unsafe fn HashMapStorage::get                     | +1
|  65   | unsafe fn HashMapStorage::get_mut                 | +1
|  69   | unsafe fn HashMapStorage::insert                  | +1
|  73   | unsafe fn HashMapStorage::remove                  | +1
|  78   | unsafe impl DistinctStorage for HashMapStorage    | +1
|  95   | unsafe fn DenseVecStorage::clean                  | 0, should maybe clear storage?
| 102   | unsafe fn DenseVecStorage::get                    | 0, unsound on bad index, but fn is unsafe.  Otherwise sound.
| 107   | unsafe fn DenseVecStorage::get_mut                | 0, unsound on bad index, but fn is unsafe.  Otherwise sound.
| 112   | unsafe fn DenseVecStorage::insert                 | 0, `set_len` leaves uninitialized gaps in the data_id Vec.  Maybe sound, but at least violates std docs.  See [#644]
| 124   | unsafe fn DenseVecStorage::remove                 | 0, unsound on bad index, but fn is unsafe.  Otherwise sound.
| 133   | unsafe impl DistinctStorage for DenseVecStorage   | +1
| 143   | unsafe fn NullStorage::clean                      | +1
| 149   | unsafe fn NullStorage::get                        | +1
| 153   | unsafe fn NullStorage::get_mut                    | +1
| 157   | unsafe fn NullStorage::insert                     | +1
| 159   | unsafe fn NullStorage::remove                     | +1
| 178   | unsafe impl DistinctStorage for NullStorage       | +1, precondition enforced by `Default::default()`
| 187   | unsafe fn VecStorage::clean                       | +1
| 200   | unsafe fn VecStorage::get                         | 0, unsound on bad index, but fn is unsafe.  Otherwise sound.
| 204   | unsafe fn VecStorage::get_mut                     | 0, unsound on bad index, but fn is unsafe.  Otherwise sound.
| 208   | unsafe fn VecStorage::insert                      | -1, `set_len` leaves uninitialized gaps in the data_id Vec, making it unsound to drop before calling clean.  Sound if perfectly used (e.g. call clean), but a timebomb as stands IMO.  See [#644]
| 222   | unsafe fn VecStorage::remove                      | 0, unsound on bad index, but fn is unsafe.  Otherwise sound.
| 229   | unsafe impl DistinctStorage for VecStorage        | +1
| EOF   | | |

src/storage/tests.rs
--------------------
| Line  | What  | Notes |
| -----:| ----- | ----- |
| 460   | vec_arc                                       | +1, `unsafe { ... }`
|       |                                               | -1, would like to see more tests involving drop types
|       |                                               | -1, would like to see more tests involving specific storages
| EOF   | | |

src/storage/track.rs
--------------------
| Line  | What  | Notes |
| -----:| ----- | ----- |
|  53   | fn Storage::channel                           | 0, `unsafe { ... }` - I don't grok the safety invariants we need to hold here
|  59   | fn Storage::event_emission                    | 0, `unsafe { ... }` - I don't grok the safety invariants we need to hold here
|  72   | fn Storage::channel_mut                       | 0, `unsafe { ... }` - I don't grok the safety invariants we need to hold here
|  92   | fn Storage::set_event_emission                | 0, `unsafe { ... }` - I don't grok the safety invariants we need to hold here
| EOF   | | |

src/world/entity.rs
-------------------
Well, this is a bit more complicated than simply doing generational indicies.  Atomics... oh boy.

| Line  | What  | Notes |
| -----:| ----- | ----- |
|  51   | struct Allocator                              | 0, interplay of fields is underdocumented
|       | Allocator::alive                              | Lagging bitset derived from aliveness of `generations`, used for `Join` and not much else.  Lags behind when *\_atomic is used.
|       | Allocator::raised, killed                     | Tracks atomic ops specifically for later merge, otherwise ignored/internal.
|       | Allocator::cache                              | LIFO queue of entity IDs to reuse
|       | Allocator::max_id                             | next entity ID if no entity IDs to reuse
|  90   | fn Allocator::kill_atomic                     | 0, leaves generations alone?  Is this an async kill?
| 114   | fn Allocator::is_alive                        | -1, doesn't this need to check !self.killed.contains(id) too?
| 131   | fn Allocator::entity                          | -1, doesn't this need to check !self.killed.contains(id) too?
| 188   | fn Allocator::merge                           | 0, why not push directly into cache?
| 211   | struct CreateIterAtomic                       | +1
| 223   | struct Entity                                 | +1
| 256   | struct EntitiesRes                            | +1
| 321   | unsafe fn EntitiesRes::open                   | +1? don't fully grok preconds but this seems fine/safe
| 321   | unsafe fn EntitiesRes::get                    | +1? don't fully grok preconds but this seems fine/safe
| 336   | unsafe impl ParJoin for EntitiesRes           | -1, don't fully grok preconds
| 341   | struct EntityResBuilder                       | +1
| 376   | struct Generation                             | +1, should maybe have a struct-level comment that negative = dead though?  Although obvious from fn is_alive...
| 420   | struct ZeroableGeneration                     | +1
| 441   | fn ZeroableGeneration::die                    | 0, is debug_assert! enough?  Seems like it'll go super off the rails in release builds, and other fns like raised panic.  Internal method though...
| 451   | fn ZeroableGeneration::raised                 | 0, explicit checked_sub vs implicit for Generation::raised
| 470   | struct EntityCache                            | 0, needs better docs.  Seems to be a semi-concurrent FILO index list for entity realloc.
| EOF   | | |

src/world/world_ext.rs
----------------------
| Line  | What  | Notes |
| -----:| ----- | ----- |
| 240   | fn WorldExt::create_entity_unchecked          | -1, does this need to be an `unsafe fn`?  What isn't checked?  Just that you have exclusive world access?
| 281   | fn WorldExt::is_alive                         | 0, sketchy edge cases
| 392   | fn World::is_alive                            | 0, should this really be panicing on a dead generation?  Doesn't that just mean the entity is dead?!?
| EOF   | | |

src/bitset.rs
-------------
| Line  | What  | Notes |
| -----:| ----- | ----- |
|  24   | unsafe fn BitSet\*::open                      | +1, sure?
|  29   | unsafe fn BitSet\*::get                       | +1, sure?
|  35   | unsafe impl ParJoin for BitSet\*              | 0, think this is fine?
| EOF   | | |

src/changeset.rs
----------------
| Line  | What  | Notes |
| -----:| ----- | ----- |
| 61    | fn ChangeSet::add                             | +1, `unsafe { ... }` - documents and abides by safety constraints
| 66    | fn ChangeSet::add                             | +1, `unsafe { ... }` - abides by safety constraints, docs seem a little off
| 77    | fn ChangeSet::clear                           | +1, `unsafe { ... }` - documents and abides by safety constraints
| 115   | unsafe fn &mut ChangeSet::open                | +1, sure?
| 123   | unsafe fn &mut ChangeSet::get                 | -1, bypasses lifetime checks!
| 134   | unsafe fn &ChangeSet::open                    | +1, sure?
| 141   | unsafe fn &ChangeSet::get                     | +1, sure?
| 154   | unsafe fn ChangeSet::open                     | +1, sure?
| 161   | unsafe fn ChangeSet::get                      | +1, sure?
| EOF   | | |

TIL
---
* std::num::NonZeroI32
* std::fmt::Formatter .debug_tuple().field().finish()
* `#[must_use]` makes a lot of sense for builder patterns terminating in `.build()`

[#644]:     https://github.com/slide-rs/specs/issues/644
[#645]:     https://github.com/slide-rs/specs/pull/645
'''
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/usUJBVU1O3Nu776mGpJ5y-I3LW1ocejUwTBsyUr1F9Q",
]

[[audits.spin]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.5.2"
notes = "I don't see anything wrong with it, but atomics are notoriously tricky, so please keep in mind that my review is marked with understanding=low"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/eDmVNaKUHdCDKVweAKkd6w2MTN7S788FfZtZ5f1tFm4",
]

[[audits.sqlite]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "negative",
    "level-none",
    "trust-high",
]
version = "0.24.0"
notes = "The owner of this crate https://crates.io/users/IvanUkhov has plenty of low-quality, suspicious crates, that at best are name-squating, I would advise against usting this one."
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/sQq0kjg5QD8I5JsRF7NWKJ-mVRPgRY50LVNoXrIXUl4",
]

[[audits.stable_deref_trait]]
who = "\"KonradBorowski\" (https://gitlab.com/KonradBorowski)"
criteria = [
    "strong",
    "level-medium",
    "trust-low",
]
version = "1.1.1"
notes = """
All implementations are correct, trait requirements seem fine and usable
for crates like rental (unlike std::pin::Pin).
"""
aggregated-from = [
    "https://gitlab.com/KonradBorowski/crev-proofs#ZOm7om6WZyEf3SBmDC69BXs8sc1VPniYx7Nfz2Du6hM",
    "crev:review/pf6w91TOcRY74ey7g2H0bFYJBDt_IfGJ4EvFf3eIST0",
]

[[audits.static_assertions]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "1.1.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/nDhVrak2cXctf_RePEwbuY9U-cPqPA2EjxAkcK1hlrM",
]

[[audits.static_cell]]
who = "\"chrysn\" (https://gitlab.com/chrysn)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.0"
notes = "Simple encapsulation of the unsafeness of setting a static variable only once and using that value as &'static from there on. Less automatic than lazy_static. More focused on the no_std (and possibly atomic polyfilling) use case than once_cell, which otherwise provides a more comprehensive feature set."
aggregated-from = [
    "https://gitlab.com/chrysn/crev-proofs#bYdCa4xhd5VL4dlcVPBxV51PrW5joFp9U04rKgcTvk8",
    "crev:review/k93GgPLnb9P0q7vHYHBnErw3xf1sIsBD-IOJFXWuDMs",
]

[[audits.stderrlog]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.4.3"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/44I7ILk1qEFB0bIV62lc0CYSrySJDyUSqXX97r0nFwY",
]

[[audits.string]]
who = "\"KonradBorowski\" (https://gitlab.com/KonradBorowski)"
criteria = [
    "positive",
    "level-medium",
    "trust-low",
]
version = "0.2.1"
aggregated-from = [
    "https://gitlab.com/KonradBorowski/crev-proofs#ZOm7om6WZyEf3SBmDC69BXs8sc1VPniYx7Nfz2Du6hM",
    "crev:review/398J1MwJu3BX9Ek2_p_-pk11gLAJTBTfHyWPAXipWwg",
]

[[audits.string-interner]]
who = "\"lo48576\" (https://github.com/lo48576)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.7.1"
notes = """
I have reviewed the previous version (0.7.0) and sent some patches to make the crate safer.

In this version, I found no security problems and no malicious code.

* `unsafe` at line 158 is safe because
    + both `InternalStrRef`s and strings referred by them are immutable,
    + strings referred by `InternalStrRef`s won't be dropped until the owning interner is dropped,
    + they have `*const str` referring inside private `Vec<Box<str>>` which is owned by the same interner, and
    + `InternalStrRef`s are not taken or copied to the outside of `StringInterner` type.
* `unsafe impl`s at line 248 and 254 is safe as commented in the source.
    + Addresses of strings in `Vec<Box<str>>` is not changed until the owning interner is dropped.
    + `InternalStrRef`s and their content pointers are not exposed to the users.
    + Pointers to the strings are read-only.

I think this crate is safe to use.
"""
aggregated-from = [
    "https://github.com/lo48576/crev-proofs#wO-tKiJm4SRMJeJSAo_gT54GAoY2KhwMGHzEZUcTmbk",
    "crev:review/1MGzQMyWn4fwYGh4upw9RcBUF0KlntwxCtNfhxp6Nhc",
]

[[audits.string_cache_shared]]
who = "\"KonradBorowski\" (https://gitlab.com/KonradBorowski)"
criteria = [
    "strong",
    "level-medium",
    "trust-low",
]
version = "0.3.0"
notes = "Constants to be used by other crate, the values seem correct. Worth noting that changing values in this crate will cause unsafety unless a new release gets made."
aggregated-from = [
    "https://gitlab.com/KonradBorowski/crev-proofs#ZOm7om6WZyEf3SBmDC69BXs8sc1VPniYx7Nfz2Du6hM",
    "crev:review/dacN5ngxXCYmSPF4Do-lb1ZFCg1qR2YouZuAINFVfgM",
]

[[audits.strsim]]
who = "\"johnlepikhin\" (https://github.com/johnlepikhin)"
criteria = [
    "positive",
    "level-high",
    "trust-low",
]
delta = "0.9.3 -> 0.10.0"
aggregated-from = [
    "https://github.com/johnlepikhin/crev-proofs#M86HwhpA_3RBI3vxQ19DsUhy-jeVsLgNr_cwR_CiOHY",
    "crev:review/uM0BEhxm2EmK8wG2XDuhxpxkxMHMxdXhg3DDEfTmZeg",
]

[[audits.structopt]]
who = "\"kpcyrd\" (https://github.com/kpcyrd)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.3.23"
aggregated-from = [
    "https://github.com/kpcyrd/crev-proofs#ZGgmIacywCRKLa33k7W04VFcK-glDkcBXKG4oF7t--4",
    "crev:review/250PSU44vM8MAWkxDoJc3LBCZJcVeLbpWLEa_GHtrEc",
]

[[audits.structopt]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.2.18"
notes = "Tiny proxy crate."
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/RLhQmRUKZfvbWLyFIkQpgxehB1dN2mxE9udvCjU9MkE",
]

[[audits.structopt-derive]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "strong",
    "level-low",
    "trust-high",
    "safe-to-run",
]
delta = "0.2.14 -> 0.2.16"
notes = "No unsafe, documentation, fairly small. A lot of macro magic."
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/BqhxOQ7uQ6rYyFr7bBFfz8jeGuXBDkHSGM3lqKS2NTU",
]

[[audits.structopt-derive]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "strong",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.2.14"
notes = "No unsafe, documentation, fairly small. A lot of macro magic."
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/vLwAwhV-g151GdF9yPjW9RvcGKIMY3km3-OtFSLL5pE",
]

[[audits.strum]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.21.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/yHuOx9M9nywObiglXUk1IiXSp84vVLwCv02dZPJBRUc",
]

[[audits.strum_macros]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.21.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/hwnSws4fiHHZjy0ev7dOBRZ2RlIPc_fnCO8qxd-Qa4A",
]

[[audits.suffix]]
who = "\"HeroicKatora\" (https://github.com/HeroicKatora)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "1.1.0"
notes = """
As a side effect of the linear time requirements it also ensures that
allocations are bounded. However, there is no built-in way to interoperate
with any custom limits, precalculate required memory, or reuse allocations
made separately before.
"""
aggregated-from = [
    "https://github.com/HeroicKatora/crev-proofs#-sApEowWcAS9J0R7aO18cghvhLBpuMhyeUuWQq_fits",
    "crev:review/hBabOvu42WOCcmjGU9bRVTlS7tYzoovcXI6IGWl21wg",
]

[[audits.supports-color]]
who = "\"matthiasbeyer\" (https://github.com/matthiasbeyer)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "2.0.0"
notes = "No major issues found."
aggregated-from = [
    "https://github.com/matthiasbeyer/crev-proofs#HT24oErbY-0x-yt9mGMZEk5S07lzpFQ4kayzEkVxJWU",
    "crev:review/12TTeX-8POAO0-5VueOqUDrZnglws751U5TJ201E178",
]

[[audits.svg-hush]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.9.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/h3_lkN5kinbz_aVjIAJUN4AFyRvauRs-cG7HYcB_hsw",
]

[[audits.sync_wrapper]]
who = "\"niklasf\" (https://github.com/niklasf)"
criteria = [
    "strong",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.1"
notes = """
Reviewed for soundness. There are two instances of unsafe code.

One is a standard pin projection.

The other is the primary purpose of the crate:

  unsafe impl<T> Sync for SyncWrapper<T> {}

This is equivalent to the statement that all instances of &SyncWrapper<T>
can be safely sent across thread boundaries. This is true, because
&SyncWrapper<T> is useless. The crate allows no operations on &SyncWrapper<T>
alltogether. The only provided methods require &mut SyncWrapper<T> or owned
SyncWrapper<T>."""
aggregated-from = [
    "https://github.com/niklasf/crev-proofs#a0hN0qYwwDTmHtAchnTXiF-I_L9rK1KL5kgCmQoYR9o",
    "crev:review/klPNSYbUlPQgvH94eDChFNjVZgyp36mu5M0o1Jsm3nE",
]

[[audits.take_mut]]
who = "\"vorner\" (https://github.com/vorner)"
criteria = [
    "neutral",
    "level-medium",
    "trust-medium",
    "safe-to-run",
]
version = "0.2.2"
notes = """
The whole idea of the crate -- having a variable unitialized for a while,
then return something back later on seems a bit unnatural for the whole Rust
type system. This can be seen by the fact that certain cornercases are
handled by not merely panicking, but outright aborting the whole process.

I didn't manage to find a way to break safety guarantees using the crate and
I tried to find a loophole quite hard. But considering how questionable
things it does, I'd really like to see some kind of proof or semi-formal
argument saying why it is safe. Such thing is not included in the source
code, unfortunately.

The repository doesn't seem to have a recent activity and the last release is
2 years ago, but it's hard to say if it's abandoned or simply considered
finished.

I've also found a resource leak (that is somewhat unlikely to get triggered
in real-world usage).

Therefore, I'd be somewhat wary using this myself and would need a good
reason to reach for this crate -- certainly not just for convenience."""
aggregated-from = [
    "https://github.com/vorner/crev-proofs#WJlSxaMnJ7GLdgFZKR_JrivA9KmmEZO806KlZZHHkyg",
    "crev:review/VAo4Tin0fqrL6q_BbSBELSl9N2sKUf_2pzjqcfAfE28",
]

[[audits.takeable-option]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "neutral",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.5.0"
notes = "There's no unsafety, but the goal of the crate is weird — it adds a panicking `Deref`!"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/rATi7FLRocyTQzCowxqfbPt8li27KvVqfbMriu0hwZM",
]

[[audits.tantivy]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.8.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/NUSxX4SYl9IyacZ1pTIJFu_VwC4HEBOb-Ls9_PvxH9g",
]

[[audits.tap]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
delta = "1.0.0 -> 1.0.1"
notes = """
Delta since 1.0.0 only shows rustdoc improvements: module documentation is
hoisted into the root of the crate.

My review of 1.0.0 stands."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/8-59XDRzCrQbBpDYvhFuu57p2ZtwoUU2xlx_c7J6Nb4",
]

[[audits.tap]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.0"
notes = """
This crate provides three pieces of plumbing that makes it easier to chain
functions:

1. \"taps\", which pass the borrowed value into a function and then return it
   (think logging);
2. \"pipes\", which are basically a universal `map()`;
3. \"conv\", which is like `into()` but lets you specify the target type, so
   you can put it in the middle of a call-chain.

A lot of pretty boring code. It looks all right to me, but I got too lazy to
check why functions usually require sized types; that's why I cap my
\"thoroughness\" and \"understanding\" at \"medium\", and rating at \"positive\"."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/rZMVYSjEA998KnzQ6IHydKQzDCLlsqzmXEFEkAz3xEM",
]

[[audits.temp-dir]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.11"
notes = """
Short and to the point.

Could contain fewer `unwrap`s:
  - https://gitlab.com/leonhard-llc/ops/-/issues/4

Windows support could be better:
  - https://gitlab.com/leonhard-llc/ops/-/issues/5
  - https://gitlab.com/leonhard-llc/ops/-/issues/6

Looks like a reliable crate overall."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/CKgiSRzgUnLdjcb8C_7y2YnNNZKn1tJIRgKa_0q5ef0",
]

[[audits.tempdir]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "strong",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.3.7"
notes = "Small, no unsafe, good documentation."
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/xyuG6tPVgQrrZkQ_JzissmMQv7zeu9SWQq452i0fyV8",
]

[[audits.tempfile]]
who = "\"chrysn\" (https://gitlab.com/chrysn)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "3.2.0"
notes = """
The unsafes all look good and are not trivial to replace (tried the ASCII
string composition, but the compiler can't optimize away `from_utf8`'s error
by seeing through into the possible random values.

Average understanding is medium, I don't know the APIs underlying the Windows
implementation."""
aggregated-from = [
    "https://gitlab.com/chrysn/crev-proofs#bYdCa4xhd5VL4dlcVPBxV51PrW5joFp9U04rKgcTvk8",
    "crev:review/Um15pWw9J37G3bykj0McONEnQsP0OFWHR_bBveUVnC4",
]

[[audits.tempfile]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
delta = "3.0.4 -> 3.1.0"
notes = """
LGTM. I feel like this crate could use more in-depth review since it does have some `unsafe` blocks (especially for Windows).
"""
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/A695c6ZTyCyYRyycPKd8UfcjFtULsQ0lsHhOvEQcfkg",
]

[[audits.tempfile]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "3.1.0"
notes = '''
Solid crate overall.

Concerns:
* Absurdly high default `NUM_RETRIES` means this crate can hang.
* Slightly unnecessarily large unsafe use, used once without clear need.
* TempDir seems like a big footgun.
* Well documented footguns with regards to share tmp dirs on some systems.
* Hazard to reproducable builds thanks to random filename generation.

Detail
======

| File                                                  | Rating | Notes |
| ----------------------------------------------------- | ------ | ----- |
| src/file/imp/mod.rs                                   | +1    | |
| src/file/imp/other.rs                                 | +1    | not_supported
| [src/file/imp/unix.rs](#src/file/imp/unix.rs)         | +1    | `unsafe`, but sound.
| [src/file/imp/windows.rs](#src/file/imp/windows.rs)   | +1    | `unsafe`, but sound.
| [src/file/mod.rs](#src/file/mod.rs)                   | +1    | |
| src/dir.rs                                            | +1    | |
| src/error.rs                                          | +1    | |
| [src/lib.rs](#src/lib.rs)                             | +1    | |
| src/spooled.rs                                        | +1    | Could use a `.into_file()`
| [src/util.rs](#src/util.rs)                           | 0     | `unsafe`, but sound.
| tests/namedtempfile.rs                                | +1    | |
| tests/spooled.rs                                      | +1    | |
| tests/tempdir.rs                                      | +1    | |
| tests/tempfile.rs                                     | +1    | |
| .gitignore                                            | +1    | |
| Cargo.toml                                            | +1    | |
| Cargo.toml.orig                                       | +1    | |
| LICENSE-APACHE                                        | +1    | |
| LICENSE-MIT                                           | +1    | |
| NEWS                                                  | +1    | |
| README.&#8203;md                                      | +1    | |

| Other     | Rating | Notes |
| --------- | ------ | ----- |
| unsafe    | 0     | Minor unnecessary/overlong unsafe blocks
| fs        | 0     | Rationale of this entire crate
| io        | +1    | All looks sane
| docs      | +1    | Tons of doc comments
| tests     | +1    | Lots of 'em

src/file/imp/unix.rs
--------------------
| Line  | What  | Notes |
| -----:| ----- | ----- |
| 15    | cvt_err           | +1, verified error handling is correct vs online man pages for `rename` and `link`.
| 25    | cvt_err           | +1
| 30    | cstr              | +1
| 35    | create_named      | +1
| 44    | create_unlinked   | +1
| 62    | create            | +1, sane flag use.
| 79    | create            | +1
| 83    | create_unix       | +1, minor hazard to reproducable builds due to random filenames
| 93    | reopen            | +1
| 107   | persist           | 0, `unsafe` larger than necessary, but sound.
| 130   | persist           | 0, redox NYI but sane placeholder error
| 135   | keep              | 0, nothing to do on unix

src/file/imp/windows.rs
-----------------------
| Line  | What  | Notes |
| -----:| ----- | ----- |
| 19    | to_utf16          | +1, null terminates
| 23    | create_named      | +1
| 32    | create            | +1, minor hazard to reproducable builds due to random filenames
| 50    | reopen            | +1, `unsafe` but sound.  Verified error handling vs MSDN.
| 67    | keep              | +1, `unsafe` but sound.  Verified error handling vs MSDN.
| 78    | persist           | 0, `unsafe` larger than necessary, but sound.  Verified error handling vs MSDN.

src/file/mod.rs
---------------
| Line  | What  | Notes |
| -----:| ----- | ----- |
| ...   | \*                | +1, well reviewed despite my lack of notes.
| 587   | new_in            | +1, doc comment links wrong method (new_in instead of new)
| ...   | \*                | +1, well reviewed despite my lack of notes.
| 859   | into_file         | 0, confusing how to use these correctly as Drop still occurs
| 867   | into_temp_path    | 0, confusing how to use these correctly as Drop still occurs
| 876   | into_parts        | 0, confusing how to use these correctly as Drop still occurs
| ...   | \*                | +1, well reviewed despite my lack of notes.

src/lib.rs
----------
| Line  | What  | Notes |
| -----:| ----- | ----- |
| ...   | \*                | +1, well reviewed despite my lack of notes.
| 131   | NUM_RETRIES       | -1, absurdly large default value 1 &lt;&lt; 31, will hang "forever".
| ...   | \*                | +1, well reviewed despite my lack of notes.

src/util.rs
-----------
| Line  | What  | Notes |
| -----:| ----- | ----- |
| 9     | tmpname           | 0, `unsafe` for semi-pointless str::from_utf8_unchecked, but sound.  Reproducable builds hazard.
| 26    | create_helper     | +1, although I'd pick a different error message.

TIL
---
```rust
let tmp;
if cond {
    tmp = asdf;
    &tmp
}
```
```rust
fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
    f.debug_struct("TempDir")
        .field("path", &self.path())
        .finish()
}
```
* [std::io::Cursor](https://doc.rust-lang.org/std/io/struct.Cursor.html)
'''
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/sFgBUOUqXxQBGhMedcDt4IiDynHrMzxv71owTdcjkOE",
]

[[audits.tempfile]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "3.0.4"
notes = "LGTM. I feel like this crate could use more in-depth review since it does have some `unsafe` blocks (especially for Windows)."
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/3UjhRLQgXV--OsZKkygRefs4dkEDnFx3VCMqT04UdAA",
]

[[audits.tempfile-fast]]
who = "\"dbrgn\" (https://github.com/dbrgn)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.3.3"
notes = """
I focussed my review on the `linux` and `persistable` modules, I did not take
a look at the `sponge` module.

The code looks straightforward, even though I am not terribly familiar with
the POSIX file APIs. I did not spot anything obviously bad.

Pull requests created as part of this review:

- https://github.com/FauxFaux/tempfile-fast-rs/pull/2
- https://github.com/FauxFaux/tempfile-fast-rs/pull/3"""
aggregated-from = [
    "https://github.com/dbrgn/crev-proofs#ILvan_fvVdN8cSH8GC7kB_h-3W6xWnafsCUTpdoTxQ4",
    "crev:review/JF03ryDMMCB-Q7se_5jMkA8OfzevbU8aRNNz2WY5sx8",
]

[[audits.temporary]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "negative",
    "level-medium",
    "trust-high",
]
version = "0.6.3"
notes = "Reckless `unsafe`, buggy. https://github.com/stainless-steel/temporary/issues/1 . One of the reasons I've created cargo-crev in the first place."
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/MgaRU0Hg3Ui9bXR8PwXq_Wa3zF5tbTHzRdQyRhTuqUI",
]

[[audits.termios]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-run",
]
version = "0.3.3"
notes = '''
\[[Full Audit]\] Terminal I/O Settings

Pros:
* Portable as heck
* Probably sound

Cons:
* Limited tests
* No verification against native C headers

## Audit

⚠️ Didn't verify many OS-specific structs/constants, and termios structure might not guarantee ABI stability?

[Full Audit]: https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/termios.md'''
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/a5FZctJgqFYNuqYyXwalJ6LHH6YR7Ha2DaG_hcU_Rmc",
]

[[audits.textwrap]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "strong",
    "level-low",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.11.0"
notes = "A high-quality create with no `unsafe`, no `unwrap`s or `expect`s. Has thorough documentation and good tests."
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/hQeYM3-KBltjn77kGwxpQ6cnEhrsmlW7HOXdKqE2E-I",
]

[[audits.textwrap]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.11.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/nA7xUwvevb6hrJsD4SrVXf_weP8BeN4gaoG2ojKsGHo",
]

[[audits.thiserror]]
who = "\"LovecraftianHorror\" (https://github.com/LovecraftianHorror)"
criteria = [
    "positive",
    "level-medium",
    "trust-low",
]
version = "1.0.31"
notes = """
The bulk of the logic is in `thiserror_impl`. This crate just contains a
handful of private traits to extend functionality of `Path`, `PathBuf`, and
some generic types"""
aggregated-from = [
    "https://github.com/LovecraftianHorror/crev-proofs#PTlVqKJclK7ELjugGnh_nDgpaWLAAGRIg5UH391WKnQ",
    "crev:review/taVUPIPkJr01lEqqhe_buTWClCtleahAdp5aaokwAEw",
]

[[audits.thousands]]
who = "\"niklasf\" (https://github.com/niklasf)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.2.0"
notes = "No unsafe code, sane design and good test coverage."
aggregated-from = [
    "https://github.com/niklasf/crev-proofs#a0hN0qYwwDTmHtAchnTXiF-I_L9rK1KL5kgCmQoYR9o",
    "crev:review/eszmQVHrJpBGRvcRu398_IHoUEZvtzLN8HHHEZ8sJ0A",
]

[[audits.thread_local]]
who = "\"BurntSushi\" (https://github.com/BurntSushi)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.3.6"
notes = """
This crate was written by Amanieu d'Antras in response to my efforts to make
thread safe caching in the regex crate faster. The way to think about it is
\"dynamic\" thread local storage.

The crate does use a fair amount of unsafe, and the reason for this is to
minimize latency as much as is possible. Each use of unsafe isn't
particularly tricky---it's mostly managing atomic access to a hash table.
With that said, it would be nice if each use of unsafe had a comment
explaining/justifying it. There are some comments scattered about making
reasonable arguments, but more would be good.

This crate did have an issue a while back where if a program used the same
regex (for example) many times from many short lived threads, then the
cached data could grow without bound. Amanieu patched that issue a while
back by reusing thread ids. A thread id is tracked using normal TLS, which
is dropped when the thread is destroyed.

I gave this crate a rating of positive because I cannot identify any issues
after reviewing the code, although, I am not completely certain that there
are no issues because of the use of unsafe code.
"""
aggregated-from = [
    "https://github.com/BurntSushi/crev-proofs#VylyTuk8CMGqIxgHixWaqfiUn3xZyzOA1wFrQ0sR1As",
    "crev:review/xLn92O-0EINBZGVLiWgVNY8ZzMnK8C8bg0DwrIqaD7E",
]

[[audits.threadpool]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.8.1"
notes = """
Simple basic thread pool

Pros:
* Documented/tested MSRV
* Uses basic well tested mpsc channels
* No unsafe
* Well tested, documented, looks solid

Cons:
* No high performance work stealing queues to break up sync points for work submission
* No auto-scaling options
* Ignores OS thread pools (which might have better auto-scaling magic)
* Unclamped use of frequently mad num_cpus crate could result in ThreadPool::default causing far too many threads resulting in OOM crashes.

[Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/threadpool.md)"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/hE-odpvs8v2UuCCGPIhUPD0LOuZhs38G_h8AN_byppU",
]

[[audits.threadpool]]
who = "\"dns2utf8\" (https://github.com/dns2utf8)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.8.0"
notes = "solid crate"
aggregated-from = [
    "https://github.com/dns2utf8/crev-proofs#kL0r_IUlQZ2xcmHPRaG6eTI5HG9mFZa0XqvDmf6IocI",
    "crev:review/4dos-XtLihw1CvU1rlydLol7306fDTm9UyFyrIabBT8",
]

[[audits.threema-gateway]]
who = "\"dbrgn\" (https://github.com/dbrgn)"
criteria = [
    "strong",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.12.1"
notes = "I'm the author. I'd consider the codebase to be clean and readable. More reviews are obviously welcome."
aggregated-from = [
    "https://github.com/dbrgn/crev-proofs#ILvan_fvVdN8cSH8GC7kB_h-3W6xWnafsCUTpdoTxQ4",
    "crev:review/VdsGFQfbneOQGkCsPoJ5tyMChSKOxUtosHaO7RV1260",
]

[[audits.tiff]]
who = "\"icefox\" (https://git.sr.ht/~icefox)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.3.1"
notes = """
LGTM.  The only unsafe is for casting some slices of numbers
to bytes, which appears to be done safely.
"""
aggregated-from = [
    "https://git.sr.ht/~icefox/crev-proofs#lr2ldir9XdBsKQkW3YGpRIO2pxhtSucdzf3M5ivfv4A",
    "crev:review/C2zN0QKP0VI64xXKYAghR8jkWjEQCNfYJc_28xapqMc",
]

[[audits.tiled]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "negative",
    "level-medium",
    "trust-medium",
]
version = "0.8.0"
notes = """
Do not use on User Generated Content!
    * Vulnerable to path traversal attacks if fed bogus .tmx files (see Tileset::new_reference)
    * No obvious protection against zipbombs
    * A couple cases where bad input will panic, a potential DoS vector.

For game engines, there's also no great way to inject your own virtual filesystem callbacks (again see Tileset::new_reference)

There's also a few missing features:
    * Wang Tiles
    * Terrains
    * \"file\" Custom Properties

Detail
======

| File                                          | Rating | Notes |
| --------------------------------------------- | ------ | ----- |
| assets/tiled_base64_external.tmx              | +1 | |
| assets/tiled_base64_gzip.tmx                  | +1 | |
| assets/tiled_base64_zlib.tmx                  | +1 | |
| assets/tiled_base64.tmx                       | +1 | |
| assets/tiled_csv.tmx                          | +1 | |
| assets/tiled_image_layers.tmx                 | +1 | |
| assets/tiled_xml.tmx                          | +1 | |
| tilesheet.png                                 | +1 | Neat looking modern tileset... wonder what the source is!
| tilesheet.tsx                                 | +1 | |
| examples/main.rs                              | +1 | |
| [src/lib.rs](src/lib.rs)                      | +1 | |
| tests/lib.rs                                  | +1 | |
| .cargo-ok                                     | +1 | |
| .gitignore                                    | +1 | |
| .travis.yml                                   | +1 | Sparse... no MSRV, beta/nightly, etc. |
| Cargo.toml                                    | +1 | |
| Cargo.toml.orig                               | +1 | |
| CONTRIBUTORS.md                               | +1 | |
| README.md                                     | +1 | Dead link to tileset source

| Other     | Rating | Notes |
| --------- | ------ | ----- |
| unsafe    | +1 | No unsafe
| fs        | -1 | See Tileset::new_reference notes
| io        | 0  | Brittle XML parsing, but OK for limited inputs.
| docs      | -1 | Barely any.
| tests     | +1 | |

src/lib.rs
----------
| Line  | What  | Notes |
| -----:| ----- | ----- |
|  28 | get_attrs!              | Eep
|  53 | parse_tag!              | Mishandles nested tags... fortunately that's probably not necessary.
|  97 | Colour::from_str        | British... and a possible source of panics.
| 161 | PropertyValue::new      | No \"file\" support (see https://doc.mapeditor.org/en/stable/manual/custom-properties/#adding-properties)
| 238 | Map::new                | My kingdom for some variable names!
| 256 | Map::new                | Still using try!
| 385 | Tileset::new_reference  | Possible path traversal attacks, limits ability to inject your own virtual filesystem.
| 860 | decode_csv              | I've heard decoding arbitrary CSV is way more complicated than this... but this probably works for tile data as used in tmx files.
| 883 | convert_to_u32          | Kinda want this to be based on iterators to avoid an extra alloc...
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/GmLaVpBVcnhoQC4Wdvy9pBlqhjSZ_Gdwg2RcKwGANU8",
]

[[audits.tiled-json-rs]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "negative",
    "level-medium",
    "trust-medium",
]
version = "0.2.6"
notes = """
Do not use on User Generated Content!
* Vulnerable to path traversal attacks if fed bogus .tmx files (see Tileset::new_reference)
* A couple cases where bad input will panic, a potential DoS vector.

For game engines, there's also no great way to inject your own virtual filesystem callbacks (again see Tileset::new_reference)

Pros:
* JSON is lighter weight than XML
* Fuller format support vs tiled

Cons:
* No compression
* API is just as raw in many ways
* Requires exporting.
* Slightly unusual license for rust projects (MPL, instead of MIT/Apache 2)

Detail
======

| File                                          | Rating | Notes |
| --------------------------------------------- | ------ | ----- |
| [src/layer.rs](src/layer.rs)                  | 0 | Raw structures
| src/lib.rs                                    | +1 | |
| src/map.rs                                    | +1 | |
| src/object.rs                                 | +1 | |
| [src/parsers.rs](src/parsers.rs)              | 0 | No decompression support, can panic (not suitable for user generated content)
| [src/tile_set.rs](src/tile_set.rs)            | -1 | Not suitable for user generated content!
| src/utils.rs                                  | +1 | |
| src/wangs.rs                                  | +1 | |
| .cargo_vcs_info.json                          | +1 | |
| .cargo-ok                                     | +1 | |
| Cargo.toml                                    | +1 | |
| Cargo.toml.orig                               | +1 | |
| LICENSE                                       | +1 | |

| Other     | Rating | Notes |
| --------- | ------ | ----- |
| unsafe    | +1 | None
| fs        | -1 | Path traversal
| io        | +1 | serde
| docs      | +1 | |
| tests     |  0 | Not in crate, but found in repository (https://gitlab.com/ljcode/tiled-json-rs/tree/master/tests)

src/layer.rs
------------
| Line  | What  | Notes |
| -----:| ----- | ----- |
|  17   | TileLayer::chunks | Option seems kinda pointless, also this API is meh
| 129   | DrawOrder | There are at least 4 draw modes now for layers - although there's also Map / RenderOrder.... blehrg (top->down left->right, top->down right->left, ...)

src/parsers.rs
--------------
| Line  | What  | Notes |
| -----:| ----- | ----- |
| 129   | parse_color blue | Despite earlier padding, no guarantee this is valid / may panic (both for overflowing and for not being a unicode boundary.)

src/tile_set.rs
---------------
| Line  | What  | Notes |
| -----:| ----- | ----- |
| 121   | Deserialize for TileSet | File::open - path traversal attacks, lack of virtual filesystem support, etc.
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/bR2mVOgEVnvwDN_HxePuXQ1tmHESvI4PkPpG4NQk1rM",
]

[[audits.tinyvec]]
who = "\"HeroicKatora\" (https://github.com/HeroicKatora)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.2.0"
notes = """
Very focussed `forbid(unsafe)` crate.

The minor flaws are introduced by trying to mimic the std interface too much
and too quickly. This leads to some misbehaviour in remove and drain, several
known slowness issues—algorithmic complexity as well as efficiency of
operations—and poorly documented interfaces with slightly non-standard panic
behaviour, and unknown decision making for adding them.

Why implement `fmt::*` interface when the standard library does not for Vec?
How can Extend be called without risking panicking?

No safety critical flaws though and I expect most to be fixable within the
interface that was published (except the abundance of trait impls that is a
matter of taste)."""
aggregated-from = [
    "https://github.com/HeroicKatora/crev-proofs#-sApEowWcAS9J0R7aO18cghvhLBpuMhyeUuWQq_fits",
    "crev:review/XIKtOAa3h3zfNFuItI08C0ymeh_HBQMJRlgr3D5hfrI",
]

[[audits.tinyvec_macros]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/oxpMI4R8tOmOw1EsRRpm7T4Hk8Zn99m7929egthVF9g",
]

[[audits.tokio-current-thread]]
who = "\"HeroicKatora\" (https://github.com/HeroicKatora)"
criteria = [
    "negative",
    "level-medium",
    "trust-high",
]
version = "0.2.0-alpha.1"
notes = """
Best summarized as a flood of unsafe blocks.

The `src/lib.rs` already looks somewhat suspicious. We have a thread local
containing a pointer that is unsafely accessed. It is set by transmuting a
local reference to a dynamic trait object which has its lifetime erased. This
particular portion might be fine if no code that uses the trait depends on
that lifetime. However, all of this is worryingly done without any statement
of purpose, any reference to the overall structure, and little to no
comments.

Then we look into `src/scheduler.rs` and find our worst nightmares come to
life. Here's a short list of unexplained stuff:

* uncommented impls of Sync and Send 
* an adhoc implementation of an intrusive queue/linked-list, giving a blog
  post about C (!) as the source. Maybe one of the better sources, I do not
  know, but it appears somewhat unmotivated and is intertwined with the rest of
  the code.
* several different UnsafeCell that have been encapsulated with telepathy,
  apparently, since there are no comments explaining them nor their access.
* unsafe blocks spanning ~70 lines
* and the amazing unsafe fn ptr2arc<T>(ptr: *const T) -> Arc<T>  containing

  ```rust
  let anchor = mem::transmute::<usize, Arc<T>>(0x10);
  ```

  without further explanation. Note that `T` is a type parameter that is
  exposed to the user through the type parameter `P` of `CurrrentThread`.
  This is restricted to `tokio-executor::park::Park` and provides an
  associated type which is later used as the `T` in question. Note that a
  public constructor exists.

  This is slightly unsound at best, if the node must be aligned to more than
  that function guarantees, and horrible with regards to how the pointer is
  used as a manual memoffset calculation afterwards.

* The part where `Node` is used to ignore the lifetime of a contained object
  and only its Drop implementation double panicking protects against using and
  dropping the object out of its own lifetime is the least worrying here. Also,
  since the comment refers to some type parameter `T` that doesn't exist in the
  impl."""
aggregated-from = [
    "https://github.com/HeroicKatora/crev-proofs#-sApEowWcAS9J0R7aO18cghvhLBpuMhyeUuWQq_fits",
    "crev:review/BcJilftk_1UI0oxB-ai_G3-7MludBnEv4Uo4kpV5dpQ",
]

[[audits.tokio-executor]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.1.8"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/C95jSAIu4h1SieDICIS-DbiaM0goTQF4Ew6oomHUhco",
]

[[audits.tokio-retry]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.3.0"
notes = "The API of the exponential backoff strategy is surprising, as it uses the same number for the base and the exponent."
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/ksJl3HZ9S5BqGtSZJ8zu9mCnSp47kYKs3zYAmQLN5vM",
]

[[audits.tokio-retry]]
who = "\"qnighy\" (https://github.com/qnighy)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.2.0"
notes = "No unsafe code. Does things it claims. We could perhaps have some refactorings but it already does its job pretty well."
aggregated-from = [
    "https://github.com/qnighy/crev-proofs#fkkJ3Z6xSDEZwFlyKgIDxYS2x6mS7b2cxbWBeEWgfXs",
    "crev:review/aiB8Pqz2Z7k8N9LT7IISKG_aW6fr78ZGTQZ-nO3Q8ZM",
]

[[audits.tokio-signal]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.2.7"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/MHrCyuRPZHcABqcIoU1tLAuoE4LlecvKsCSpG0-N7bg",
]

[[audits.tokio-timer]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.2.11"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/pRax9YxHnfvBR_Nbqwn7lcc-vQTg2vi-dPBteLRCwEg",
]

[[audits.toml-query]]
who = "\"matthiasbeyer\" (https://github.com/matthiasbeyer)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.10.0"
notes = "I am the author and am confident that the crate works as advertised."
aggregated-from = [
    "https://github.com/matthiasbeyer/crev-proofs#HT24oErbY-0x-yt9mGMZEk5S07lzpFQ4kayzEkVxJWU",
    "crev:review/fEYsxNozOGgHXxDpRIRfthcMxSMBQP-kr7kniChnT9s",
]

[[audits.tonic]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.4.3"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/k_BAj0pSGTHjX7an0aXazCAcwyNiN9E53X1j3w-cvs4",
]

[[audits.totally-safe-transmute]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "negative",
    "level-low",
    "trust-high",
]
version = "0.0.3"
notes = """
Linux only :(
j/k"""
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/Q6gPhUUti0nYJzMT2YGJZe04MQsP5Mvtv8h2-V0HWWs",
]

[[audits.totally-speedy-transmute]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "negative",
    "level-low",
    "trust-high",
]
version = "1.69.420"
notes = "Very funny, but don't use it in production."
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/VWuVx1V8oTVAQ6yjHf9zc79Ln4J3Q-i9bJye8UtWKzQ",
]

[[audits.tower-service]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.3.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/WwOZ7NfV2hm1chjTs2W8IBKvBj5EH2v-rI98FZxdSVM",
]

[[audits.tracing]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.1.22"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/JBxAij6jLzLMjBCJxVH1mx3KDctBWA2jGEsGicRUzy8",
]

[[audits.trackable]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.2.23"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/jP3CSRFBox_Q38lLqhnbNbZ4gKixC7kshSTTDpZ5CMI",
]

[[audits.trackable_derive]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.1.3"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/0Hjse009MFH_ZPNsOO44mPC2cBYs3Bjh_Ql30ci2K98",
]

[[audits.treeline]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.1.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/bQ1rCY-sdEKwTCk6rs_XQSLU9MllUZ5jkWlaChfqsj8",
]

[[audits.try-lock]]
who = "\"johnlepikhin\" (https://github.com/johnlepikhin)"
criteria = [
    "positive",
    "level-high",
    "trust-low",
]
delta = "0.2.2 -> 0.2.3"
aggregated-from = [
    "https://github.com/johnlepikhin/crev-proofs#M86HwhpA_3RBI3vxQ19DsUhy-jeVsLgNr_cwR_CiOHY",
    "crev:review/qu_CGqykk4SQR80GHV23A3jR7wZJbaZMpdWSQJTnsNk",
]

[[audits.try-lock]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.2.2"
notes = """
LGTM
"""
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/lXGTz_pNeIzbwZa7ssIiwiKFZWSAxx0rFvWrtDXTn74",
]

[[audits.try_from]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "negative",
    "level-low",
    "trust-high",
    "unmaintained",
]
version = "0.3.2"
notes = "TryFrom is now in the standard library, and this library does *not* fall back to the standard trait."
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/hlZzYcSulyxj2B04anVZw6iGSxiII-WUKWU-DMxQ3LM",
]

[[audits.try_from]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.3.2"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/_p57sXFhwqJgsN89Wc3GZotGnlFfqWJYSspcK1wyLew",
]

[[audits.try_future]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.1.3"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/StgEqQI2m1QV4Iilwx7-MrWANKpEY2Gaswbk52-XUS0",
]

[[audits.type_description]]
who = "\"matthiasbeyer\" (https://github.com/matthiasbeyer)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.5.0"
notes = "Was invovled in writing this crate, but am not the main author."
aggregated-from = [
    "https://github.com/matthiasbeyer/crev-proofs#HT24oErbY-0x-yt9mGMZEk5S07lzpFQ4kayzEkVxJWU",
    "crev:review/7gUOI2E_LIuzPozy_gzOm6lQ29PMJpf4bn8XQQdUyMQ",
]

[[audits.type_description]]
who = "\"matthiasbeyer\" (https://github.com/matthiasbeyer)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.2.0"
notes = """
I have been involved in writing this crate (not primary author though).
Crate should be perfectly fine to use."""
aggregated-from = [
    "https://github.com/matthiasbeyer/crev-proofs#HT24oErbY-0x-yt9mGMZEk5S07lzpFQ4kayzEkVxJWU",
    "crev:review/xRdzLeAMnZkd-SYmz-sEa9WMYmiKWrlRqrweGLh3jYE",
]

[[audits.type_description_derive]]
who = "\"matthiasbeyer\" (https://github.com/matthiasbeyer)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.5.0"
notes = "I am the co-author of this crate and am confident about it."
aggregated-from = [
    "https://github.com/matthiasbeyer/crev-proofs#HT24oErbY-0x-yt9mGMZEk5S07lzpFQ4kayzEkVxJWU",
    "crev:review/4yk6D6_uUm6fQna4C_gLD_JAwdRCtZQ8EslrS7SfHmA",
]

[[audits.typeable]]
who = "\"dbrgn\" (https://github.com/dbrgn)"
criteria = [
    "strong",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.2"
notes = """
This package with its 6 lines of code and no dependencies is reasonably simple
that I can claim that it's secure!

The crate is potentially unmaintained since the author did not react to two
license-related minor issues, but the project is arguably feature-complete."""
aggregated-from = [
    "https://github.com/dbrgn/crev-proofs#ILvan_fvVdN8cSH8GC7kB_h-3W6xWnafsCUTpdoTxQ4",
    "crev:review/DAwTs_uaTXJV9P8emIxTGbD_UXrMNhYsdvbbWM1pFlk",
]

[[audits.typed-index-collections]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "3.0.3"
notes = "It might need `#[repr(transparent)]` in a couple of places, but it's generally fine"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/s-EeHCWqi5xigoaMKO80DBc0w8j5bLOln1GanmKbXLQ",
]

[[audits.ucs2]]
who = "\"HeroicKatora\" (https://github.com/HeroicKatora)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
delta = "0.2.0 -> 0.3.2"
notes = """
CI coverage is good, running both rustfmt and clippy on every push,
regardless of branch. It does not seem to run specifically on pull requests,
which, _I believe_, leads to Github not checking the merge commit
specifically but instead just individual commits on the remote branch. Not
too consequential in any case, just slightly unorthodox.

Since 0.2.0 (the previous review) decoding has been added which seems to have
resulted in an additional internal dependency (bit_field) that has _not_ yet
reached `1.0`. However, it remained stable for the past year. It's not
immediately clear why a simple shift-and-mask would not be clean enough here,
the traits provided by the dependency seem much more relevant if they help
enable an interface or generic implementation—which is both not required
here.

The decode interface looks sound and decently usable. There is an interesting
difference in that its `_with` variant returns a count on success whereas the
encoding methods do not. Additionally, it's unclear how to efficiently and
properly react to an `OverflowError` because neither the number of
successfully consumed input nor the actually required output would be
available to the caller.

The encode interface is unchanged since `0.2.0`. Thus I'm preserving the
previous review.

Contains unsafe code as a mechanism to eliminate bounds checks by asserting
properties with unreachable_unchecked. However, this appears to make proper
(and only proper) use of the unsafe assertion that strings are valid UTF-8
given by the standard library.

The unsafe code is documented and the reasoning behind it is explained. The
only minor flaw is that it does not properly explain that the validity
invariant used is being tested for. Since it does reference both utf-8 and
the byte length in its argument this should be straightforward to the reader
though.

A slightly cleaner way of testing the conditions might have been matching the
first byte with integer ranges, which would have eliminated the last bounds
check without an additional unreachable assertion.

No `strong` rating due to superficially unimportant dependency, and concerns
about the maturity of the interface (see above).

It remains unclear if an iterator based design instead of callbacks was
considered, potentially placing control flow in the hands of the caller. This
may be important for some cases where buffers need to be flushed while
efficiently preserving the decoding state."""
aggregated-from = [
    "https://github.com/HeroicKatora/crev-proofs#-sApEowWcAS9J0R7aO18cghvhLBpuMhyeUuWQq_fits",
    "crev:review/h3ht_93bo25EdzuL4ELVC6pzmhyzLAbwfT2DLaRD9ME",
]

[[audits.ucs2]]
who = "\"HeroicKatora\" (https://github.com/HeroicKatora)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.2.0"
notes = """
Contains unsafe code as a mechanism to eliminate bounds checks by asserting
properties with unreachable_unchecked. However, this appears to make proper
(and only proper) use of the unsafe assertion that strings are valid UTF-8
given by the standard library.

The unsafe code is documented and the reasoning behind it is explained. The
only minor flaw is that it does not properly explain that the validity
invariant used is being tested for. Since it does reference both utf-8 and
the byte length in its argument this should be straightforward to the reader
though.

A slightly cleaner way of testing the conditions might have been matching the
first byte with integer ranges, which would have eliminated the last bounds
check without an additional unreachable assertion.

No `strong` rating since the crate is incomplete and the trust of maintainers
is not clearly established."""
aggregated-from = [
    "https://github.com/HeroicKatora/crev-proofs#-sApEowWcAS9J0R7aO18cghvhLBpuMhyeUuWQq_fits",
    "crev:review/n2pfkVj5g3f3zw64r4EVz_9uMD_OdqMptXI1A2poioY",
]

[[audits.ulid]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-run",
]
version = "0.2.3"
notes = "LGTM. Small and safe."
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/yCQra1I6QPB3jb9AxeUJxlbLZ85ny2LshGSoYkrUNxI",
]

[[audits.umask]]
who = "\"Canop\" (https://github.com/Canop)"
criteria = [
    "positive",
    "level-high",
    "trust-low",
]
version = "0.1.5"
notes = "I'm the author. This crate is very simple and includes nothing dangereous."
aggregated-from = [
    "https://github.com/Canop/crev-proofs#FBkykBV6YaqAaGoUXyvd-XkEqDYxQNM7EUnZ2nuy-XQ",
    "crev:review/qlzhNR2aE_dO1gY6Z9ds3DmowMz_ERJXgrRIKK_WnMI",
]

[[audits.uname]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/TZUHi7yDFY2rM1guuQcjd8HD0aRV9UL6u0v9k4gRD68",
]

[[audits.unarray]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.1.4"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/qCmmXUmDbNEfn-rJZPWrNKAEafBk2vU_N81Vh0ZrVRE",
]

[[audits.unbounded]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "negative",
    "level-low",
    "trust-high",
]
version = "0.0.5"
notes = "Unsound and unsafe"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/vy_yKiXx9vRbAic8RKTJO0v56XXAEbdkG_fSuqoeyrw",
]

[[audits.undither]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.2"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/SoqbV7-56FrgI4750RZuHPm-EaPfOGwdwjA_ULxiwdE",
]

[[audits.unicase]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "2.4.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/HB1byh5D8nB9Drgdje4arw1do9yHMuuV5qPVMr43hf4",
]

[[audits.unicode-linebreak]]
who = "\"mgeisler\" (https://github.com/mgeisler)"
criteria = [
    "strong",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.1"
notes = """
Nice crate which uses a build script to auto-generate the character
tables at compile time. Has one instance of `unsafe` where a `u8` is
cast to an enum. The enum is marked as `repr(u8)` to make this safe."""
aggregated-from = [
    "https://github.com/mgeisler/crev-proofs#buAHNI2OOf3cARKjtWidV2ur7MlZJNK1RLNZfaQqUj4",
    "crev:review/pp_GyKEYFis9fL0GumWRFsNhoEb1-vWrkh9xSeC4WKw",
]

[[audits.unicode-width]]
who = "\"mgeisler\" (https://github.com/mgeisler)"
criteria = [
    "strong",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.8"
notes = """
Nice crate with no unsafe code (uses `deny(unsafe_code)` to ensure
this). The data tables are generated automatically from the upstream
Unicode data using a Python script, which ensures that they’re
correct and easy to update when new Unicode versions are published."""
aggregated-from = [
    "https://github.com/mgeisler/crev-proofs#buAHNI2OOf3cARKjtWidV2ur7MlZJNK1RLNZfaQqUj4",
    "crev:review/NoZreNbaPU0ba5ZDy3wDJjyraI5vZLkn8ma1qwgxbQU",
]

[[audits.unicode-xid]]
who = "\"KonradBorowski\" (https://gitlab.com/KonradBorowski)"
criteria = [
    "positive",
    "level-medium",
    "trust-low",
]
version = "0.1.0"
notes = "Does exactly what it should do, but it's based on Unicode 9.0, when at the time of the review the newest version was 12.1"
aggregated-from = [
    "https://gitlab.com/KonradBorowski/crev-proofs#ZOm7om6WZyEf3SBmDC69BXs8sc1VPniYx7Nfz2Du6hM",
    "crev:review/4qPmF0yeSXeuj5Lt2oSvprfPpI1NcIdFKogSvOh-tMM",
]

[[audits.unidecode]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
    "unmaintained",
]
version = "0.3.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/76o8t9zklVwZusi1mlgsSqTJnn04RAa0U4YPCxiEAhE",
]

[[audits.untrusted]]
who = "\"oherrala\" (https://github.com/oherrala)"
criteria = [
    "positive",
    "level-high",
    "trust-low",
]
version = "0.6.2"
notes = "Well documented and security focused simple parsing library."
aggregated-from = [
    "https://github.com/oherrala/crev-proofs#YWfa4SGgcW87fIT88uCkkrsRgIbWiGOOYmBbA1AtnKA",
    "crev:review/Dfw-FV1hDL7rOYYJ4JIewAMxXwHdNv5ee5wnu1JHzjM",
]

[[audits.unzip3]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "1.0.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/TWFzs4jYqNrin2LRcelYq2ksbFYZqhyAUbiDrSu59PM",
]

[[audits.ureq]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "negative",
    "level-low",
    "trust-high",
]
version = "0.11.1"
notes = """
`Header::new` is unsound? This `unsafe` there seem unneccessary in the first place. There's not much performance to gain here.


`Header: value` - there can be more spaces preceeding the value. `Header::from_str` could take a `HeaderName:     Value` \"The field value MAY be preceded by any amount of LWS, though a single SP is preferred. \" (https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2)


```
pub fn add_header(headers: &mut Vec<Header>, header: Header) {
    if !header.name().to_lowercase().starts_with(\"x-\") {
```

Probably can be done faster by just comparing slice with `eq_ignore_ascii_case`, instead of allocating a lowercase copy.



`src/lib.rs`: Tests doing http calls to external network can fail on offline machines, are a potential privacy problem etc.



`PoolKey::new` - failing to get a port should probably be an error, since that means te scheme was neither http nor https, so why are we even handling it?


`Unit` indeed is a so-so name. If the comment is \"unit of work\" then it probably should be `UnitOfWork`.


```
    // pointer to underlying stream
    stream: *mut Stream,
```

Ouch. When I see mutable raw pointers, I already know that I will not be using this code as is. :D . From what I can see later, it seems this pointer is used just for the drop implementation? In that case, just use `Option<Stream>` or `Option<Box<Stream>>`. `Option<Box<T>>` even compiles down to the same data/code as nullable pointer.


I fail to see the point of `Request::build`...


`Request::query` and `query_str` seems silent about the matter of escaping, and I wonder if it will work correctly at all.


`Request::timeout` ... Deadlines are better than timeouts, and are not harder to implement.


`    index: (usize, usize), // index into status_line where we split: HTTP/1.1 200 OK`

I see no reason, why these two would be touple, instead of being separate and named appropriatly.


`Response::new` works by ... parsing? I don't know how I feel about that. Seems wasteful.



```
    /// Rather than exposing a custom error type through results, this library has opted
    /// for representing potential connection/TLS/etc errors as HTTP response codes.
    /// These invented codes are called \"synthetic\".
```

I don't know how I feel about this. Seems like a bad idea. :D . It will lead to confusion during debugging eg. by people who don't know about this \"feature\" (eg. DevOps that will be reading logs of software that is using this library). They will see \"error: 535\", and wonder how the hell this code happened.


`        let mut yolo = YoloRead {` does not build confidence. :D


```
pub(crate) struct YoloRead {
    stream: *mut Stream,
    dealloc: bool, // whether we are to dealloc stream on drop
}
```


Oh. Here is another `*mut Stream`. I don't really get why it is neccessary.
```
    fn from_str(s: &str) -> Result<Self, Self::Err> {
        let bytes = s.as_bytes().to_owned();
```

I don't think this clone is neccessary. 


Generally - negative review, since there's some `unsafe` code that I don't think is neccessary, and I have
no confidence that it is actually correct (quite the opposite... I suspect some stuff is wrong with it).

There were some other minor problems, potentially bugs, a lot of casual needless cloning and
stuff that looks like plain inefficiencies, and generally this crate at its current state does not look
like something I'd recommend for any serious production use. The goal seems good but it seem not there yet.
I think crates like this need either a lot of usage and pair of eyes and developers to iron out all the details,
or some extensive test suite.
"""
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/xprCgogr1q_0YGQz348QnZJb8vpP7f_iV6-exeVCVik",
]

[[audits.ustr]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.8.1"
notes = "1-pointer size is unbeatable among small string libraries"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/WikEySXKDpXd7iLfq5EvZbE_CktPur1kusmXz7jAsTk",
]

[[audits.utf8-ranges]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "1.0.4"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/-3Wcv7cCEh_igIxFsD5OSJOOd24XKp_vkfRwd_lROws",
]

[[audits.v_escape_derive]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.5.5"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/SD_sWHgQGEMeCl5Q69aif7rF7YpU6hZKAtc3VMlOv48",
]

[[audits.v_htmlescape]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.4.5"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/1OtjdjNikT1mmPqOFNxNtJC29wNwgwrciTdEhcJuo2k",
]

[[audits.vaultrs]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.6.2"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/NtA6_WPfvwBJVI5OdC4Draoj4-TwMmhSYIbK67O-R9M",
]

[[audits.vcell]]
who = "\"chrysn\" (https://gitlab.com/chrysn)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.1.2"
aggregated-from = [
    "https://gitlab.com/chrysn/crev-proofs#bYdCa4xhd5VL4dlcVPBxV51PrW5joFp9U04rKgcTvk8",
    "crev:review/kcXYyYLY5rClXS9XUSNX6-7GMniUkBiUcysuSkAYlbE",
]

[[audits.vec_map]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.8.1"
notes = """
No unsafe, LGTM.
"""
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/w_CgOomnrSQCYp2mG7HNKfPRs8dquTaDfif07MTnekg",
]

[[audits.vergen]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "3.1.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/bgYMeif629rSlh7bZYr5iYZT1EoZ1VMIRooJTRt1eBU",
]

[[audits.vergen]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "neutral",
    "level-low",
    "trust-high",
]
version = "3.1.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/FdBZ9xruY7yK1sxbgeYAAWH5vDfJtlP4HiF4Xc50lBE",
]

[[audits.version-compare]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.0.11"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/0mTuJwVBdEOp9GG-n4ynGYXXX5f-cM2Fmi5san4xJGE",
]

[[audits.version_check]]
who = "\"buffet\" (https://github.com/buffet)"
criteria = [
    "positive",
    "level-medium",
    "trust-low",
]
version = "0.9.4"
notes = "Relatively straight forward parsing of `rustc --version`, with pretty good tests."
aggregated-from = [
    "https://github.com/buffet/crev-proofs#liorp96qpcrH18meMUI0jFcsq9N3LgKvVm9yaKrwBOg",
    "crev:review/tuZAXdPwMJpsJycSyJdNoKtlzVVrH74PxLwoTrvca_Y",
]

[[audits.version_check]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.9.3"
notes = """
Runs `rustc --verbose --version` and parses the result. The binary to run can
be overridden via an environment variable `RUSTC`, which I do not consider as
a security risk since it's done at build time.

There is no `unsafe`, and the code itself is mostly string mangling, so
I think this crate is okay."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/UU3CuA1q2yuIiXLNP6eN2GsVQaA7XYIwp90uDM_B-to",
]

[[audits.version_check]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.9.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/p8PiKLf_f6QuLGpnNMNksX-xIWparBk01GaVD-gMwQc",
]

[[audits.vfs]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.4.0"
notes = "Decent crate seeing some usage. Worth building upon.  ([Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/vfs.md))"
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/5MyaVgLaHflnTDorX2mkAZJRqDxNHa3q5cI9BXeKS2Q",
]

[[audits.vlq]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.5.1"
notes = """
Haven't thoroughly verified base64 logic but looks good skimming everything.
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/v8YE51yYbaKtpkbsZpC4umF-zSj01_8z4iE2n0Z1FLo",
]

[[audits.void]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.2"
notes = """
Trivial uninhabited type.  LGTM.

No unsafe, no I/O, single lib.rs source file, decent docs.
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/Hq6033X2uJ45vGAZ0vR0XKk1InUL6oVnDUT9Lc9Le-I",
]

[[audits.void]]
who = "\"icefox\" (https://git.sr.ht/~icefox)"
criteria = [
    "strong",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.2"
aggregated-from = [
    "https://git.sr.ht/~icefox/crev-proofs#lr2ldir9XdBsKQkW3YGpRIO2pxhtSucdzf3M5ivfv4A",
    "crev:review/V45qI9AbULql-KjIYegnKqeUpDe7yN1GZIFN_YQY73I",
]

[[audits.void]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "strong",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.0.2"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/yObyeorVZAobKJiCUvtgzpJTtABXqScptewC0ZRKZT4",
]

[[audits.vpsearch]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "2.0.0"
notes = "It's robust and well-optimized"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/Yit1AdS7xJSLWQ_n4HYFjdNjF9EhcjOCIRwxCJ-T1Eo",
]

[[audits.wait-timeout]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.2.0"
notes = """
The crate implements a seemingly trivial thing: waiting for a child process
to finish, with a timeout.

On Windows, this boils down to a single WinAPI call. I don't know much about
Windows, but the code looks okay to me. There is a minor issue of timeouts
being capped at ≈49 days, which I reported:
https://github.com/alexcrichton/wait-timeout/issues/23

On Unix, the algorithm is much more involved. I understand it, and I believe
it to be correct.

The crate calls into libc and WinAPI, so there are a bit of `unsafe` in here.
But it all looks all right to me."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/4ZQepgxWQdv5OzrSnvSYtdHKyBm4i_2LOsx569XqO8A",
]

[[audits.waker-fn]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "1.1.0"
notes = """
Basic 0-dependencies Fn-based [Waker] source.

This could eventually be made safe when [Wake] (not [Waker]!) stabilizes.
In the meantime, this crate manually creates a [Waker] via [RawWaker].
This requires some `unsafe` code, but this crate appropriately uses just about
the bare minimum necessary to accomplish the task, and appears to do so soundly and correctly.
Additionally, the code is minimal (63 LOC including comments and whitespace for 1.1.0) and straightforward.

[Wake]:     https://doc.rust-lang.org/std/task/trait.Wake.html
[Waker]:    https://doc.rust-lang.org/std/task/struct.Waker.html
[RawWaker]: https://doc.rust-lang.org/std/task/struct.RawWaker.html
[Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/waker-fn.md)"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/VJs8wJVFQ2ZN5U4D3cbkqR-Btt6qJwNc9Lnc2452PA4",
]

[[audits.want]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.0.6"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/EXV7T2NnkintKfB-lYgojEcLp-IZ0VKQZxDjqjuotlw",
]

[[audits.wasimage]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "negative",
    "level-low",
    "trust-high",
    "unmaintained",
]
version = "0.1.1"
notes = "Warning: this is stolen code"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/vwPeJK9u3l3Cmkj7yv8Er8KhYCmEQJv0tQMXydA0duA",
]

[[audits.wasm-bindgen-shared]]
who = "\"icefox\" (https://git.sr.ht/~icefox)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.2.54"
notes = """
Not quite sure what it does but it doesn't do anything malicious.
"""
aggregated-from = [
    "https://git.sr.ht/~icefox/crev-proofs#lr2ldir9XdBsKQkW3YGpRIO2pxhtSucdzf3M5ivfv4A",
    "crev:review/AFOFk3PZgfuXZT-GXG7njUWy9py_HoFV-JRwnvmElBo",
]

[[audits.wasmparser]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.15.3"
notes = """
Looks great overall.
I haven't double-checked any logic against WASM specs.
I haven't verified that WASM validation is suitable to rely upon for JIT compilers or the like.

Detail
======

| File                  | Rating | Notes |
| --------------------- | ------ | ----- |
| examples/dump.rs      | +1    | io (safe) |
| examples/simple.rs    | +1    | io (safe) |
| fuzz/*                |       | UNREVIEWED (excluded from crate) |
| src/lib.rs            | +1    | |
| src/limits.rs         | +1    | |
| src/parser.rs         | +1    | |
| src/tests.rs          | +1    | io (safe) |
| src/validator.rs      | +1    | check_utf8 could be mostly replaced with stdlib? |
| tests/*.wasm          |       | Unreviewed... nothing but WASM though, should be OK |
| .gitignore            | +1    | |
| .travis.yml           | +1    | |
| Cargo.toml            | +1    | |
| Cargo.toml.orig       | +1    | |
| check-rustfmt.sh      | +1    | Globally overwrites rustfmt with specific version |
| format-all.sh         | +1    | |
| LICENSE               | +1    | Apache 2.0 |
| Readme.md             | +1    | |
| test-all.sh           | +1    | |

| Other     | Rating | Notes |
| --------- | ------ | ----- |
| unsafe    | +1    | No unsafe code.
| fs        | +1    | Examples and tests only, reasonably used.
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/X3bR6YJquVLDsYssZDzXExkMGe5J7WG7nOXmbS_vqU8",
]

[[audits.web-push]]
who = "\"niklasf\" (https://github.com/niklasf)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-run",
]
version = "0.10.0"
notes = """
Send Web push messages.

Reviewed superficially before we started using it in production at
lichess.org. Has proven stable and reliable, delivering millions of messages
over months."""
aggregated-from = [
    "https://github.com/niklasf/crev-proofs#a0hN0qYwwDTmHtAchnTXiF-I_L9rK1KL5kgCmQoYR9o",
    "crev:review/sXSe4FM4S9pgBBEHvZHIMw-BEju0ypt6LLh2Ll023TI",
]

[[audits.weezl]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.1.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/12Vz5lxPSu1z7MfVWG--SiLoS3jnWn2ixPUt-74Ha_Y",
]

[[audits.which]]
who = "\"matthiasbeyer\" (https://github.com/matthiasbeyer)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "4.2.5 -> 4.3.0"
notes = """
Minor changes to the windows parts (did not look too closely). Most prominent
change seems to be lazy_static to be relaced with once_cell."""
aggregated-from = [
    "https://github.com/matthiasbeyer/crev-proofs#HT24oErbY-0x-yt9mGMZEk5S07lzpFQ4kayzEkVxJWU",
    "crev:review/U9btw6HGxY_PJ7z4EIijZVCodIxFb3m204S56BMHuD4",
]

[[audits.which]]
who = "\"matthiasbeyer\" (https://github.com/matthiasbeyer)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "4.2.5"
notes = """
Only one instance of unsafe code which seems ok to me (though I am not
experienced with unsafe code). Did not have a look at the cfg(windows) code
parts."""
aggregated-from = [
    "https://github.com/matthiasbeyer/crev-proofs#HT24oErbY-0x-yt9mGMZEk5S07lzpFQ4kayzEkVxJWU",
    "crev:review/E98t7dBKU7sG4WZrA0WgE7BbyeATe9sSCrWEv_wpUiA",
]

[[audits.widestring]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.2.2"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/ni-vS9IVAxzNKwlzJdZ8QuK7ikP3JHmi-ukM1cqOD-g",
]

[[audits.wild]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "2.0.2"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/D5lRcrIjt_mQjSY7BftqHjCC9lOhTLziEwzIsIxSZTs",
]

[[audits.winapi-build]]
who = "\"KonradBorowski\" (https://gitlab.com/KonradBorowski)"
criteria = [
    "strong",
    "level-medium",
    "trust-low",
]
version = "0.1.1"
notes = """
Does exactly what it is meant to do. Probably useless outside of its
intended use-case.
"""
aggregated-from = [
    "https://gitlab.com/KonradBorowski/crev-proofs#ZOm7om6WZyEf3SBmDC69BXs8sc1VPniYx7Nfz2Du6hM",
    "crev:review/WV4mQVew96m7t1lBVG8m87GyfiX0cktjMbWldsbH7P8",
]

[[audits.winapi-build]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.1.1"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/R-oT-rewhNSsYMlLc-VsTNBaz47BduhSVfNky0AEl80",
]

[[audits.winapi-i686-pc-windows-gnu]]
who = "\"Minoru\" (https://github.com/Minoru/crev-proofs.git)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-run",
]
version = "0.4.0"
notes = """
This crate vendors various WinAPI libraries for i686. All it does is add
a library search path to Cargo, pointing at a directory full of .a files
(static libraries).

I didn't actually verify where the libraries come from, and if they match
their origin; that's why I cap thoroughness at \"low\", and rating at
\"positive\"."""
aggregated-from = [
    "https://github.com/Minoru/crev-proofs.git#kQ1fVKX-nZhluPcz1Wj7PGsAgUe7sEeNXPCi0qDJQCw",
    "crev:review/FszJFVDfmUP-rEP_xy3T0AXU6bNK9yyy9KMt0U_STyw",
]

[[audits.windowed-infinity]]
who = "\"chrysn\" (https://gitlab.com/chrysn)"
criteria = [
    "positive",
    "level-medium",
    "trust-medium",
    "safe-to-run",
]
version = "0.1.1"
notes = "Own-crate review. Has been in \"just works\" mode for quite some time."
aggregated-from = [
    "https://gitlab.com/chrysn/crev-proofs#bYdCa4xhd5VL4dlcVPBxV51PrW5joFp9U04rKgcTvk8",
    "crev:review/zI9jqe9WJqGTOqrwzLBptFypX_cuN-1b4_b2l7FFSmU",
]

[[audits.windows_x86_64_gnu]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.36.1"
notes = "The build.rs is benign. The lib? Who knows."
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/Zlk5_I0n0-qdHnQGpqxhTMAXGkGr1kV_EZ1qEJAj5Ac",
]

[[audits.wingcli]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "negative",
    "level-low",
    "trust-high",
    "unmaintained",
]
version = "0.1.1"
notes = "Warning: this is stolen code"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#rBGRONmiSLmELT1SuRDDScgLcoJl8mTdEbZqz1XCesM",
    "crev:review/iYFioilImCc_E4-dZjxjlbgcRT6REYHrhib8n02IsRc",
]

[[audits.winres]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.1.11"
notes = """
Pros:
* Excellent!
* Easy `build.rs` integration

Cons:
* Awkward to use outside of a `build.rs` context.

See [Full Audit](https://github.com/MaulingMonkey/rust-reviews/blob/master/reviews/winres.md)"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/yckNXYQFvO6RoG5qgFEL5-782wtVOYk9efm0xlNjUfc",
]

[[audits.winutil]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "neutral",
    "level-low",
    "trust-high",
]
version = "0.1.1"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/uNIt2vWRBUK26KMSuTO078MY2ITHl5PVYk8MGC3ZnyQ",
]

[[audits.wolfssl-sys]]
who = "\"pmembrey\" (https://github.com/pmembrey)"
criteria = [
    "positive",
    "level-medium",
    "trust-low",
]
version = "0.1.10"
notes = """
I'm the owner of the crate. Currently it is a thin '-sys' binding for WolfSSL. It
uses a stored copy of WolfSSL that was downloaded directly from their github
repository.

As it is a raw C binding, the functions are all 'unsafe' and that should be taken
into account before considering the crate as it."""
aggregated-from = [
    "https://github.com/pmembrey/crev-proofs#_Y8MetA5kBAku0hT16qKcH2r0opSMQjUH-F1XUSrZW4",
    "crev:review/AMDnoVA6-i2aOU30W35jQcqigNp8l0nj_-t38ZYMYkY",
]

[[audits.wonderbox]]
who = "\"bash\" (https://github.com/bash/crev-proofs.git)"
criteria = [
    "positive",
    "level-medium",
    "trust-low",
]
version = "0.5.0"
aggregated-from = [
    "https://github.com/bash/crev-proofs.git#Mw3ReGwT2pB41AUQ12T7TcgvH5pq7I1gd8Iw_LLH4XQ",
    "crev:review/mETh_QbwFR_cUxT-WfepckVY0IO3swn94nsCg4-9kRs",
]

[[audits.xattr]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.2.2"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#Qf4cHJBEoho61fd5zoeweyrFCIZ7Pb5X5ggc5iw4B50",
    "crev:review/wfXreA5qvnoyds80YK1AxZKMe7Pqjyepk8Jl2cMVVwo",
]

[[audits.xml]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.8.10"
notes = "This is a re-export of xml-rs"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/LuXJDpJHiX4wENt9OfTFbFH9-cXFIXwUPjJ-iiExtM8",
]

[[audits.xml-rs]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
delta = "0.8.13 -> 0.8.16"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/U2KEB2YVIOOIaCwK955dYYLxIH2OsePPSi7RvvXao8Q",
]

[[audits.xml-rs]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-high",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.8.13"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/CDx0k2h2j8JFprdJzx8GWR-RokgjsepN2FR1fZvzLJg",
]

[[audits.xml_oxide]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.3.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/lUj1a3Nw8i2NQjqiv5mXYoSsp3wgexStUsZpaH8Fmpk",
]

[[audits.xsalsa20poly1305]]
who = "\"cure53\" (https://github.com/cure53)"
criteria = [
    "strong",
    "level-high",
    "trust-medium",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.8.0"
notes = "Cure53 audit report can be found here https://cure53.de/pentest-report_rust-libs_2022.pdf"
aggregated-from = [
    "https://github.com/cure53/crev-proofs#0hUWpC7FL4ImqfHj_y-ej2vx_Uk9fi3AHeM0a28jQyM",
    "crev:review/TUGItbzJuh7z5Wo81oLFPL-C5khYdKGHGKku0ZSr3xs",
]

[[audits.y4m]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
    "safe-to-run",
]
version = "0.5.3"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#X98FCpyv5I7z-xv4u-xMWLsFgb_Y0cG7p5xNFHSjbLA",
    "crev:review/lk9aN3gbWKaaEgF0sEmtkS4ufJfnSUvr4vdrBjS9QCE",
]

[[audits.you-can]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "negative",
    "level-low",
    "trust-high",
]
version = "0.0.5"
notes = "Do not use in production."
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/6IgQCc0bcYxVkL1O-gKMsZgMzw6gqpYr8DOYOOZj9m4",
]

[[audits.yuv]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.1.5"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/skChXpt70IICqHMtPcuLI9THIICe-otvxALdpgDByEo",
]

[[audits.yuvxyb]]
who = "\"kornelski\" (https://github.com/kornelski)"
criteria = [
    "positive",
    "level-low",
    "trust-high",
]
version = "0.3.0"
aggregated-from = [
    "https://github.com/kornelski/crev-proofs#vfFGLngrNij8Mtla7J0RfdSmQqM4meJFZ128_04L780",
    "crev:review/CXnF7oVMfCpo84SnmzrG0ThMvtOMSDdgS1So1iyLvzg",
]

[[audits.zeroize]]
who = "\"dpc\" (https://github.com/dpc)"
criteria = [
    "strong",
    "level-medium",
    "trust-high",
    "safe-to-deploy",
    "safe-to-run",
]
version = "0.5.2"
aggregated-from = [
    "https://github.com/dpc/crev-proofs#FYlr8YoYGVvDwHQxqEIs89reKKDy-oWisoO0qXXEfHE",
    "crev:review/8ZhmpoKicuBQcLv9XZo0v9cT_ySXk3shd7_TKT2H2VA",
]

[[audits.zip]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
delta = "0.5.2 -> 0.5.3"
notes = """
0.5.3:  Replaced libflate with flate2, minor touchups.  LGTM.
0.5.2:  Looks like a solid crate.  A few minor concerns:

* 755 permissions.  Necessary, but bandied about.
* Unsanitized path names are accessible, easy to misuse.
* Doesn't ban access to `CON` or similar.
* Lacks fuzz tests

Detail
======

| File                                          | Rating | Notes |
| --------------------------------------------- | ------ | ----- |
| benches/read_entry.rs                         | +1    | |
| examples/extract_lorem.rs                     | +1    | |
| examples/extract.rs                           | +1    | |
| examples/file_info.rs                         | +1    | |
| examples/stdin_info.rs                        | +1    | |
| examples/write_dir.rs                         | 0     | 755 permissions make me slightly nervous, but I think it's safe
| examples/write_sample.rs                      | 0     | 755 permissions make me slightly nervous, but I think it's safe
| script/doc-upload.cfg                         | +1    | |
| src/compression.rs                            | +1    | |
| src/cp437.rs                                  | +1    | |
| src/crc32.rs                                  | +1    | |
| src/lib.rs                                    | +1    | |
| src/read.rs                                   | +1    | |
| src/result.rs                                 | +1    | |
| src/spec.rs                                   | +1    | |
| src/types.rs                                  | 0     | Could be a little more defensive towards misue, but pretty solid.
| src/write.rs                                  | +1    | |
| tests/data/*.zip                              |       | Unreviewed... probably OK though
| tests/end_to_end.rs                           | +1    | |
| tests/invalid_date.rs                         | +1    | |
| tests/zip64_large.rs                          | +1    | |
| .gitignore                                    | +1    | |
| .travis.yml                                   | -1    | | curl random urls
| appveyor.yml                                  | -1    | | sourceforge mingw urls
| Cargo.toml                                    | +1    | |
| Cargo.toml.orig                               | +1    | |
| LICENSE                                       | +1    | MIT
| README.md                                     | +1    | |

| Other     | Rating | Notes |
| --------- | ------ | ----- |
| unsafe    | +1    | No unsafe code
| fs        | +1    | Examples/tests appear safe.
| io        | +1    | |
| docs      | +1    | |
| tests     | +1    | Could use more fuzzing tests

### src/types.rs

| Line | Notes |
| ----:| ----- |
| 215   | I'd like this to have a scarier name... but eh, at least it's sound.
| 250   | This drops invalid components... I think it should return an error on invalid components.  But at least it's sound and shouldn't be vulnerable to path navigation attacks?
| 250   | This doesn't forbid `CON` or similar.
| 298   | *Excellent* test, this is exactly what I want to see!
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/U-T4QNGbuVRVj5FLM2txQmr_YXGTZgnnJm9_7dUfcfA",
]

[[audits.zip]]
who = "\"MaulingMonkey\" (https://github.com/MaulingMonkey)"
criteria = [
    "positive",
    "level-low",
    "trust-medium",
    "safe-to-run",
]
version = "0.5.2"
notes = """
Looks like a solid crate.  A few minor concerns:

* 755 permissions.  Necessary, but bandied about.
* Unsanitized path names are accessible, easy to misuse.
* Doesn't ban access to `CON` or similar.
* Lacks fuzz tests

Detail
======

| File                                          | Rating | Notes |
| --------------------------------------------- | ------ | ----- |
| benches/read_entry.rs                         | +1    | |
| examples/extract_lorem.rs                     | +1    | |
| examples/extract.rs                           | +1    | |
| examples/file_info.rs                         | +1    | |
| examples/stdin_info.rs                        | +1    | |
| examples/write_dir.rs                         | 0     | 755 permissions make me slightly nervous, but I think it's safe
| examples/write_sample.rs                      | 0     | 755 permissions make me slightly nervous, but I think it's safe
| script/doc-upload.cfg                         | +1    | |
| src/compression.rs                            | +1    | |
| src/cp437.rs                                  | +1    | |
| src/crc32.rs                                  | +1    | |
| src/lib.rs                                    | +1    | |
| src/read.rs                                   | +1    | |
| src/result.rs                                 | +1    | |
| src/spec.rs                                   | +1    | |
| src/types.rs                                  | 0     | Could be a little more defensive towards misue, but pretty solid.
| src/write.rs                                  | +1    | |
| tests/data/*.zip                              |       | Unreviewed... probably OK though
| tests/end_to_end.rs                           | +1    | |
| tests/invalid_date.rs                         | +1    | |
| tests/zip64_large.rs                          | +1    | |
| .gitignore                                    | +1    | |
| .travis.yml                                   | -1    | | curl random urls
| appveyor.yml                                  | -1    | | sourceforge mingw urls
| Cargo.toml                                    | +1    | |
| Cargo.toml.orig                               | +1    | |
| LICENSE                                       | +1    | MIT
| README.md                                     | +1    | |

| Other     | Rating | Notes |
| --------- | ------ | ----- |
| unsafe    | +1    | No unsafe code
| fs        | +1    | Examples/tests appear safe.
| io        | +1    | |
| docs      | +1    | |
| tests     | +1    | Could use more fuzzing tests

### src/types.rs

| Line | Notes |
| ----:| ----- |
| 215   | I'd like this to have a scarier name... but eh, at least it's sound.
| 250   | This drops invalid components... I think it should return an error on invalid components.  But at least it's sound and shouldn't be vulnerable to path navigation attacks?
| 250   | This doesn't forbid `CON` or similar.
| 298   | *Excellent* test, this is exactly what I want to see!
"""
aggregated-from = [
    "https://github.com/MaulingMonkey/crev-proofs#6OZqHXqyUAF57grEY7IVMjRljdd9dgDxiNtr1NF1BdY",
    "crev:review/IJ49X8BFDSD5k0Kj3ptcKVHiuRkMAnctmUCtlkk4mnU",
]

[criteria.level-high]
description = "The code has been thoroughly reviewed and/or with high understanding. This means 'at least this much' so higher levels imply all lower levels"
implies = ["level-medium"]
aggregated-from = ["https://github.com/crev-dev"]

[criteria.level-low]
description = "The code has been only checked at a glance and/or with low understanding. This means 'at least this much' so higher levels imply all lower levels"
implies = ["level-none"]
aggregated-from = ["https://github.com/crev-dev"]

[criteria.level-medium]
description = "The code has been reviewed with average thoroughness or understanding. This means 'at least this much' so higher levels imply all lower levels"
implies = ["level-low"]
aggregated-from = ["https://github.com/crev-dev"]

[criteria.level-none]
description = "The code hasn't been reviewed or hasn't been understood"
aggregated-from = ["https://github.com/crev-dev"]

[criteria.negative]
description = "Problems reported with the package"
aggregated-from = ["https://github.com/crev-dev"]

[criteria.neutral]
description = "There is no rating either way. Check the comments for reports of issues"
aggregated-from = ["https://github.com/crev-dev"]

[criteria.positive]
description = "Positive review rating"
aggregated-from = ["https://github.com/crev-dev"]

[criteria.strong]
description = "Strong endorsement. It implies a positive rating"
implies = ["positive"]
aggregated-from = ["https://github.com/crev-dev"]

[criteria.trust-high]
description = "Author of this review is well known and trusted by the publisher of this audit repository. This means 'at least this much', so higher levels imply all lower levels"
implies = ["trust-medium"]
aggregated-from = ["https://github.com/crev-dev"]

[criteria.trust-low]
description = "Author of this review is not well known, or not trusted much, by the publisher of this audit repository"
aggregated-from = ["https://github.com/crev-dev"]

[criteria.trust-medium]
description = "Author of this review is somewhat known and trusted by the publisher of this audit repository"
implies = ["trust-low"]
aggregated-from = ["https://github.com/crev-dev"]

[criteria.unmaintained]
description = "The package has been flagged as unmaintained"
aggregated-from = ["https://github.com/crev-dev"]
